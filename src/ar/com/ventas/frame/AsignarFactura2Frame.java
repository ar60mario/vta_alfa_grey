/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.ventas.frame;

import ar.com.ventas.entities.Abono;
import ar.com.ventas.entities.AbonoFactura;
import ar.com.ventas.entities.Administrador;
import ar.com.ventas.entities.AdministradorTitularCuitComprobante;
import ar.com.ventas.entities.Comprobante;
import ar.com.ventas.entities.ComprobanteRenglones;
import ar.com.ventas.entities.Consorcio;
import ar.com.ventas.entities.ConsorcioFactura;
import ar.com.ventas.entities.ConsorcioMaster;
import ar.com.ventas.entities.CuentaCorrienteCliente;
import ar.com.ventas.entities.Domicilio;
import ar.com.ventas.entities.RenglonAbono;
import ar.com.ventas.entities.Rubro;
import ar.com.ventas.entities.TitularCuit;
import ar.com.ventas.estructuras.Constantes;
import ar.com.ventas.services.AbonoFacturaService;
import ar.com.ventas.services.AbonoService;
import ar.com.ventas.services.AdministradorTitularCuitComprobanteService;
import ar.com.ventas.services.ComprobanteRenglonesService;
import ar.com.ventas.services.ComprobanteService;
import ar.com.ventas.services.ConsorcioMasterService;
import ar.com.ventas.services.ConsorcioService;
import ar.com.ventas.services.CuentaCorrienteClienteService;
import ar.com.ventas.services.RenglonAbonoService;
import ar.com.ventas.services.TitularCuitService;
import ar.com.ventas.util.UtilFrame;
import java.awt.Color;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Mario
 */
public class AsignarFactura2Frame extends javax.swing.JFrame {

    private List<Consorcio> consorcios;
    private Abono abono;
//    private List<Consorcio> consosNuevos;
//    private List<Abono> abonosConsosNuevos;
    private List<ConsorcioFactura> facturas;
    private SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    private DecimalFormat df = new DecimalFormat("#0.00");

    /**
     * Creates new form AsignarFacturaFrame
     *
     * @param abono
     */
    public AsignarFactura2Frame(Abono abono) {
        initComponents();
        getContentPane().setBackground(new java.awt.Color(Constantes.getR(), Constantes.getG(), Constantes.getB()));
        setExtendedState(6); // this.MAXIMIZED_BOTH
//        this.setLocationRelativeTo(null);
        this.abono = abono;
        limpiarCampos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        asignarBtn = new javax.swing.JButton();
        volverBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        filtroTxt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        deTxt = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        alTxt = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        importeAnteriorTxt = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        cuotaTxt = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("ASIGNAR FACTURA A CONSORCIO");

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CONSORCIO", "CUIT", "ADMINISTRADOR", "FECH.FC", "NUMERO", "CTA", "RUB", "IMPORTE", "TITULAR"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabla);
        if (tabla.getColumnModel().getColumnCount() > 0) {
            tabla.getColumnModel().getColumn(0).setPreferredWidth(170);
            tabla.getColumnModel().getColumn(1).setPreferredWidth(40);
            tabla.getColumnModel().getColumn(2).setPreferredWidth(70);
            tabla.getColumnModel().getColumn(3).setPreferredWidth(20);
            tabla.getColumnModel().getColumn(4).setPreferredWidth(5);
            tabla.getColumnModel().getColumn(5).setPreferredWidth(5);
            tabla.getColumnModel().getColumn(7).setPreferredWidth(20);
            tabla.getColumnModel().getColumn(8).setPreferredWidth(90);
        }

        asignarBtn.setText("Asignar");
        asignarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                asignarBtnActionPerformed(evt);
            }
        });

        volverBtn.setText("Volver");
        volverBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverBtnActionPerformed(evt);
            }
        });

        jLabel1.setText("CONSORCIO:");

        filtroTxt.setText("FILTRO");

        jLabel2.setText("DESDE:");

        deTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        deTxt.setText("DESDE");
        deTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                deTxtKeyPressed(evt);
            }
        });

        jLabel3.setText("HASTA:");

        alTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        alTxt.setText("HASTA");
        alTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                alTxtKeyPressed(evt);
            }
        });

        jLabel4.setText("TOTAL ABONO ANTERIOR:");

        importeAnteriorTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        importeAnteriorTxt.setText("IMP-ANTES");

        jLabel5.setText("CUOTA ANTERIOR:");

        cuotaTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        cuotaTxt.setText("cuota");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 939, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(asignarBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(volverBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(deTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(alTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(filtroTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(75, 75, 75)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(importeAnteriorTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(cuotaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(deTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(alTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(filtroTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(importeAnteriorTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(asignarBtn)
                    .addComponent(volverBtn)
                    .addComponent(jLabel5)
                    .addComponent(cuotaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void volverBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverBtnActionPerformed
        volver();
    }//GEN-LAST:event_volverBtnActionPerformed

    private void deTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_deTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            String fe = deTxt.getText();
            int largo = fe.length();
            if (largo == 10) {
                alTxt.requestFocus();
            } else {
                if (largo > 10) {
                    JOptionPane.showMessageDialog(this, "ERROR EN LARGO DE FECHA");
                    return;
                }
            }
            fe = UtilFrame.fecha(fe);
            deTxt.setText(fe);
        }
    }//GEN-LAST:event_deTxtKeyPressed

    private void alTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_alTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            String fe = alTxt.getText();
            int largo = fe.length();
            if (largo == 10) {
                buscar();
            } else {
                if (largo > 10) {
                    JOptionPane.showMessageDialog(this, "ERROR EN LARGO DE FECHA");
                    return;
                }
            }
            fe = UtilFrame.fecha(fe);
            alTxt.setText(fe);
        }
    }//GEN-LAST:event_alTxtKeyPressed

    private void asignarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_asignarBtnActionPerformed
        asignar();
    }//GEN-LAST:event_asignarBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AsignarFactura2Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AsignarFactura2Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AsignarFactura2Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AsignarFactura2Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AsignarFactura2Frame(null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField alTxt;
    private javax.swing.JButton asignarBtn;
    private javax.swing.JTextField cuotaTxt;
    private javax.swing.JTextField deTxt;
    private javax.swing.JTextField filtroTxt;
    private javax.swing.JTextField importeAnteriorTxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabla;
    private javax.swing.JButton volverBtn;
    // End of variables declaration//GEN-END:variables

    private void volver() {
        RenovarAbonosVencidosFrame mf = new RenovarAbonosVencidosFrame();
        mf.setVisible(true);
        this.dispose();
    }

    private void buscar() {
        consorcios = null;
        Date de = new Date();
        Date al = new Date();
        try {
            de = sdf.parse(deTxt.getText());
            al = sdf.parse(alTxt.getText());
        } catch (ParseException ex) {
            Logger.getLogger(AsignarFactura2Frame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "ERROR");
            return;
        }
        try {
            consorcios = new ConsorcioService().getConsorciosActivosMaster();
        } catch (Exception ex) {
            Logger.getLogger(AsignarFactura2Frame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "ERROR");
            return;
        }
        UtilFrame.limpiarTabla(tabla);
        if (consorcios != null && !consorcios.isEmpty()) {

            facturas = new ArrayList<>();
            for (Consorcio co : consorcios) {
                List<Comprobante> comprobantes = null;
                try {
                    comprobantes = new ComprobanteService().getComprobantesEntreFechasByConsorcio(co, de, al);
                } catch (Exception ex) {
                    Logger.getLogger(AsignarFactura2Frame.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (comprobantes != null && !comprobantes.isEmpty()) {
                    for (Comprobante cm : comprobantes) {
                        if (cm.getOriginal() != null) {
                            if (cm.getOriginal()) {
                                ConsorcioFactura cnf = new ConsorcioFactura();
                                cnf.setComprobante(cm);
                                cnf.setConsorcio(co);
                                facturas.add(cnf);
                            }
                        }
                    }
                }
            }
            fillTabla(facturas);
        }
    }

    private void limpiarCampos() {
        deTxt.setText("");
        alTxt.setText("");
        filtroTxt.setText("");
        Domicilio dm = abono.getConsorcio().getDomicilio();
        String calle = dm.getCalle() + " " + dm.getNumero();
        filtroTxt.setText(calle);
        importeAnteriorTxt.setText(df.format(abono.getImporte()));
        cuotaTxt.setText(df.format(abono.getImporte() / abono.getCuotas()));
    }

    private void asignar() {
        int row0 = tabla.getSelectedRow();
        if (row0 < 0) {
            JOptionPane.showMessageDialog(this, "SELECCIONE UNA FACTURA PARA ASIGNAR");
            return;
        }
        int nroAbono = 0;
        try {
            nroAbono = new AbonoService().getCodigoSiguiente();
        } catch (Exception ex) {
            Logger.getLogger(AsignarFactura2Frame.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        nroAbono += 1;
        Rubro rubro = abono.getRubro();
        int cuotasNuevoAbono = abono.getCuotas();
        Consorcio cons = facturas.get(row0).getConsorcio();
        Consorcio consoNuevo = abono.getConsorcio();//combo
        if (asignar(consoNuevo, rubro, cons)) {
            JOptionPane.showMessageDialog(this, "YA EXISTE FACTURA ASIGNADA");
            return;
        }
        Comprobante factura = facturas.get(row0).getComprobante();
        Administrador admin = consoNuevo.getAdministrador();
        TitularCuit titular = null;
        try {
            titular = new TitularCuitService().getTitularActivoByCuit(factura.getCuitTitular());
        } catch (Exception ex) {
            Logger.getLogger(AsignarFactura2Frame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "ERROR EN TITULAR");
            return;
        }
        Boolean existe;
        existe = verificar(admin, factura);
//        System.exit(0);
        if (!existe) {
            System.out.println(existe);
            JOptionPane.showMessageDialog(this, "ERROR EXISTE ADMINISTRACION");
            return;
        }
        int cuotaFacturada = abono.getCuotaFacturada();
        Comprobante cmpNuevo = new Comprobante();
//        System.out.println(consorcio.getDomicilio().getCalle() + consorcio.getDomicilio().getNumero());
        Domicilio dmN = consoNuevo.getDomicilio();
        Administrador admi = consoNuevo.getAdministrador();
        Long idAdmi = admi.getId();
        String calleNueva = dmN.getCalle() + " " + dmN.getNumero();
        cmpNuevo.setCae(factura.getCae());
        cmpNuevo.setCalleNroPisoDtoCliente(calleNueva);
        cmpNuevo.setCantidadCuotas(factura.getCantidadCuotas());
        cmpNuevo.setCodigoCliente(consoNuevo.getCodigo());
        cmpNuevo.setCodigoComprobante(factura.getCodigoComprobante());
        cmpNuevo.setCodigoPostalAndLocalidadCliente(dmN.getCodigoPostal() + " " + dmN.getLocalidad());
        cmpNuevo.setCodigoPostalAndLocalidadTitular(factura.getCodigoPostalAndLocalidadTitular());
        cmpNuevo.setCuitCliente(factura.getCuitCliente());
        cmpNuevo.setCuitTitular(factura.getCuitTitular());
        cmpNuevo.setCuotasPagadas(1);
        cmpNuevo.setDomicilioTitular(factura.getDomicilioTitular());
        cmpNuevo.setFecha(factura.getFecha());
        cmpNuevo.setFechaInicioActividades(factura.getFechaInicioActividades());
        cmpNuevo.setFechaPeriodoDesde(factura.getFechaPeriodoDesde());
        cmpNuevo.setFechaPeriodoHasta(factura.getFechaPeriodoHasta());
        cmpNuevo.setFechaVencimientoCae(factura.getFechaVencimientoCae());
        cmpNuevo.setFechaVencimientoPago(factura.getFechaVencimientoPago());
        cmpNuevo.setGravado(factura.getGravado());
        cmpNuevo.setIibb(factura.getIibb());
        cmpNuevo.setIva(factura.getIva());
        cmpNuevo.setLetra(factura.getLetra());
        cmpNuevo.setLetraComprobanteAsociado(factura.getLetraComprobanteAsociado());
        cmpNuevo.setNumero(factura.getNumero());
        cmpNuevo.setNumeroComprobanteAsociado(factura.getNumeroComprobanteAsociado());
        cmpNuevo.setOriginal(true);
        cmpNuevo.setId_original(factura.getId());
        cmpNuevo.setPagado(0.0);
        cmpNuevo.setPdfGenerado(false);
        cmpNuevo.setProductoServicio(factura.getProductoServicio());
        cmpNuevo.setProvinciaCliente(dmN.getProvincia());
        cmpNuevo.setProvinciaTitular(factura.getProvinciaTitular());
        cmpNuevo.setRazonSocialCliente(consoNuevo.getNombre());
        cmpNuevo.setRazonSocialTitular(factura.getRazonSocialTitular());
        cmpNuevo.setRubro(rubro);
        cmpNuevo.setSucursal(factura.getSucursal());
        cmpNuevo.setSucursalComprobanteAsociado(factura.getSucursalComprobanteAsociado());
        cmpNuevo.setTexto1(factura.getTexto1());
        cmpNuevo.setTexto2(factura.getTexto2());
        cmpNuevo.setTipoComprobanteAsociado(factura.getTipoComprobanteAsociado());
        cmpNuevo.setTipoDocumento(factura.getTipoDocumento());
        cmpNuevo.setTipoEmision(factura.getTipoEmision());
        cmpNuevo.setTipoInscripcion(factura.getTipoInscripcion());
        cmpNuevo.setTotal(factura.getTotal());
        cmpNuevo.setPeriodo("");
        cmpNuevo.setPeriodoHabilitado(false);
        cmpNuevo.setId_administrador(idAdmi);
        List<ComprobanteRenglones> renglones = null;
        //abono.setCuotaFacturada(cuotaFacturada + 1);
        abono.setPendiente(false);
        abono.setActivo(false);
        Abono abono2 = new Abono();
        abono2.setActivo(true);
        abono2.setCodigo(nroAbono);
        abono2.setConsorcio(consoNuevo);
        abono2.setCuotaFacturada(1);
        abono2.setCuotas(cuotasNuevoAbono);
        abono2.setFechaInicio(abono.getFechaInicio());
        abono2.setFechaPeriodo(new Date());
        abono2.setFrecuencia(abono.getFrecuencia());
        abono2.setImporte(factura.getTotal() * factura.getCantidadCuotas());
        abono2.setOriginal(0);
        abono2.setPendiente(false);
        abono2.setRenovado(true);
        abono2.setRubro(rubro);
        if (factura.getPeriodo() != null) {
            abono2.setTextoPeriodo(abono.getTextoPeriodo());
        }
        abono2.setTipoFacturacion(abono.getTipoFacturacion());
        abono2.setTitular(titular);
        List<RenglonAbono> rengA = null;
        try {
            rengA = new RenglonAbonoService().getRenglonAbonosByAbono(abono);
        } catch (Exception ex) {
            Logger.getLogger(AsignarFactura2Frame.class.getName()).log(Level.SEVERE, null, ex);
        }
        List<RenglonAbono> rengA2 = new ArrayList<>();
        for (RenglonAbono rea : rengA) {
            RenglonAbono ran2 = new RenglonAbono();
            
            volver();
        }
        try {
            renglones = new ComprobanteRenglonesService().getRenglonesPorComprobante(factura);
        } catch (Exception ex) {
            Logger.getLogger(AsignarFactura2Frame.class.getName()).log(Level.SEVERE, null, ex);
        }
        List<ComprobanteRenglones> renglonesNuevo = new ArrayList<>();
        if (renglones != null && !renglones.isEmpty()) {

            for (ComprobanteRenglones cr : renglones) {
                ComprobanteRenglones cr0 = new ComprobanteRenglones();
                cr0.setComprobante(cmpNuevo);
                cr0.setDetalle(cr.getDetalle());
                cr0.setImporte(cr.getImporte());
                renglonesNuevo.add(cr0);
            }
        }
        Double saldo = consoNuevo.getSaldo();
        saldo += factura.getTotal();
        consoNuevo.setSaldo(saldo);
        AdministradorTitularCuitComprobante atcc = new AdministradorTitularCuitComprobante();
        atcc.setAdministrador(admin);
        atcc.setComprobante(factura);
        atcc.setTitular(titular);
        CuentaCorrienteCliente ccc = new CuentaCorrienteCliente();
        ccc.setComprobante(cmpNuevo);
        ccc.setConsorcio(consoNuevo);
        ccc.setDebe(factura.getTotal());
        ccc.setFecha(factura.getFecha());
        ccc.setHaber(0.0);
        ccc.setRecibo(null);
        ccc.setSaldo(saldo);
        ccc.setTipoComprobante(11);
        AbonoFactura af = new AbonoFactura();
        af.setAbono(abono2);
        af.setActivo(true);
        af.setComprobante(factura);
        af.setTitular(titular);
        try {
            new AdministradorTitularCuitComprobanteService().saveFactura(atcc);
            new ConsorcioService().updateConsorcio(consoNuevo);
            cmpNuevo = new ComprobanteService().saveComprobante(cmpNuevo);
            ccc.setComprobante(cmpNuevo);
            new CuentaCorrienteClienteService().saveCuentaCorrienteCliente(ccc);
            for (ComprobanteRenglones cr1 : renglonesNuevo) {
                cr1.setComprobante(cmpNuevo);
                new ComprobanteRenglonesService().saveRenglon(cr1);
            }
            new AbonoService().updateAbono(abono);
            new AbonoService().saveAbono(abono2);
            new AbonoFacturaService().saveAbonoFactura(af);
        } catch (Exception ex) {
            Logger.getLogger(AsignarFactura2Frame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "ERROR EN PROCESOS DE ASIGNACION");
            return;
        }
        JOptionPane.showMessageDialog(this, "ASIGNACION COMPLETADA CORRECTAMENTE");
//        volver();
    }

    private Boolean verificar(Administrador admin, Comprobante factura) {
        String cuitTitular = factura.getCuitTitular();
        List<AdministradorTitularCuitComprobante> atcc = null;
        try {
            atcc = new AdministradorTitularCuitComprobanteService().getExistenFacturas(factura, cuitTitular, admin);
        } catch (Exception ex) {
            Logger.getLogger(AsignarFactura2Frame.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println(atcc);
            return true;
        }
        if (atcc.isEmpty()) {
            System.out.println(atcc);
            return true;
        } else {
            System.out.println(atcc);
            return false;
        }
    }

    private void fillTabla(List<ConsorcioFactura> facturas) {
        DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
        if (facturas != null && !facturas.isEmpty()) {
            for (ConsorcioFactura cm : facturas) {
                Domicilio dm = cm.getConsorcio().getDomicilio();
                String adm = cm.getConsorcio().getAdministrador().getNombreAdministrador();
                String domi = dm.getCalle() + " " + dm.getNumero();
                Object o[] = new Object[9];
                o[0] = domi;
                o[1] = cm.getConsorcio().getCuit();
                o[2] = adm;
                o[3] = sdf.format(cm.getComprobante().getFecha());
                o[4] = cm.getComprobante().getNumero();
                o[5] = cm.getComprobante().getCuotasPagadas();
                o[6] = cm.getComprobante().getRubro().getDetalle();
                o[7] = df.format(cm.getComprobante().getTotal());
                o[8] = cm.getComprobante().getRazonSocialTitular();
                tbl.addRow(o);
            }
            tabla.setModel(tbl);
        }
    }

    private Boolean asignar(Consorcio consoNuevo, Rubro rubro, Consorcio consorcio) {
        ConsorcioMaster cm = null;
        try {
            cm = new ConsorcioMasterService().getConsorcioActivoMaster(consorcio, rubro, consoNuevo);
        } catch (Exception ex) {
            Logger.getLogger(AsignarFactura2Frame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (cm != null) {
            return true;
        } else {
            Integer codigo = consorcio.getCodigo();
            ConsorcioMaster cm1 = new ConsorcioMaster();
            cm1.setActivo(true);
            cm1.setRubro(rubro);
            cm1.setConsorcio(consoNuevo);
            cm1.setMaster(codigo);
            try {
                new ConsorcioMasterService().saveConsorcioMaster(cm1);
            } catch (Exception ex) {
                Logger.getLogger(AsignarFactura2Frame.class.getName()).log(Level.SEVERE, null, ex);
            }
            return false;
        }
    }
}
