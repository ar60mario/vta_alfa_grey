/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.ventas.frame;

import ar.com.ventas.entities.Abono;
import ar.com.ventas.entities.AbonoFactura;
import ar.com.ventas.entities.Comprobante;
import ar.com.ventas.entities.ComprobanteNumerosIniciales;
import ar.com.ventas.entities.ComprobanteRenglones;
import ar.com.ventas.entities.Consorcio;
import ar.com.ventas.entities.CuentaCorrienteCliente;
import ar.com.ventas.entities.Domicilio;
import ar.com.ventas.entities.Persona;
import ar.com.ventas.entities.RenglonAbono;
import ar.com.ventas.entities.Rubro;
import ar.com.ventas.entities.TitularCuit;
import ar.com.ventas.estructuras.Constantes;
import ar.com.ventas.main.MainFrame;
import ar.com.ventas.services.AbonoFacturaService;
import ar.com.ventas.services.AbonoService;
import ar.com.ventas.services.ComprobanteNumerosInicialesService;
import ar.com.ventas.services.ComprobanteRenglonesService;
import ar.com.ventas.services.ComprobanteService;
import ar.com.ventas.services.ConsorcioService;
import ar.com.ventas.services.CuentaCorrienteClienteService;
import ar.com.ventas.services.RenglonAbonoService;
import ar.com.ventas.services.TitularCuitService;
import ar.com.ventas.util.UtilFactura;
import ar.com.ventas.util.UtilFrame;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Mario
 */
public class RenovarAbonoVencidoFrame extends javax.swing.JFrame {

    private Abono abono;
    private TitularCuit tc;
    private DecimalFormat df = new DecimalFormat("#0.00");
    private SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    private List<TitularCuit> titulares;

    /**
     * Creates new form RenovarAbonoVencidoFrame
     *
     * @param abono
     * @param tc
     */
    public RenovarAbonoVencidoFrame(Abono abono, TitularCuit tc) {
        initComponents();
        getContentPane().setBackground(new java.awt.Color(Constantes.getR(), Constantes.getG(), Constantes.getB()));
        this.setLocationRelativeTo(null);
//        setExtendedState(6); // this.MAXIMIZED_BOTH
        this.abono = abono;
        this.tc = tc;
        llenarFrame();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        consorcioTxt = new javax.swing.JTextField();
        rubroTxt = new javax.swing.JTextField();
        titularTxt = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        importeTxt = new javax.swing.JTextField();
        nuevoTitularChk = new javax.swing.JCheckBox();
        jLabel5 = new javax.swing.JLabel();
        nuevoImporteTxt = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        combo = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        grabarBtn = new javax.swing.JButton();
        volverBtn = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        importeCuotaTxt = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        cuotasTxt = new javax.swing.JTextField();
        fechaTxt = new javax.swing.JTextField();
        deTxt = new javax.swing.JTextField();
        alTxt = new javax.swing.JTextField();
        vtoTxt = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("RENOVAR ABONO VENCIDO");

        jLabel1.setText("CONSORCIO:");

        jLabel2.setText("RUBRO:");

        jLabel3.setText("TITULAR DE CUIT:");

        consorcioTxt.setText("CONSORCIO");

        rubroTxt.setText("RUBRO");

        titularTxt.setText("TITULAR");

        jLabel4.setText("IMPORTE ABONO:");

        importeTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        importeTxt.setText("IMPORTE");

        nuevoTitularChk.setText("NUEVO TITULAR");
        nuevoTitularChk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoTitularChkActionPerformed(evt);
            }
        });

        jLabel5.setText("NUEVO IMPORTE:");

        nuevoImporteTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        nuevoImporteTxt.setText("NUEVO");

        jLabel6.setText("TITULARES CUIT");

        combo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        combo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboActionPerformed(evt);
            }
        });

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "TITULAR", "DISPONIBLE", "ABONOS", "SALDO"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabla);

        grabarBtn.setText("Grabar");
        grabarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                grabarBtnActionPerformed(evt);
            }
        });

        volverBtn.setText("Volver");
        volverBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverBtnActionPerformed(evt);
            }
        });

        jLabel7.setText("CUOTA X MES:");

        importeCuotaTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        importeCuotaTxt.setText("IMPORTE");

        jLabel8.setText("CUOTAS:");

        cuotasTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        cuotasTxt.setText("CUOTAS");

        fechaTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        fechaTxt.setText("FECHA");

        deTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        deTxt.setText("DESDE");

        alTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        alTxt.setText("HASTA");

        vtoTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        vtoTxt.setText("VENCE");

        jLabel9.setText("FECHA FC:");

        jLabel10.setText("PERÍODO DESDE:");

        jLabel11.setText("PERÍODO HASTA:");

        jLabel12.setText("VENCIM.PAGO:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 918, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(nuevoTitularChk)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5))
                                .addGap(57, 57, 57)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(consorcioTxt)
                                    .addComponent(rubroTxt)
                                    .addComponent(titularTxt)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(nuevoImporteTxt, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(importeTxt, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 152, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING)))))
                            .addComponent(jLabel6)
                            .addComponent(combo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(importeCuotaTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                                    .addComponent(cuotasTxt))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel12))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel10)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel11))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(fechaTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE)
                            .addComponent(deTxt)
                            .addComponent(alTxt)
                            .addComponent(vtoTxt)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(grabarBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(volverBtn)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(consorcioTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fechaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(rubroTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(titularTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(alTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(importeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(cuotasTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(vtoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nuevoTitularChk)
                    .addComponent(jLabel7)
                    .addComponent(importeCuotaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(nuevoImporteTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addComponent(combo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(grabarBtn)
                    .addComponent(volverBtn))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nuevoTitularChkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevoTitularChkActionPerformed
        if (nuevoTitularChk.isSelected()) {
            llenarCombo();
        } else {
            vaciarCombo();
        }
    }//GEN-LAST:event_nuevoTitularChkActionPerformed

    private void volverBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverBtnActionPerformed
        volver();
    }//GEN-LAST:event_volverBtnActionPerformed

    private void comboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboActionPerformed
        int row = combo.getSelectedIndex();
        if (row > 0) {
            if (!nuevoImporteTxt.getText().isEmpty()) {
                llenarTabla(row);
            } else {
                JOptionPane.showMessageDialog(this, "DEBE INGRESAR UN IMPORTE");
                nuevoImporteTxt.requestFocus();
            }
        }
    }//GEN-LAST:event_comboActionPerformed

    private void grabarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grabarBtnActionPerformed
        grabar();
    }//GEN-LAST:event_grabarBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RenovarAbonoVencidoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RenovarAbonoVencidoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RenovarAbonoVencidoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RenovarAbonoVencidoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RenovarAbonoVencidoFrame(null, null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField alTxt;
    private javax.swing.JComboBox<String> combo;
    private javax.swing.JTextField consorcioTxt;
    private javax.swing.JTextField cuotasTxt;
    private javax.swing.JTextField deTxt;
    private javax.swing.JTextField fechaTxt;
    private javax.swing.JButton grabarBtn;
    private javax.swing.JTextField importeCuotaTxt;
    private javax.swing.JTextField importeTxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField nuevoImporteTxt;
    private javax.swing.JCheckBox nuevoTitularChk;
    private javax.swing.JTextField rubroTxt;
    private javax.swing.JTable tabla;
    private javax.swing.JTextField titularTxt;
    private javax.swing.JButton volverBtn;
    private javax.swing.JTextField vtoTxt;
    // End of variables declaration//GEN-END:variables

    private void llenarFrame() {
        Domicilio dm = abono.getConsorcio().getDomicilio();
        String calle = dm.getCalle() + " " + dm.getNumero();
        String rubro = abono.getRubro().getDetalle();
        String titular = tc.getPersona().getApellidoNombre();
        String importe = df.format(abono.getImporte());
        String cuotas = abono.getCuotas().toString();
        Double impCta = abono.getImporte() / abono.getCuotas();
        String importeCuota = df.format(impCta);
        consorcioTxt.setText(calle);
        rubroTxt.setText(rubro);
        titularTxt.setText(titular);
        importeTxt.setText(importe);
        nuevoTitularChk.setSelected(false);
        titulares = null;
        combo.removeAllItems();
        combo.addItem("");
        cuotasTxt.setText(cuotas);
        importeCuotaTxt.setText(importeCuota);
        nuevoImporteTxt.setText("");
        Date fecha = new Date();
        fechaTxt.setText(sdf.format(fecha));
        String de = UtilFrame.getFechaPrimero(fechaTxt.getText());
        deTxt.setText(de);
        String al = UtilFrame.getFechaFinMes(fechaTxt.getText());
        alTxt.setText(al);
        vtoTxt.setText(al);
        nuevoTitularChk.requestFocus();
    }

    private void llenarCombo() {
        titulares = null;
        combo.removeAllItems();
        combo.addItem("");
        try {
            titulares = new TitularCuitService().getAllTitularDeCuitActivos();
        } catch (Exception ex) {
            Logger.getLogger(RenovarAbonoVencidoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (titulares != null && !titulares.isEmpty()) {
            for (TitularCuit t : titulares) {
                combo.addItem(t.getPersona().getApellidoNombre());
            }
            combo.addFocusListener(null);
            combo.showPopup();
            combo.requestFocus();
        }
    }

    private void vaciarCombo() {
        titulares = null;
        combo.removeAllItems();
        combo.addItem("");
    }

    private void volver() {
        RenovarAbonosVencidosFrame mf = new RenovarAbonosVencidosFrame();
        mf.setVisible(true);
        this.dispose();
    }

    private void llenarTabla(int row) {
        UtilFrame.limpiarTabla(tabla);
        if (row > 0) {
            DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
            TitularCuit ti = titulares.get(row - 1);
            Persona pe = ti.getPersona();
            Double limPe = ti.getLimiteFacturar();
            Double tfc = UtilFrame.totalFacturado12(pe);
            Double timp = Double.valueOf(nuevoImporteTxt.getText().replace(",", "."));
            Double dif = tfc - limPe;
            Double saldoTitular = dif + timp;
            Object o1[] = new Object[4];
            o1[0] = ti.getPersona().getApellidoNombre();
            o1[1] = df.format(dif);
            o1[2] = nuevoImporteTxt.getText();
            o1[3] = df.format(saldoTitular);
            tbl.addRow(o1);
            tabla.setModel(tbl);
        }
    }

    private void grabar() {
        if (validar()) {
            int xz;
            try {
                xz = new AbonoService().getCodigoSiguiente();
            } catch (Exception ex) {
                Logger.getLogger(RenovarAbonoVencidoFrame.class.getName()).log(Level.SEVERE, null, ex);
                return;
            }
            Abono abonoNuevo = new Abono();
            int row = combo.getSelectedIndex();
            Date fecha;
            Date fecha_periodo_dde;
            Date fecha_periodo_hta;
            Date fecha_vencim;
            try {
                fecha = sdf.parse(fechaTxt.getText());
                fecha_periodo_dde = sdf.parse(deTxt.getText());
                fecha_periodo_hta = sdf.parse(alTxt.getText());
                fecha_vencim = sdf.parse(vtoTxt.getText());
            } catch (ParseException ex) {
                Logger.getLogger(FacturarAbonosFrame.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "ERROR EN FECHA");
                fechaTxt.requestFocus();
                return;
            }
            TitularCuit titular;
            if (nuevoTitularChk.isSelected()) {
                titular = titulares.get(row - 1);
            } else {
                titular = tc;
            }
            Integer tipoComprobante = 11;
            if(titular.getTipoInscipcion().equals(6)){
                tipoComprobante = 11;
            }
            if(titular.getTipoInscipcion().equals(1)){
                Consorcio cons = abono.getConsorcio();
                Integer inscrCons = cons.getTipoInscripcion();
                if(inscrCons.equals(1)){
                    tipoComprobante = 1;
                }
                if(inscrCons.equals(6)){
                    tipoComprobante = 1;
                }
                if(inscrCons.equals(4)){
                    tipoComprobante = 6;
                }
                if(inscrCons.equals(5)){
                    tipoComprobante = 6;
                }
            }
            Rubro rubro = abono.getRubro();
            int x_comprobante;
            ComprobanteNumerosIniciales cni;
            try {
                cni = new ComprobanteNumerosInicialesService().getNumeroInicialByTitular(titular);
                if (cni == null) {
                    cni = new ComprobanteNumerosIniciales();
                    cni.setTitular(titular);
                    cni.setNroCpbte(1);
//                    x_comprobante = 1;
                    cni = new ComprobanteNumerosInicialesService().saveImporte(cni);
                }
            } catch (Exception ex) {
                Logger.getLogger(FacturarAbonosFrame.class.getName()).log(Level.SEVERE, null, ex);
                return;
            }
            x_comprobante = cni.getNroCpbte() + 1;

            //for (Abono ab : abonos) {
            Consorcio consorcio = abono.getConsorcio();
            Integer cta_facturada = 0;
//            if (cta_facturada == null) {
//                cta_facturada = 0;
//            }
//            cta_facturada += 1;
            Double saldo_cliente;
            if (consorcio.getSaldo() != null) {
                saldo_cliente = consorcio.getSaldo();
            } else {
                saldo_cliente = 0.0;
            }
            Domicilio dm_cliente = abono.getConsorcio().getDomicilio();
            String calle_cliente = dm_cliente.getCalle()
                    + " " + dm_cliente.getNumero()
                    + " " + dm_cliente.getPisoDto();
            String cp_cliente = dm_cliente.getCodigoPostal()
                    + " " + dm_cliente.getLocalidad();
            String prov_cliente = dm_cliente.getProvincia();
            Domicilio dm_titular = titular.getDomicilio();
            String calle_titular = dm_titular.getCalle()
                    + " " + dm_titular.getNumero();
            String cp_titular = dm_titular.getCodigoPostal()
                    + " " + dm_titular.getLocalidad();
            String prov_titular = dm_titular.getProvincia();
            Integer tipoFact = abono.getTipoFacturacion();
            Double importe_abono = Double.valueOf(nuevoImporteTxt.getText().replace(",", "."));
            System.out.println(saldo_cliente);
            System.out.println(importe_abono);
            saldo_cliente += importe_abono;
//            Long n_cae = 1L;
//            if (tipoFact.equals(1)) { // 1 Factura varios Recibos
//
//            }
            if (tipoFact.equals(2)) { // 1 Factura por Mes
                int ps = 3; // 3 es producto y servicio
                abonoNuevo.setPendiente(false);
                abonoNuevo.setActivo(true);
                abonoNuevo.setConsorcio(consorcio);
                abonoNuevo.setCuotaFacturada(cta_facturada);
                abonoNuevo.setCuotas(abono.getCuotas());
                abonoNuevo.setFechaInicio(abono.getFechaInicio());
                abonoNuevo.setFechaPeriodo(fecha);
                abonoNuevo.setFrecuencia(abono.getFrecuencia());
                abonoNuevo.setImporte(importe_abono * abono.getCuotas());
                abonoNuevo.setPendiente(false);
                abonoNuevo.setRenovado(true);
                abonoNuevo.setRubro(rubro);
                abonoNuevo.setTextoPeriodo(0);
                abonoNuevo.setTipoFacturacion(abono.getTipoFacturacion());
                abonoNuevo.setCodigo(xz);
                List<RenglonAbono> ra2 = null;
                try {
                    ra2 = new RenglonAbonoService().getRenglonAbonosByAbono(abono);
                } catch (Exception ex) {
                    Logger.getLogger(RenovarAbonoVencidoFrame.class.getName()).log(Level.SEVERE, null, ex);
                    return;
                }
                int lin = 0;
                List<RenglonAbono> ra = new ArrayList();
                for (RenglonAbono rab : ra2) {
                    RenglonAbono reAb = new RenglonAbono();
                    reAb.setAbono(abonoNuevo);
                    if (rab.getImporte().equals(0.0)) {
                        reAb.setImporte(0.0);
                    } else {
                        reAb.setImporte(importe_abono);
                    }

                    reAb.setOrden(lin);
                    lin += 1;
                    reAb.setTexto(rab.getTexto());
                    ra.add(reAb);
                }

                abono.setActivo(false);
                abono.setRenovado(true);
                try {
                    new AbonoService().updateAbono(abono);
                } catch (Exception ex) {
                    Logger.getLogger(RenovarAbonoVencidoFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                try {
                    new AbonoService().saveAbono(abonoNuevo);
                    for (RenglonAbono raf : ra) {
                        raf.setAbono(abonoNuevo);
                        raf = new RenglonAbonoService().saveRenglonAbono(raf);
                    }
                } catch (Exception ex) {
                    Logger.getLogger(RenovarAbonoVencidoFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
//                try {
//                    ra = new RenglonAbonoService().getRenglonAbonosByAbono(abonoNuevo);
//                } catch (Exception ex) {
//                    Logger.getLogger(RenovarAbonoVencidoFrame.class.getName()).log(Level.SEVERE, null, ex);
//                }
                String resultado = UtilFactura.saveFactura(consorcio, titular,
                        abonoNuevo, ra, fecha, fecha_periodo_dde, fecha_periodo_hta, fecha_vencim, ps);
                System.out.println(resultado);
            }

            if (tipoFact.equals(3)) { // 1 Recibo por Mes
                cni.setNroCpbte(x_comprobante);
                Comprobante com = new Comprobante();
                com.setCae(1L);
                com.setCalleNroPisoDtoCliente(calle_cliente);
                com.setCantidadCuotas(abonoNuevo.getCuotas());
                com.setCodigoComprobante(5);
                com.setCodigoPostalAndLocalidadCliente(cp_cliente);
                com.setCodigoPostalAndLocalidadTitular(cp_titular);
                com.setCuitCliente(consorcio.getCuit());
                com.setCuitTitular(titular.getCuit());
                com.setCuotasPagadas(cta_facturada);
                com.setDomicilioTitular(calle_titular);
                com.setFecha(fecha);
                com.setFechaInicioActividades(titular.getFechaInicioActividades());
                com.setFechaPeriodoDesde(fecha_periodo_dde);
                com.setFechaPeriodoHasta(fecha_periodo_hta);
                com.setFechaVencimientoCae(fecha);
                com.setFechaVencimientoPago(fecha_vencim);
                com.setGravado(importe_abono);
                com.setIibb(titular.getIibb());
                com.setIva(0.0);
                com.setLetra("X");
                com.setLetraComprobanteAsociado("");
                com.setNumero(x_comprobante);
                com.setNumeroComprobanteAsociado(0);
                com.setPagado(0.0);
                String textoP;
                if (abono.getTextoPeriodo().equals(0)) {
                    textoP = UtilFrame.mesAnteriorEnLetras(new Date());
                } else {
                    textoP = UtilFrame.mesActualEnLetras(new Date());
                }
                com.setPeriodo(textoP);

                com.setPdfGenerado(false);
                com.setProvinciaCliente(prov_cliente);
                com.setProvinciaTitular(prov_titular);
                com.setRazonSocialCliente(consorcio.getNombre());
                com.setRazonSocialTitular(titular.getPersona().getApellidoNombre());
                com.setRubro(rubro);
                com.setSucursal(titular.getSucursal());
                com.setSucursalComprobanteAsociado(0);
                com.setTexto1("");
                com.setTexto2("");

                com.setTipoComprobanteAsociado(0);
                com.setTipoDocumento(consorcio.getDocumentoTipo());
                com.setTipoEmision(tipoFact);
                com.setTipoInscripcion(consorcio.getTipoInscripcion().toString());
                com.setTotal(importe_abono);
                List<RenglonAbono> renglones = null;
                try {
                    renglones = new RenglonAbonoService().getRenglonAbonosByAbono(abono);
                } catch (Exception ex) {
                    Logger.getLogger(FacturarAbonosFrame.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, "ERROR EN ABONO");
                    return;
                }
                List<ComprobanteRenglones> renglonesComprob = new ArrayList<>();
                for (RenglonAbono ra : renglones) {
                    ComprobanteRenglones cr = new ComprobanteRenglones();
                    cr.setComprobante(com);
                    cr.setDetalle(ra.getTexto());
                    cr.setImporte(cr.getImporte());
                    renglonesComprob.add(cr);
                }
                AbonoFactura af = new AbonoFactura();
                af.setActivo(true);
                CuentaCorrienteCliente cccli = new CuentaCorrienteCliente();
                cccli.setComprobante(com);
                cccli.setConsorcio(consorcio);
                cccli.setDebe(importe_abono);
                cccli.setFecha(fecha);
                cccli.setHaber(0.0);
                cccli.setRecibo(null);
                cccli.setSaldo(saldo_cliente);
                cccli.setTipoComprobante(tipoFact);
                consorcio.setSaldo(saldo_cliente);
                abono.setPendiente(false);
                abono.setCuotaFacturada(cta_facturada);
                try {
                    new ComprobanteNumerosInicialesService().updateImporte(cni);
                    com = new ComprobanteService().saveComprobante(com);
                    for (ComprobanteRenglones co_re : renglonesComprob) {
                        co_re.setComprobante(com);
                        new ComprobanteRenglonesService().saveRenglon(co_re);
                    }
                    cccli.setComprobante(com);
                    new CuentaCorrienteClienteService().saveCuentaCorrienteCliente(cccli);
                    new ConsorcioService().updateConsorcio(consorcio);
                    new AbonoService().updateAbono(abono);
                    af.setAbono(abono);
                    af.setComprobante(com);
                    new AbonoFacturaService().saveAbonoFactura(af);
//                        UtilAbonos.grabarComprobante(nuevoCae, consorcio, titular, fecha, ab);
                } catch (Exception ex) {
                    Logger.getLogger(FacturarAbonosFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
//            if (tipoFact.equals(4)) { // Factura Unica reparacion
//
//            }
//            if (tipoFact.equals(5)) { // Recibo Unico Reparacion
//
//            }

            JOptionPane.showMessageDialog(this, "FACTURACION COMPLETADA");
            volver();

        }
    }

    private boolean validar() {
        if (nuevoTitularChk.isSelected()) {
            int rowT = combo.getSelectedIndex();
            if (rowT < 1) {
                JOptionPane.showMessageDialog(this, "DEBE SELECCIONAR NUEVO TITULAR\nO DESTILDAR PARA MANTENER EL MISMO");
                return false;
            }
        }
        if (nuevoImporteTxt.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "DEBE INGRESAR UN IMPORTE VALIDO");
            return false;
        }
        return true;
    }
}
