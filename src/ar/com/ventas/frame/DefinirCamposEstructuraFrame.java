/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.ventas.frame;

import ar.com.ventas.entities.Estructura;
import ar.com.ventas.entities.EstructuraServicio;
import ar.com.ventas.estructuras.CampoEstructura;
import ar.com.ventas.estructuras.Constantes;
import ar.com.ventas.main.MainFrame;
import ar.com.ventas.services.EstructuraService;
import ar.com.ventas.services.EstructuraServicioService;
import ar.com.ventas.util.UtilFrame;
import java.awt.Rectangle;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Mario
 */
public class DefinirCamposEstructuraFrame extends javax.swing.JFrame {

    private List<Estructura> estructuras;
    private Estructura estructura;
    private List<CampoEstructura> campos = new ArrayList<>();
    private List<EstructuraServicio> camposEstructura;
    private Integer ultimo;

    /**
     * Creates new form DefinirCamposEstructuraFrame
     */
    public DefinirCamposEstructuraFrame() {
        initComponents();
        getContentPane().setBackground(new java.awt.Color(Constantes.getR(), Constantes.getG(), Constantes.getB()));
        this.setLocationRelativeTo(null);
//        setExtendedState(this.MAXIMIZED_BOTH);
        llenarCombo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        volverBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        agregarBtn = new javax.swing.JButton();
        modificarBtn = new javax.swing.JButton();
        eliminarBtn = new javax.swing.JButton();
        comboE = new javax.swing.JComboBox<>();
        subirBtn = new javax.swing.JButton();
        bajarBtn = new javax.swing.JButton();
        visibilidadBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("DEFINIR CAMPOS DE LA ESTRUCTURA DE SERVICIOS");

        volverBtn.setText("Volver");
        volverBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverBtnActionPerformed(evt);
            }
        });

        jLabel1.setText("Estructura:");

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tipo de Campo", "Detalle", "Orden", "Visible"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabla);
        if (tabla.getColumnModel().getColumnCount() > 0) {
            tabla.getColumnModel().getColumn(0).setPreferredWidth(100);
            tabla.getColumnModel().getColumn(1).setPreferredWidth(100);
            tabla.getColumnModel().getColumn(2).setPreferredWidth(10);
        }

        agregarBtn.setText("Agregar");
        agregarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarBtnActionPerformed(evt);
            }
        });

        modificarBtn.setText("Modificar");
        modificarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modificarBtnActionPerformed(evt);
            }
        });

        eliminarBtn.setText("Eliminar");
        eliminarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarBtnActionPerformed(evt);
            }
        });

        comboE.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboEActionPerformed(evt);
            }
        });

        subirBtn.setText("Subir");
        subirBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subirBtnActionPerformed(evt);
            }
        });

        bajarBtn.setText("Bajar");
        bajarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bajarBtnActionPerformed(evt);
            }
        });

        visibilidadBtn.setText("Visibilidad");
        visibilidadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                visibilidadBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(volverBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(comboE, javax.swing.GroupLayout.PREFERRED_SIZE, 573, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(agregarBtn)
                                .addGap(18, 18, 18)
                                .addComponent(modificarBtn)
                                .addGap(18, 18, 18)
                                .addComponent(eliminarBtn)
                                .addGap(18, 18, 18)
                                .addComponent(subirBtn)
                                .addGap(18, 18, 18)
                                .addComponent(bajarBtn)
                                .addGap(18, 18, 18)
                                .addComponent(visibilidadBtn))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 687, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 186, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(comboE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(agregarBtn)
                    .addComponent(modificarBtn)
                    .addComponent(eliminarBtn)
                    .addComponent(subirBtn)
                    .addComponent(bajarBtn)
                    .addComponent(visibilidadBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addComponent(volverBtn)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void comboEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboEActionPerformed
        int row = comboE.getSelectedIndex();
        if (row > 0) {
            estructura = estructuras.get(row - 1);
            llenarTabla(estructura);
        }
    }//GEN-LAST:event_comboEActionPerformed

    private void agregarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarBtnActionPerformed
        agregar();
    }//GEN-LAST:event_agregarBtnActionPerformed

    private void modificarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modificarBtnActionPerformed
        modificar();
    }//GEN-LAST:event_modificarBtnActionPerformed

    private void eliminarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarBtnActionPerformed
        eliminar();
    }//GEN-LAST:event_eliminarBtnActionPerformed

    private void volverBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverBtnActionPerformed
        volver();
    }//GEN-LAST:event_volverBtnActionPerformed

    private void subirBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subirBtnActionPerformed
        int row = tabla.getSelectedRow();
        if (row < 1) {
            JOptionPane.showMessageDialog(this, "NO PERMITIDO SUBIR");
            return;
        }
        subir(row);
    }//GEN-LAST:event_subirBtnActionPerformed

    private void bajarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bajarBtnActionPerformed
        int row = tabla.getSelectedRow();
        if (row == ultimo) {
            JOptionPane.showMessageDialog(this, "NO PERMITIDO BAJAR");
            return;
        }
        bajar(row);
    }//GEN-LAST:event_bajarBtnActionPerformed

    private void visibilidadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_visibilidadBtnActionPerformed
        int row = tabla.getSelectedRow();
        if(row < 0){
            JOptionPane.showMessageDialog(this, "SELECCIONE PARA CAMBIAR VISIBILIDAD");
            return;
        }
        EstructuraServicio ce = camposEstructura.get(row);
        if(ce.getVisible() != null){
            if(ce.getVisible()){
                ce.setVisible(false);
            }else{
                ce.setVisible(true);
            }
        }else{
            ce.setVisible(false);
        }
        try {
            ce = new EstructuraServicioService().updateEstructuraServicio(ce);
        } catch (Exception ex) {
            Logger.getLogger(DefinirCamposEstructuraFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        llenarTabla(estructura);
    }//GEN-LAST:event_visibilidadBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DefinirCamposEstructuraFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DefinirCamposEstructuraFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DefinirCamposEstructuraFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DefinirCamposEstructuraFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DefinirCamposEstructuraFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton agregarBtn;
    private javax.swing.JButton bajarBtn;
    private javax.swing.JComboBox<String> comboE;
    private javax.swing.JButton eliminarBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton modificarBtn;
    private javax.swing.JButton subirBtn;
    private javax.swing.JTable tabla;
    private javax.swing.JButton visibilidadBtn;
    private javax.swing.JButton volverBtn;
    // End of variables declaration//GEN-END:variables

    private void llenarCombo() {
        comboE.removeAllItems();
        comboE.addItem("");
        estructuras = null;
        try {
            estructuras = new EstructuraService().getAllEstructurasActivas();
        } catch (Exception ex) {
            Logger.getLogger(DefinirCamposEstructuraFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (estructuras != null && !estructuras.isEmpty()) {
            for (Estructura estructura : estructuras) {
                comboE.addItem(estructura.getNombre());
            }
        }
        for (CampoEstructura ce : CampoEstructura.values()) {
            campos.add(ce);
        }
    }

    private void llenarTabla(Estructura estructura) {
        UtilFrame.limpiarTabla(tabla);
        camposEstructura = null;
        try {
            camposEstructura = new EstructuraServicioService().getAllEstructuraServicioByEstructuraActivos(estructura);
        } catch (Exception ex) {
            Logger.getLogger(DefinirCamposEstructuraFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (camposEstructura != null && !camposEstructura.isEmpty()) {
            DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();

            for (EstructuraServicio est : camposEstructura) {
                Object o[] = new Object[4];
                o[0] = campos.get(est.getCampoEstructura() - 1).getCampo();
                o[1] = est.getContenido();
                o[2] = est.getOrden();
                if(est.getVisible() != null){
                    if(est.getVisible()){
                        o[3] = "VISIBLE";
                    } else{
                        o[3] = "NO";
                    }
                } else {
                    o[3] = "VISIBLE";
                }
                
                ultimo = est.getOrden();

                tbl.addRow(o);
            }
            tabla.setModel(tbl);
        }
    }

    private void agregar() {
        int row = comboE.getSelectedIndex();
        if (row > 0) {
            Estructura estructura = estructuras.get(row - 1);
            AgregarCamposToEstructuraFrame actef = new AgregarCamposToEstructuraFrame(estructura, ultimo);
            actef.setVisible(true);
            this.dispose();
        }
    }

    private void modificar() {
        int rowT = tabla.getSelectedRow();
        int rowC = comboE.getSelectedIndex();
        if (rowC > 0) {
            if (!(rowT < 0)) {
                Estructura estructura = estructuras.get(rowC - 1);
                CampoEstructura ce = campos.get(rowT);
                EstructuraServicio es = camposEstructura.get(rowT);
                ModificarCamposDeEstructuraFrame mcef = new ModificarCamposDeEstructuraFrame(estructura, ce, es);
                mcef.setVisible(true);
                this.dispose();
            }
        }
    }

    private void eliminar() {
        int rowT = tabla.getSelectedRow();
        int rowC = comboE.getSelectedIndex();
        if (rowC > 0) {
            if (!(rowT < 0)) {
                EstructuraServicio es = camposEstructura.get(rowT);
                int a = JOptionPane.showConfirmDialog(this, "CONFIRME ELIMINAR\n" + es.getContenido(), "Atención", JOptionPane.YES_NO_OPTION);
                if (a == 0) {
                    try {
                        new EstructuraServicioService().deleteEstructuraServicio(es);
                        JOptionPane.showMessageDialog(this, "CAMPO ELIMINADO CORRECTAMENTE");
                    } catch (Exception ex) {
                        Logger.getLogger(DefinirCamposEstructuraFrame.class.getName()).log(Level.SEVERE, null, ex);
                        JOptionPane.showMessageDialog(this, "ERROR ELIMINADO CAMPO");
                        return;
                    }

                    Estructura estructura = estructuras.get(rowC - 1);
                    camposEstructura.remove(rowT);
                    renumerar();
                    llenarTabla(estructura);
                }
            }
        }
    }

    private void volver() {
        MainFrame mf = new MainFrame();
        mf.setVisible(true);
        this.dispose();
    }

    private void renumerar() {
        int r = 0;
        for (EstructuraServicio es : camposEstructura) {
            es.setOrden(r);
            try {
                new EstructuraServicioService().updateEstructuraServicio(es);
            } catch (Exception ex) {
                Logger.getLogger(DefinirCamposEstructuraFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            r += 1;
        }
    }

    private void subir(int row) {
        int orden = row - 1;
        camposEstructura.get(row).setOrden(orden);
        camposEstructura.get(orden).setOrden(row);
        try {
            new EstructuraServicioService().updateEstructuraServicio(camposEstructura.get(row));
            new EstructuraServicioService().updateEstructuraServicio(camposEstructura.get(orden));
        } catch (Exception ex) {
            Logger.getLogger(DefinirCamposEstructuraFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        llenarTabla(estructura);

        Rectangle rect = tabla.getCellRect(ultimo, 0, true);
        tabla.scrollRectToVisible(rect);
        tabla.clearSelection();
        tabla.setRowSelectionInterval(orden, orden);
    }

    private void bajar(int row) {
        int orden = row + 1;
        camposEstructura.get(row).setOrden(orden);
        camposEstructura.get(orden).setOrden(row);
        try {
            new EstructuraServicioService().updateEstructuraServicio(camposEstructura.get(row));
            new EstructuraServicioService().updateEstructuraServicio(camposEstructura.get(orden));
        } catch (Exception ex) {
            Logger.getLogger(DefinirCamposEstructuraFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        llenarTabla(estructura);

        Rectangle rect = tabla.getCellRect(ultimo, 0, true);
        tabla.scrollRectToVisible(rect);
        tabla.clearSelection();
        tabla.setRowSelectionInterval(orden, orden);
    }
}
