/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.ventas.frame;

import ar.com.ventas.entities.Abono;
import ar.com.ventas.entities.Comprobante;
import ar.com.ventas.entities.CertificadosAfip;
import ar.com.ventas.entities.ComprobanteRenglones;
import ar.com.ventas.entities.Consorcio;
import ar.com.ventas.entities.CuentaCorrienteCliente;
import ar.com.ventas.entities.Domicilio;
import ar.com.ventas.entities.TicketTime;
import ar.com.ventas.entities.TitularCuit;
import ar.com.ventas.estructuras.Constantes;
import ar.com.ventas.main.MainFrame;
import ar.com.ventas.services.AbonoService;
import ar.com.ventas.services.CertificadosAfipService;
import ar.com.ventas.services.ComprobanteService;
import ar.com.ventas.services.ConsorcioService;
import ar.com.ventas.services.TicketTimeService;
import ar.com.ventas.services.TitularCuitService;
import ar.com.ventas.util.UtilAfip;
import ar.com.ventas.util.UtilFrame;
import com.jacob.activeX.ActiveXComponent;
import com.jacob.com.Dispatch;
import com.jacob.com.LibraryLoader;
import com.jacob.com.Variant;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Mario
 */
public class NotaCreditoFrame extends javax.swing.JFrame {

    private List<TitularCuit> titulares;
    private List<Comprobante> comprobantes;
    private TitularCuit titular = null;
    private Date de = new Date();
    private Date al = new Date();
    private DecimalFormat df = new DecimalFormat("#0.00");
    private SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");

    /**
     * Creates new form NotaCleditoFrame
     */
    public NotaCreditoFrame() {
        initComponents();
        getContentPane().setBackground(new java.awt.Color(Constantes.getR(), Constantes.getG(), Constantes.getB()));
        this.setLocationRelativeTo(null);
//        setExtendedState(6); // this.MAXIMIZED_BOTH
        llenarCombo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        generarBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        importeNcTxt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        numeroTxt = new javax.swing.JTextField();
        volverBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        combo = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        deTxt = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        alTxt = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        fechaNcTxt = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("GENERAR NOTA DE CREDITO DESDE FACTURAS");

        generarBtn.setText("GENERAR");
        generarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generarBtnActionPerformed(evt);
            }
        });

        jLabel1.setText("Importe:");

        importeNcTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        importeNcTxt.setText("IMPORTE");

        jLabel2.setText("Nro. FACT:");

        numeroTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        numeroTxt.setText("NUMERO");

        volverBtn.setText("VOLVER");
        volverBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverBtnActionPerformed(evt);
            }
        });

        jLabel3.setText("TITULAR CUIT:");

        combo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        combo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboActionPerformed(evt);
            }
        });

        jLabel4.setText("FECHA DESDE:");

        deTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        deTxt.setText("DE");
        deTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                deTxtKeyPressed(evt);
            }
        });

        jLabel5.setText("FECHA HASTA:");

        alTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        alTxt.setText("AL");
        alTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                alTxtKeyPressed(evt);
            }
        });

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "FECHA", "NUMERO", "CONSORCIO", "TOTAL"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabla);

        jLabel6.setText("FECHA NOTA DE CREDITO:");

        fechaNcTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        fechaNcTxt.setText("FECHA NC");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 871, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(generarBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(volverBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(combo, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(26, 26, 26)
                                .addComponent(deTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(alTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addGap(44, 44, 44)
                                        .addComponent(numeroTxt))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addGap(56, 56, 56)
                                        .addComponent(importeNcTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(100, 100, 100)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(fechaNcTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(combo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(deTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(alTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 343, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(importeNcTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(numeroTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(fechaNcTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(generarBtn)
                    .addComponent(volverBtn))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void generarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generarBtnActionPerformed
        int row = tabla.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(this, "SELECCIONE UN COMPROBANTE PARA REALIZAR LA NOTA DE CREDITO");
            return;
        }
        if (fechaNcTxt.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "INGRESE UNA FECHA PARA LA -NC-");
            return;
        }
        if(comprobantes.get(row).getCodigoComprobante().equals(13)){
            JOptionPane.showMessageDialog(this, "NO PUEDE GENERAR NC DE NC");
            return;
        }
        if(comprobantes.get(row).getCodigoComprobante().equals(3)){
            JOptionPane.showMessageDialog(this, "NO PUEDE GENERAR NC DE NC");
            return;
        }
        if(comprobantes.get(row).getCodigoComprobante().equals(8)){
            JOptionPane.showMessageDialog(this, "NO PUEDE GENERAR NC DE NC");
            return;
        }
        generar(row);
    }//GEN-LAST:event_generarBtnActionPerformed

    private void volverBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverBtnActionPerformed
        volver();
    }//GEN-LAST:event_volverBtnActionPerformed

    private void comboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboActionPerformed
        int row = combo.getSelectedIndex();
        if (row > 0) {
            titular = titulares.get(row - 1);
            deTxt.requestFocus();
        }
    }//GEN-LAST:event_comboActionPerformed

    private void deTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_deTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            String fe = deTxt.getText();
            int largo = fe.length();
            if (largo == 10) {
                alTxt.requestFocus();
            } else {
                if (largo > 10) {
                    JOptionPane.showMessageDialog(this, "ERROR EN LARGO DE FECHA");
                    return;
                }
            }
            fe = UtilFrame.fecha(fe);
            deTxt.setText(fe);
        }
    }//GEN-LAST:event_deTxtKeyPressed

    private void alTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_alTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            String fe = alTxt.getText();
            int largo = fe.length();
            if (largo == 10) {
                cargarComprobantes(titular);
            } else {
                if (largo > 10) {
                    JOptionPane.showMessageDialog(this, "ERROR EN LARGO DE FECHA");
                    return;
                }
            }
            fe = UtilFrame.fecha(fe);
            alTxt.setText(fe);
        }
    }//GEN-LAST:event_alTxtKeyPressed

    private void tablaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaMouseClicked
        int row = tabla.getSelectedRow();
        importeNcTxt.setText(df.format(comprobantes.get(row).getTotal()));
        numeroTxt.setText(comprobantes.get(row).getNumero().toString());
    }//GEN-LAST:event_tablaMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NotaCreditoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NotaCreditoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NotaCreditoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NotaCreditoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NotaCreditoFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField alTxt;
    private javax.swing.JComboBox<String> combo;
    private javax.swing.JTextField deTxt;
    private javax.swing.JTextField fechaNcTxt;
    private javax.swing.JButton generarBtn;
    private javax.swing.JTextField importeNcTxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField numeroTxt;
    private javax.swing.JTable tabla;
    private javax.swing.JButton volverBtn;
    // End of variables declaration//GEN-END:variables

    private void generar(int row) {
//        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
//        DecimalFormat df = new DecimalFormat("#0.00");
        Date fnc = new Date();
        try {
            fnc = sdf.parse(fechaNcTxt.getText());
        } catch (ParseException ex) {
            Logger.getLogger(NotaCreditoFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "ERROR EN FECHA NC");
            return;
        }
        Consorcio cli = null;
        Comprobante comprobante = comprobantes.get(row);
        Integer codigo = comprobante.getCodigoCliente();
        try {
            cli = new ConsorcioService().getConsorcioByCodigo(codigo);
        } catch (Exception ex) {
//            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        String cuit = comprobante.getCuitTitular();
        TitularCuit titular = null;
        try {
            titular = new TitularCuitService().getTitularActivoByCuit(cuit);
        } catch (Exception ex) {
            Logger.getLogger(NotaCreditoFrame.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        Integer ps = 3;
//        Date da1 = comprobante.getFecha();
        Date da2 = comprobante.getFechaPeriodoDesde();
        Date da3 = comprobante.getFechaPeriodoHasta();
//        try {
//            da2 = sdf.parse("01/04/2023");
//            da3 = sdf.parse("30/04/2023");
//        } catch (ParseException ex) {
////            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
//        }
        Date da4 = comprobante.getFechaVencimientoPago();
//        try {
//            da4 = sdf.parse("30/04/2023");
//        } catch (ParseException ex) {
//            Logger.getLogger(NotaCreditoFrame.class.getName()).log(Level.SEVERE, null, ex);
//            return;
//        }
//        TitularCuit tc = null;
//        try {
//            tc = new TitularCuitService().getTitularActivoByCuit("20-31791625-7");
//        } catch (Exception ex) {
////            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
//        }
//        Abono abono = null;
//        try {
//            abono = new AbonoService().getAbonoById(160L);
//        } catch (Exception ex) {
////            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
//        }

//        Consorcio cli = cliente;
        String td_f = "11";
        String pv = titular.getSucursal().toString();
        Long id_tc = titular.getId();
        String cuiCli = cli.getCuit();
        String cuiTit = titular.getCuit();
        String nro_doc_cliente = cuiCli.substring(0, 2) + cuiCli.substring(3, 11) + cuiCli.substring(12, 13);
        String nro_doc_titular = cuiTit.substring(0, 2) + cuiTit.substring(3, 11) + cuiTit.substring(12, 13);

        CertificadosAfip ca = null;
        try {
            ca = new CertificadosAfipService().getCertificadoByTitular(titular);
        } catch (Exception ex) {
//            Logger.getLogger(NotaCreditoFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "ERROR LEYENDO CERTIFICADOS");
            return;
        }
        String crt = ca.getCertificado();
        String key = ca.getLlave();

        try {
            LibraryLoader.loadJacobLibrary();
            ActiveXComponent wsaa = new ActiveXComponent("WSAA");
            System.out.println(Dispatch.get(wsaa, "InstallDir").toString()
                    + " "
                    + Dispatch.get(wsaa, "Version").toString()
            );
            Calendar cal = Calendar.getInstance();
            Date fecha = cal.getTime();
            int hora = cal.get(Calendar.HOUR_OF_DAY);
            int minutos = cal.get(Calendar.MINUTE);
            String vencCae = "";
//            int segundos = cal.get(Calendar.SECOND);
            TicketTime tkt = null;
            tkt = new TicketTimeService().getTicketById(id_tc);
            if (tkt == null) {
                tkt = solicitarNuevoTicket(crt, key, id_tc);
            }
            if (fecha != tkt.getFecha()) {
                tkt = solicitarNuevoTicket(crt, key, id_tc);
            } else if (hora != tkt.getHora()) {
                if (hora == tkt.getHora() + 1) {
                    if (minutos > tkt.getMinuto()) {
                        tkt = solicitarNuevoTicket(crt, key, id_tc);
                    } else {
                        int xMinuto = 60 - tkt.getMinuto();
                        if ((xMinuto + minutos) > 30) {
                            tkt = solicitarNuevoTicket(crt, key, id_tc);
                        }
                    }
                } else {
                    tkt = solicitarNuevoTicket(crt, key, id_tc);
                }
            } else if (minutos - tkt.getMinuto() > 30) {
                tkt = solicitarNuevoTicket(crt, key, id_tc);
            }
//            try {
//                tkt = new TicketTimeService().getTicketById(id_tc);
//            } catch (Exception ex) {
////            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
//            }
            String token = tkt.getToken();
            String sign = tkt.getSign();
            ActiveXComponent wsfev1 = new ActiveXComponent("WSFEv1");
            Dispatch.put(wsfev1, "Cuit", new Variant(nro_doc_titular));
            Dispatch.put(wsfev1, "Token", new Variant(token));
            Dispatch.put(wsfev1, "Sign", new Variant(sign));
            String cache = "";
            String wsdl = "https://wsaa.afip.gov.ar/ws/services/LoginCms";
            wsdl = "https://servicios1.afip.gov.ar/wsfev1/service.asmx?WSDL";
            Dispatch.call(wsfev1, "Conectar",
                    new Variant(cache),
                    new Variant(wsdl)
            );
            String tipo_cbte = "13";
            String tipoComprob = tipo_cbte;
            String pto_vta = pv; // Sucursal declarada WS
//            sucursalFacturaPapel = "0006";
            Variant ult = Dispatch.call(wsfev1, "CompUltimoAutorizado",
                    new Variant(tipo_cbte),
                    new Variant(pto_vta));
            String excepcion = Dispatch.get(wsfev1, "Excepcion").toString();
            System.out.println(wsfev1);
            System.out.println(ult);
//            System.exit(0);

//            //JOptionPane.showMessageDialog(this, "Ult.Comprb." + ult.toString());
//            System.out.println("Ult.Comprb." + ult.toString());
            Integer comprobanteNumero = Integer.parseInt(ult.toString());
//            JOptionPane.showMessageDialog(this, "VERSION");
//                                if (numf != comprobanteNumero) {
//                                    JOptionPane.showMessageDialog(this, "No coinciden los numeros");
//                                    return;
//                                }
//            numf += 1;
            comprobanteNumero += 1;
            String fechaWs = new SimpleDateFormat("yyyyMMdd").format(fnc);
            String concepto = comprobante.getProductoServicio().toString();// producto y servicio
//            String cui = "00-00000000-0";
//            String cuit1 = cui.substring(0, 2) + cui.substring(3, 11) + cui.substring(12, 13);
            String tipoD = cli.getDocumentoTipo();
            String tipo_doc = tipoD, nro_doc = nro_doc_cliente; //tipo y numero
            int cbte_nro = Integer.parseInt(comprobanteNumero.toString()),
                    cbt_desde = cbte_nro,
                    cbt_hasta = cbte_nro;
            String numeroFacturaPapel = String.valueOf(cbte_nro);
//            int largo = ("00000000" + numeroFacturaPapel).length();
//            numeroFacturaPapel = ("00000000" + numeroFacturaPapel).substring(largo - 8, largo);
//            //Double importeAbono = cli.getAbono().getImporte();
            Double importeAbono = Double.valueOf(importeNcTxt.getText().replace(",", "."));
            String imp_total = df.format(importeAbono).toString().replaceAll("\\,", "\\.");//"124.00";
            String imp_tot_conc = "0";
            String imp_neto = df.format(importeAbono).toString().replaceAll("\\,", "\\.");
            String imp_iva = "0";
//            //int internos = 0;
            String imp_trib = "0", imp_op_ex = "0";
            String fecha_cbte = fechaWs, fecha_venc_pago = fechaWs; //new SimpleDateFormat("yyyyMMdd").format(da4);
            String fecha_serv_desde = new SimpleDateFormat("yyyyMMdd").format(da2), fecha_serv_hasta = new SimpleDateFormat("yyyyMMdd").format(da3);
            String moneda_id = "PES", moneda_ctz = "1.000";
            Variant ok = Dispatch.call(wsfev1, "CrearFactura",
                    new Variant(concepto), new Variant(tipo_doc),
                    new Variant(nro_doc), new Variant(tipo_cbte),
                    new Variant(pto_vta),
                    new Variant(cbt_desde), new Variant(cbt_hasta),
                    new Variant(imp_total), new Variant(imp_tot_conc),
                    new Variant(imp_neto), new Variant(imp_iva),
                    new Variant(imp_trib), new Variant(imp_op_ex),
                    new Variant(fecha_cbte), new Variant(fecha_venc_pago),
                    new Variant(fecha_serv_desde), new Variant(fecha_serv_hasta),
                    new Variant(moneda_id), new Variant(moneda_ctz));

//                 Agrego los comprobantes asociados: 
//                            if (false) { // solo nc/nd 
            Variant cbte_asoc_tipo = new Variant(td_f),
                    cbte_asoc_pto_vta = new Variant(pv),
                    cbte_asoc_nro = new Variant(numeroTxt.getText());
            Dispatch.call(wsfev1, "AgregarCmpAsoc",
                    cbte_asoc_tipo, cbte_asoc_pto_vta, cbte_asoc_nro);
            Dispatch.put(wsfev1, "Reprocesar", new Variant(false));
            Variant cae = Dispatch.call(wsfev1, "CAESolicitar");
            String requ = Dispatch.get(wsfev1, "XmlRequest").toString();
            String resp = Dispatch.get(wsfev1, "XmlResponse").toString();
            excepcion = Dispatch.get(wsfev1, "Excepcion").toString();
            String errmsg = Dispatch.get(wsfev1, "ErrMsg").toString();
            String obs = Dispatch.get(wsfev1, "Obs").toString();
            String vto = Dispatch.get(wsfev1, "Vencimiento").toString();
            String resultado = Dispatch.get(wsfev1, "Resultado").toString();
            if (!resultado.equals("A")) {
                JOptionPane.showMessageDialog(this, "Obs: " + obs + "\nError: " + errmsg);
                return;
            }
            if (vto != "" && vto != null) {
                vencCae = vto.substring(6, 8) + "/" + vto.substring(4, 6) + "/" + vto.substring(0, 4);
            }
            String numCae = cae.toString();
            String ruta1 = "c:/alfa_sistema/cmp/" + tipoComprob
                    + "C_3_"
                    + numeroFacturaPapel + ".xm1";
            String ruta2 = "c:/alfa_sistema/cmp/" + tipoComprob
                    + "C_3_"
                    + numeroFacturaPapel + ".xm2";
            File archivo1 = new File(ruta1);
            File archivo2 = new File(ruta2);
            BufferedWriter bw1, bw2;
            bw1 = new BufferedWriter(new FileWriter(archivo1));
            bw2 = new BufferedWriter(new FileWriter(archivo2));
            bw1.write(requ);
            bw2.write(resp);
            bw1.close();
            bw2.close();
            Comprobante co2 = new Comprobante();
            ComprobanteRenglones cr = new ComprobanteRenglones();
            Domicilio dm = cli.getDomicilio();
            Domicilio dmT = titular.getDomicilio();
            String calle = dm.getCalle() + " " + dm.getNumero();
            String calleT = dmT.getCalle() + " " + dmT.getNumero();
            List<ComprobanteRenglones> ivr = new ArrayList<>();
            cr.setDetalle("NC servicio de Fecha " + sdf.format(comprobante.getFecha())
                    + " Numero: " + comprobante.getNumero().toString());
            cr.setImporte(importeAbono);
            Date v_cae = sdf.parse(vencCae);
            co2.setCae(Long.valueOf(numCae));
            co2.setCalleNroPisoDtoCliente(calle);
            co2.setCantidadCuotas(1);
            co2.setCodigoCliente(codigo);
            co2.setCodigoComprobante(13);
            co2.setCodigoPostalAndLocalidadCliente(dm.getCodigoPostal() + " " + dm.getLocalidad());
            co2.setCodigoPostalAndLocalidadTitular(dmT.getCodigoPostal() + " " + dmT.getLocalidad());
            co2.setCuitCliente(cuiCli);
            co2.setCuitTitular(cuiTit);
            co2.setCuotasPagadas(1);
            co2.setDomicilioTitular(calleT);
            co2.setFecha(fnc);
            co2.setFechaInicioActividades(titular.getFechaInicioActividades());
            co2.setFechaPeriodoDesde(da2);
            co2.setFechaPeriodoHasta(da3);
            co2.setFechaVencimientoCae(v_cae);
            co2.setFechaVencimientoPago(da4);
            co2.setFondo(null);
            co2.setGravado(comprobante.getTotal());
            co2.setId_administrador(comprobante.getId_administrador());
            co2.setId_original(0L);
            co2.setIibb(comprobante.getIibb());
            co2.setIva(0.0);
            co2.setLetra(comprobante.getLetra());
            co2.setLetraComprobanteAsociado(comprobante.getLetra());
            co2.setNumero(cbte_nro);
            co2.setNumeroComprobanteAsociado(comprobante.getNumero());
            co2.setOriginal(true);
            co2.setPagado(comprobante.getTotal());
            co2.setPdfGenerado(false);
            co2.setPeriodo("");
            co2.setPeriodoHabilitado(false);
            co2.setProductoServicio(comprobante.getProductoServicio());
            co2.setProvinciaCliente(comprobante.getProvinciaCliente());
            co2.setProvinciaTitular(comprobante.getProvinciaTitular());
            co2.setRazonSocialCliente(comprobante.getRazonSocialCliente());
            co2.setRazonSocialTitular(comprobante.getRazonSocialTitular());
            co2.setRubro(comprobante.getRubro());
            co2.setSucursal(comprobante.getSucursal());
            co2.setSucursalComprobanteAsociado(comprobante.getSucursal());
            co2.setTexto1("");
            co2.setTexto2("");
            co2.setTipoDocumento(comprobante.getTipoDocumento());
            co2.setTipoComprobanteAsociado(11);
            co2.setTipoEmision(2);
            co2.setTipoInscripcion(comprobante.getTipoInscripcion());
            co2.setTotal(comprobante.getTotal());
            ivr.add(cr);
            CuentaCorrienteCliente ccc = new CuentaCorrienteCliente();
            ccc.setFecha(fnc);
            ccc.setComprobante(co2);
            ccc.setConsorcio(cli);
            ccc.setDebe(0.00);
            ccc.setHaber(comprobante.getTotal());
            ccc.setTipoComprobante(13);

            BigDecimal bd_saldoCliente = new BigDecimal(df.format(cli.getSaldo()).replace(",", "."));
            BigDecimal bd_totalNc = new BigDecimal(df.format(importeAbono).replace(",", "."));
            BigDecimal bd_nuevoSaldo = bd_saldoCliente.subtract(bd_totalNc);
            ccc.setSaldo(bd_nuevoSaldo.doubleValue());
            cli.setSaldo(bd_nuevoSaldo.doubleValue());
            new ComprobanteService().saveComprobanteAndCtaCteAndConso3(co2,
                    ivr, cli, ccc);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e);
            e.printStackTrace();
            return;
        }
        JOptionPane.showMessageDialog(this, "NOTA CREDITO GENERADA");
        volver();
    }

//    public static TicketTime solicitarNuevoTicket(TitularCuit titular, String certif, String llave) {
//        TicketTime tkt = null;
//        Date fecha = new Date();
//        try {
//            tkt = new TicketTimeService().getTicketByTitular(titular);
//        } catch (Exception ex) {
//            Logger.getLogger(UtilAfip.class.getName()).log(Level.SEVERE, null, ex);
//        }
//        if (tkt == null) {
//            tkt = generarTicket(certif, llave);
//            tkt.setTitular(titular);
////            System.out.println(tkt.getToken());
////            System.out.println(tkt.getSign());
////            System.out.println(tkt.getException());
//            try {
//                new TicketTimeService().saveTicket(tkt);
//                return tkt;
//            } catch (Exception ex) {
//                Logger.getLogger(UtilAfip.class.getName()).log(Level.SEVERE, null, ex);
//                JOptionPane.showMessageDialog(null, "No se pudo guardar nuevo Ticket");
//            }
//        } else {
//            if (fecha != tkt.getFecha()) {
//                TicketTime tkt2 = generarTicket(certif, llave);
//                tkt.setSign(tkt2.getSign());
//                tkt.setException(tkt2.getException());
//                tkt.setHora(tkt2.getHora());
//                tkt.setMinuto(tkt2.getMinuto());
//                tkt.setSegundo(tkt2.getSegundo());
//                tkt.setToken(tkt2.getToken());
////                System.out.println(tkt.getToken());
////                System.out.println(tkt.getSign());
////                System.out.println(tkt.getException());
//                try {
//                    new TicketTimeService().updateTicket(tkt);
//                    return tkt;
//                } catch (Exception ex) {
//                    Logger.getLogger(UtilAfip.class.getName()).log(Level.SEVERE, null, ex);
//                    JOptionPane.showMessageDialog(null, "No se pudo guardar nuevo Ticket");
//                }
//            } else {
//                Calendar ca1 = Calendar.getInstance();
//                int hs1 = ca1.get(Calendar.HOUR_OF_DAY);
//                int hs = hs1 * 100;
//                int mi1 = ca1.get(Calendar.MINUTE);
//                int ho_mi_1 = hs + mi1;
//                int hs2 = tkt.getHora();
//                int hs_1 = hs2 * 100;
//                int mi2 = tkt.getMinuto();
//                int ho_mi_2 = hs_1 + mi2;
//                int tiempo = ho_mi_1 - ho_mi_2;
//                if (tiempo > 30) {
//                    TicketTime tkt2 = generarTicket(certif, llave);
//                    tkt.setSign(tkt2.getSign());
//                    tkt.setException(tkt2.getException());
//                    tkt.setHora(tkt2.getHora());
//                    tkt.setMinuto(tkt2.getMinuto());
//                    tkt.setSegundo(tkt2.getSegundo());
//                    tkt.setToken(tkt2.getToken());
////                    System.out.println(tkt.getToken());
////                    System.out.println(tkt.getSign());
////                    System.out.println(tkt.getException());
//                    try {
//                        new TicketTimeService().updateTicket(tkt);
//                        return tkt;
//                    } catch (Exception ex) {
//                        Logger.getLogger(UtilAfip.class.getName()).log(Level.SEVERE, null, ex);
//                        JOptionPane.showMessageDialog(null, "No se pudo guardar nuevo Ticket");
//                        return null;
//                    }
//                } else {
//                    return tkt;
//                }
//            }
//        }
//        return null;
//    }
    private TicketTime solicitarNuevoTicket(String crt, String key, Long id_tc) {
        TicketTime tt = UtilAfip.solicitarNuevoTicket(titular, crt, key);
        String tkn = tt.getToken();
        String sgn = tt.getSign();
        tt.setToken(tkn);
        tt.setSign(sgn);
        return tt;

//        ActiveXComponent wsaa = new ActiveXComponent("WSAA");
//        String userdir = "c:/alfa_sistema/crt";
//        String wsdl = "https://wsaa.afip.gov.ar/ws/services/LoginCms";
//        Dispatch.call(wsaa, "Autenticar",
//                new Variant("wsfe"),
//                //                new Variant(userdir + "/prodmario_2a9f20acca9d53c0.crt"),
//                //                new Variant(userdir + "/clave.key"),
//                //                new Variant(userdir + "/gustavo202206_3804c46ecdfc1928.crt"),
//                //                new Variant(userdir + "/clave_gustavo_20307465869_202206142429.key"),
//                new Variant(userdir + crt),
//                new Variant(userdir + key),
//                new Variant(wsdl));
//        String excepcion = Dispatch.get(wsaa, "Excepcion").toString();
//        String token = Dispatch.get(wsaa, "Token").toString();
//        String sign = Dispatch.get(wsaa, "Sign").toString();
//        TicketTime tkt = null;
//        try {
//            tkt = new TicketTimeService().getTicketById(id_tc);
//        } catch (Exception ex) {
////            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
//        }
//        Calendar cal = Calendar.getInstance();
//        cal.setTime(new Date());
//        int h = cal.get(Calendar.HOUR_OF_DAY);
//        int mi = cal.get(Calendar.MINUTE);
//        int se = cal.get(Calendar.SECOND);
//        tkt.setFecha(new Date());
//        tkt.setHora(h);
//        tkt.setMinuto(mi);
//        tkt.setSegundo(se);
//        tkt.setSign(sign);
//        tkt.setToken(token);
//        try {
//            new TicketTimeService().updateTicket(tkt);
//        } catch (Exception ex) {
////            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
//            JOptionPane.showMessageDialog(this, "No se pudo guardar nuevo Ticket");
//        }
    }

    private void llenarCombo() {
        fechaNcTxt.setText("");
        combo.removeAllItems();
        combo.addItem("");
        titulares = null;
        try {
            titulares = new TitularCuitService().getAllTitularDeCuitActivos();
        } catch (Exception ex) {
            Logger.getLogger(NotaCreditoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (titulares != null && !titulares.isEmpty()) {
            for (TitularCuit tc : titulares) {
                combo.addItem(tc.getPersona().getApellidoNombre());
            }
        }
        deTxt.setText("");
        alTxt.setText("");
        importeNcTxt.setText("");
        numeroTxt.setText("");
    }

    private void volver() {
        MainFrame mf = new MainFrame();
        mf.setVisible(true);
        this.dispose();
    }

    private void cargarComprobantes(TitularCuit titular) {
        try {
            de = sdf.parse(deTxt.getText());
            al = sdf.parse(alTxt.getText());
        } catch (ParseException ex) {
            //Logger.getLogger(NotaCreditoFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "ERROR EN LAS FECHAS");
            return;
        }
        comprobantes = null;
        try {
            comprobantes = new ComprobanteService().getComprobantesEntrFechasByTitular(titular, de, al);
        } catch (Exception ex) {
            Logger.getLogger(NotaCreditoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (comprobantes != null && !comprobantes.isEmpty()) {
            llenarTabla();
        }
    }

    private void llenarTabla() {
        UtilFrame.limpiarTabla(tabla);
        DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
        for (Comprobante c : comprobantes) {
            Object o[] = new Object[4];
            o[0] = sdf.format(c.getFecha());
            String fac;
            if(c.getCodigoComprobante().equals(1)){
                fac = "FC A ";
            } else {
                if(c.getCodigoComprobante().equals(6)){
                    fac = "FC B ";
                } else {
                    if(c.getCodigoComprobante().equals(3)){
                        fac = "NC A ";
                    } else {
                        if(c.getCodigoComprobante().equals(11)){
                        fac = "FC C ";
                        } else {
                            if(c.getCodigoComprobante().equals(13)){
                                fac = "NC C ";
                            } else {
                                fac = "NC B ";
                            }
                        }
                    }
                }
            }
            o[1] = fac + c.getLetra() + " " + c.getSucursal() + "-" + c.getNumero();
            o[2] = c.getCalleNroPisoDtoCliente();
            o[3] = df.format(c.getTotal());
            tbl.addRow(o);
        }
        tabla.setModel(tbl);
    }
}
