/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.ventas.frame;

import ar.com.ventas.entities.Comprobante;
import ar.com.ventas.entities.ComprobanteRenglones;
import ar.com.ventas.entities.Configuracion;
import ar.com.ventas.entities.Consorcio;
import ar.com.ventas.entities.CuentaCorrienteCliente;
import ar.com.ventas.entities.Rubro;
import ar.com.ventas.entities.TextoPeriodoReparacion;
import ar.com.ventas.estructuras.Constantes;
import ar.com.ventas.main.MainFrame;
import ar.com.ventas.services.ComprobanteRenglonesService;
import ar.com.ventas.services.ComprobanteService;
import ar.com.ventas.services.ConfiguracionService;
import ar.com.ventas.services.ConsorcioService;
import ar.com.ventas.services.TextoPeriodoReparacionService;
import ar.com.ventas.util.UtilFactura;
import ar.com.ventas.util.UtilFrame;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Mario
 */
public class CuotasDeReparacionesFrame extends javax.swing.JFrame {

    private List<Comprobante> fc;
    private SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    private DecimalFormat df = new DecimalFormat("#0.00");

    /**
     * Creates new form CuotasDeReparacionesFrame
     */
    public CuotasDeReparacionesFrame() {
        initComponents();
        getContentPane().setBackground(new java.awt.Color(Constantes.getR(), Constantes.getG(), Constantes.getB()));
//        this.setLocationRelativeTo(null);
        setExtendedState(6); // this.MAXIMIZED_BOTH
        llenarTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        generarCuotaBtn = new javax.swing.JButton();
        sacarBtn = new javax.swing.JButton();
        volverBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "FECHA", "CONSORCIO", "RUBRO", "NUEVA CTA", "CANT.CTAS", "TOTAL"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabla);

        generarCuotaBtn.setText("GENERAR CUOTAS");
        generarCuotaBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generarCuotaBtnActionPerformed(evt);
            }
        });

        sacarBtn.setText("SACAR");
        sacarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sacarBtnActionPerformed(evt);
            }
        });

        volverBtn.setText("VOLVER");
        volverBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 881, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(generarCuotaBtn)
                        .addGap(18, 18, 18)
                        .addComponent(sacarBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(volverBtn)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 456, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(generarCuotaBtn)
                    .addComponent(sacarBtn)
                    .addComponent(volverBtn))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void generarCuotaBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generarCuotaBtnActionPerformed
        generar();
    }//GEN-LAST:event_generarCuotaBtnActionPerformed

    private void sacarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sacarBtnActionPerformed
        sacar();
    }//GEN-LAST:event_sacarBtnActionPerformed

    private void volverBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverBtnActionPerformed
        volver();
    }//GEN-LAST:event_volverBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CuotasDeReparacionesFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CuotasDeReparacionesFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CuotasDeReparacionesFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CuotasDeReparacionesFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CuotasDeReparacionesFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton generarCuotaBtn;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton sacarBtn;
    private javax.swing.JTable tabla;
    private javax.swing.JButton volverBtn;
    // End of variables declaration//GEN-END:variables

    private void llenarTabla() {
        UtilFrame.limpiarTabla(tabla);
        DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
        fc = null;
        try {
            fc = new ComprobanteService().getComprobantesActivosReparacionParaRenovar();
        } catch (Exception ex) {
            Logger.getLogger(CuotasDeReparacionesFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println(fc);
        if (fc != null && !fc.isEmpty()) {
            for (Comprobante c : fc) {
                String calle = c.getCalleNroPisoDtoCliente();
                int ctaNva = c.getCuotasPagadas() + 1;
                Object o[] = new Object[6];
                o[0] = sdf.format(c.getFecha());
                o[1] = calle;
                o[2] = c.getRubro().getDetalle();
                o[3] = ctaNva;
                o[4] = c.getCantidadCuotas();
                o[5] = df.format(c.getTotal());
                tbl.addRow(o);
            }
            tabla.setModel(tbl);
        }
    }

    private void generar() {
        if (fc != null && !fc.isEmpty()) {
            for (Comprobante co : fc) {
                List<ComprobanteRenglones> renglones1 = null;
                try {
                    renglones1 = new ComprobanteRenglonesService().getRenglonesPorComprobante(co);
                } catch (Exception ex) {
                    Logger.getLogger(CuotasDeReparacionesFrame.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, "ERROR LEYENDO RENGLONES " + co.getCalleNroPisoDtoCliente());
                    return;
                }
                List<ComprobanteRenglones> renglones2 = new ArrayList<>();
                if (renglones1 != null && !renglones1.isEmpty()) {
                    for (ComprobanteRenglones cr : renglones1) {
                        ComprobanteRenglones cr1 = new ComprobanteRenglones();
                        cr1.setDetalle(cr.getDetalle());
                        cr1.setImporte(cr.getImporte());
                        renglones2.add(cr1);
                    }
                }
                Boolean cuotaSiguiente;
                Integer nroCuotaSiguiente = co.getCuotasPagadas() + 1;
                if (nroCuotaSiguiente.equals(co.getCantidadCuotas())) {
                    cuotaSiguiente = true;
                } else {
                    cuotaSiguiente = false;
                }
                Date nuevaFecha = new Date();
                String nf = sdf.format(nuevaFecha);
                String de_0 = UtilFrame.getFechaPrimero(nf);
                String al_0 = UtilFrame.getFechaFinMes(nf);
                Date de_1;
                Date al_1;
                try {
                    de_1 = sdf.parse(de_0);
                    al_1 = sdf.parse(al_0);
                } catch (ParseException ex) {
                    Logger.getLogger(CuotasDeReparacionesFrame.class.getName()).log(Level.SEVERE, null, ex);
                    de_1 = new Date();
                    al_1 = new Date();
                }
                int nroRcX = 0;
                Configuracion cfg = null;
                try {
                    cfg = new ConfiguracionService().getConfiguracion(1L);
                } catch (Exception ex) {
                    Logger.getLogger(CuotasDeReparacionesFrame.class.getName()).log(Level.SEVERE, null, ex);
                    nroRcX = 1;
                }
                nroRcX = cfg.getNroRx() + 1;
                cfg.setNroRx(nroRcX);
                String periodo = "";
                Integer codCons = co.getCodigoCliente();
                Consorcio cons = null;
                try {
                    cons = new ConsorcioService().getConsorcioByCodigo(codCons);
                } catch (Exception ex) {
                    Logger.getLogger(CuotasDeReparacionesFrame.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, "ERROR LEYENDO CONSORCIO CODIGO = " + codCons);
                    return;
                }
                Double saldo = 0.0;
                if (cons.getSaldo() != null) {
                    saldo += cons.getSaldo();
                }
                saldo += co.getTotal();
                cons.setSaldo(saldo);
                Rubro rubro = co.getRubro();
                TextoPeriodoReparacion tpr = null;
                try {
                    tpr = new TextoPeriodoReparacionService().getTextoPeriodoByConsorcioAndRubro(cons, rubro);
                } catch (Exception ex) {
                    Logger.getLogger(CuotasDeReparacionesFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (tpr != null) {
                    if (tpr.getLlevaTextoPeriodo()) {
                        if (tpr.getPeriodoMesActual().equals(0)) {
                            periodo = "";
                        }
                    }
                }
                Comprobante comp = new Comprobante();
                comp.setCae(0L);
                comp.setCalleNroPisoDtoCliente(co.getCalleNroPisoDtoCliente());
                comp.setCantidadCuotas(co.getCantidadCuotas());
                comp.setCodigoCliente(co.getCodigoCliente());
                comp.setCodigoComprobante(co.getCodigoComprobante());
                comp.setCodigoPostalAndLocalidadCliente(co.getCodigoPostalAndLocalidadCliente());
                comp.setCodigoPostalAndLocalidadTitular(co.getCodigoPostalAndLocalidadTitular());
                comp.setCuitCliente(co.getCuitCliente());
                comp.setCuitTitular(co.getCuitTitular());
                comp.setCuotaSiguienteFacturada(cuotaSiguiente);
                comp.setCuotasPagadas(nroCuotaSiguiente);
                comp.setDomicilioTitular(co.getDomicilioTitular());
                comp.setFecha(nuevaFecha);
                comp.setFechaInicioActividades(co.getFechaInicioActividades());
                comp.setFechaPeriodoDesde(de_1);
                comp.setFechaPeriodoHasta(al_1);
                comp.setFechaVencimientoCae(nuevaFecha);
                comp.setFechaVencimientoPago(al_1);
                comp.setFondo(co.getFondo());
                comp.setGravado(co.getGravado());
                comp.setId_administrador(co.getId_administrador());
                comp.setId_original(0L);
                comp.setIibb(co.getIibb());
                comp.setIva(0.00);
                comp.setLetra(co.getLetra());
                comp.setLetraComprobanteAsociado(co.getLetraComprobanteAsociado());
                comp.setNumero(nroRcX);
                comp.setNumeroComprobanteAsociado(0);
                comp.setOriginal(false);
                comp.setPagado(0.0);
                comp.setPdfGenerado(false);
                comp.setPeriodo(periodo);
                comp.setPeriodoHabilitado(false);
                comp.setProductoServicio(co.getProductoServicio());
                comp.setProvinciaCliente(co.getProvinciaCliente());
                comp.setProvinciaTitular(co.getProvinciaTitular());
                comp.setRazonSocialCliente(co.getRazonSocialCliente());
                comp.setRazonSocialTitular(co.getRazonSocialTitular());
                comp.setRubro(rubro);
                comp.setSucursal(co.getSucursal());
                comp.setSucursalComprobanteAsociado(0);
                comp.setTexto1("");
                comp.setTexto2("");
                comp.setTipoComprobanteAsociado(co.getTipoComprobanteAsociado());
                comp.setTipoDocumento(co.getTipoDocumento());
                comp.setTipoEmision(co.getTipoEmision());
                comp.setTipoInscripcion(co.getTipoInscripcion());
                comp.setTotal(co.getTotal());
                co.setPeriodoHabilitado(false);
                CuentaCorrienteCliente ccc = new CuentaCorrienteCliente();
                ccc.setComprobante(comp);
                ccc.setConsorcio(cons);
                ccc.setDebe(co.getTotal());
                ccc.setFecha(nuevaFecha);
                ccc.setHaber(0.00);
                ccc.setRecibo(null);
                ccc.setSaldo(saldo);
                ccc.setTipoComprobante(co.getCodigoComprobante());
                String resultado = UtilFactura.saveCuotaSiguienteComprobanteRx(cons, renglones2, co, comp,ccc);
                if (resultado.equals("A")) {
                    JOptionPane.showMessageDialog(this, "SE GRABO EL COMPROBANTE Y CTA CTE");
                    volver();
                }
            }
        }
    }

    private void sacar() {
        int rows = tabla.getSelectedRowCount();
        int cantRows = tabla.getRowCount();
        DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
        if (rows < 1) {
            JOptionPane.showMessageDialog(this, "DEBE SELECCIONAR LOS CONSORCIOS PARA SACAR");
            return;
        }
        int a[] = tabla.getSelectedRows();
        for (int n = cantRows - 1; n > -1; n--) {
            tbl.removeRow(n);
            fc.remove(n);
        }
        tabla.setModel(tbl);
    }

    private void volver() {
        MainFrame mf = new MainFrame();
        mf.setVisible(true);
        this.dispose();
    }
}
