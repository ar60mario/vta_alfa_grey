/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.ventas.frame;

import ar.com.ventas.entities.Abono;
import ar.com.ventas.estructuras.Constantes;
import ar.com.ventas.entities.Administrador;
import ar.com.ventas.entities.Comprobante;
import ar.com.ventas.entities.ComprobanteRenglones;
import ar.com.ventas.entities.Consorcio;
import ar.com.ventas.entities.ConsorcioMaster;
import ar.com.ventas.entities.CuentaCorrienteCliente;
import ar.com.ventas.entities.Domicilio;
import ar.com.ventas.entities.RcCo;
import ar.com.ventas.entities.Recibo;
import ar.com.ventas.entities.Rubro;
import ar.com.ventas.entities.TitularCuit;
import ar.com.ventas.main.MainFrame;
import ar.com.ventas.services.AbonoService;
import ar.com.ventas.services.AdministradorService;
import ar.com.ventas.services.ComprobanteRenglonesService;
import ar.com.ventas.services.ComprobanteService;
import ar.com.ventas.services.ConsorcioMasterService;
import ar.com.ventas.services.ConsorcioService;
import ar.com.ventas.services.CuentaCorrienteClienteService;
import ar.com.ventas.services.RcCoService;
import ar.com.ventas.services.ReciboService;
import ar.com.ventas.services.TitularCuitService;
import ar.com.ventas.util.UtilCobranza;
import ar.com.ventas.util.UtilFrame;
import ar.com.ventas.util.UtilTabla;
import java.io.File;
import java.io.IOException;
import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import jxl.Workbook;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;

/**
 *
 * @author Mario
 */
public class CuentaCorrienteAdministradorFrame extends javax.swing.JFrame {

    private SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    private DecimalFormat df = new DecimalFormat("#0.00");
    private List<Administrador> admins;
    private List<Consorcio> cons;
    private List<Comprobante> ivs;
    private List<CuentaCorrienteCliente> ctaCte = null;
    private Administrador adm;
    private Date de = new Date();
    private Date al = new Date();

    /**
     * Creates new form CuentaCorrienteAdministradorFrame
     *
     * @param adm
     * @param de1
     * @param al1
     */
    public CuentaCorrienteAdministradorFrame(Administrador adm, Date de1, Date al1) {
        initComponents();
        getContentPane().setBackground(new java.awt.Color(Constantes.getR(), Constantes.getG(), Constantes.getB()));
//        this.setLocationRelativeTo(null);
        setExtendedState(6); // this.MAXIMIZED_BOTH
        pdfBtn.setVisible(false);
        excelBtn.setVisible(true);
        this.adm = adm;
        this.de = de1;
        this.al = al1;
        if (adm == null) {
            limpiarCampos();
        } else {
            llenarCombo();
            llenarCampos();
        }
        soloImpagasChk.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        filtroNombreTxt = new javax.swing.JTextField();
        combo = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        deTxt = new javax.swing.JTextField();
        alTxt = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        volverBtn = new javax.swing.JButton();
        excelBtn = new javax.swing.JButton();
        pdfBtn = new javax.swing.JButton();
        pagoPorUnoBtn = new javax.swing.JButton();
        pagoTodoBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        totalAdminTxt = new javax.swing.JTextField();
        soloImpagasChk = new javax.swing.JCheckBox();
        eliminarAsignadaBtn = new javax.swing.JButton();
        eliminarReciboBtn = new javax.swing.JButton();
        eliminarRemitoXBtn = new javax.swing.JButton();
        verFacturasPendientesPagoBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("CUENTA CORRIENTE CONSORCIOS POR ADMINISTRACION");

        jLabel1.setText("Administrador:");

        filtroNombreTxt.setText("FILTRO NOMBRE");
        filtroNombreTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                filtroNombreTxtKeyPressed(evt);
            }
        });

        combo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        combo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboActionPerformed(evt);
            }
        });
        combo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                comboKeyPressed(evt);
            }
        });

        jLabel3.setText("AdministraciÃ³n:");

        jLabel5.setText("Desde Fecha:");

        jLabel6.setText("Hasta Fecha:");

        deTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        deTxt.setText("DESDE");
        deTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                deTxtKeyPressed(evt);
            }
        });

        alTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        alTxt.setText("HASTA");
        alTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                alTxtKeyPressed(evt);
            }
        });

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CONSORCIO", "FECHA", "DOCUMENTO", "IMP.CUOTA", "Nr.CTA", "TITULAR", "DEBE", "HABER", "SALDO", "M"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabla);
        if (tabla.getColumnModel().getColumnCount() > 0) {
            tabla.getColumnModel().getColumn(0).setPreferredWidth(200);
            tabla.getColumnModel().getColumn(1).setPreferredWidth(30);
            tabla.getColumnModel().getColumn(2).setPreferredWidth(200);
            tabla.getColumnModel().getColumn(3).setPreferredWidth(30);
            tabla.getColumnModel().getColumn(4).setPreferredWidth(7);
            tabla.getColumnModel().getColumn(6).setPreferredWidth(25);
            tabla.getColumnModel().getColumn(7).setPreferredWidth(25);
            tabla.getColumnModel().getColumn(8).setPreferredWidth(30);
            tabla.getColumnModel().getColumn(9).setPreferredWidth(10);
        }

        volverBtn.setText("Volver");
        volverBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverBtnActionPerformed(evt);
            }
        });

        excelBtn.setText("Excel");
        excelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                excelBtnActionPerformed(evt);
            }
        });

        pdfBtn.setText("PDF");
        pdfBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pdfBtnActionPerformed(evt);
            }
        });

        pagoPorUnoBtn.setText("Pagado x 1");
        pagoPorUnoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pagoPorUnoBtnActionPerformed(evt);
            }
        });

        pagoTodoBtn.setText("Pagado Seleccionado");
        pagoTodoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pagoTodoBtnActionPerformed(evt);
            }
        });

        jLabel2.setText("TOTAL ADMIN:");

        totalAdminTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        totalAdminTxt.setText("TOTAL ADMIN");

        soloImpagasChk.setText("SOLO FACTURAS IMPAGAS");
        soloImpagasChk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                soloImpagasChkActionPerformed(evt);
            }
        });

        eliminarAsignadaBtn.setText("ELIMINAR FC ASIGNADA");
        eliminarAsignadaBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarAsignadaBtnActionPerformed(evt);
            }
        });

        eliminarReciboBtn.setText("ELIMINAR RECIBO");
        eliminarReciboBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarReciboBtnActionPerformed(evt);
            }
        });

        eliminarRemitoXBtn.setText("ELIM.REMITO X");
        eliminarRemitoXBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarRemitoXBtnActionPerformed(evt);
            }
        });

        verFacturasPendientesPagoBtn.setText("VER FC PENDIENTES DE PAGO");
        verFacturasPendientesPagoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verFacturasPendientesPagoBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel3))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(filtroNombreTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(combo, javax.swing.GroupLayout.PREFERRED_SIZE, 446, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(deTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(alTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel2)))
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(totalAdminTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(verFacturasPendientesPagoBtn))
                        .addGap(18, 18, 18)
                        .addComponent(soloImpagasChk)
                        .addGap(0, 39, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(excelBtn)
                        .addGap(18, 18, 18)
                        .addComponent(pagoPorUnoBtn)
                        .addGap(18, 18, 18)
                        .addComponent(pagoTodoBtn)
                        .addGap(18, 18, 18)
                        .addComponent(eliminarAsignadaBtn)
                        .addGap(18, 18, 18)
                        .addComponent(eliminarReciboBtn)
                        .addGap(18, 18, 18)
                        .addComponent(eliminarRemitoXBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(pdfBtn)
                        .addGap(18, 18, 18)
                        .addComponent(volverBtn)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(filtroNombreTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(combo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(verFacturasPendientesPagoBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(deTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(alTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(totalAdminTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(soloImpagasChk))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 407, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(volverBtn)
                    .addComponent(excelBtn)
                    .addComponent(pdfBtn)
                    .addComponent(pagoPorUnoBtn)
                    .addComponent(pagoTodoBtn)
                    .addComponent(eliminarAsignadaBtn)
                    .addComponent(eliminarReciboBtn)
                    .addComponent(eliminarRemitoXBtn))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void filtroNombreTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_filtroNombreTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            llenarCombo();
        }
    }//GEN-LAST:event_filtroNombreTxtKeyPressed

    private void comboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboActionPerformed
        int row = combo.getSelectedIndex();
        if (row > 0) {
            if (evt.getModifiers() == 16) {
                calcularFechas();
            }
        }
    }//GEN-LAST:event_comboActionPerformed

    private void comboKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comboKeyPressed
        int row = combo.getSelectedIndex();
        if (row > 0) {
            if (evt.getKeyCode() == 10) {
                calcularFechas();
            }
        }
    }//GEN-LAST:event_comboKeyPressed

    private void volverBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverBtnActionPerformed
        volver();
    }//GEN-LAST:event_volverBtnActionPerformed

    private void pagoTodoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pagoTodoBtnActionPerformed
        pagoTodo();
    }//GEN-LAST:event_pagoTodoBtnActionPerformed

    private void pagoPorUnoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pagoPorUnoBtnActionPerformed
        pagoPorUno();
    }//GEN-LAST:event_pagoPorUnoBtnActionPerformed

    private void pdfBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pdfBtnActionPerformed
        pdf();
    }//GEN-LAST:event_pdfBtnActionPerformed

    private void excelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excelBtnActionPerformed
        excel();
    }//GEN-LAST:event_excelBtnActionPerformed

    private void deTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_deTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            alTxt.requestFocus();
        }
    }//GEN-LAST:event_deTxtKeyPressed

    private void alTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_alTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            llenarTabla();
        }
    }//GEN-LAST:event_alTxtKeyPressed

    private void soloImpagasChkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_soloImpagasChkActionPerformed
        if (soloImpagasChk.isSelected()) {
            buscarImpagas();
        }
    }//GEN-LAST:event_soloImpagasChkActionPerformed

    private void eliminarAsignadaBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarAsignadaBtnActionPerformed
        eliminarAsignada();
    }//GEN-LAST:event_eliminarAsignadaBtnActionPerformed

    private void eliminarReciboBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarReciboBtnActionPerformed
        eliminarRecibo();
    }//GEN-LAST:event_eliminarReciboBtnActionPerformed

    private void eliminarRemitoXBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarRemitoXBtnActionPerformed
        eliminarRemitoX();
    }//GEN-LAST:event_eliminarRemitoXBtnActionPerformed

    private void verFacturasPendientesPagoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verFacturasPendientesPagoBtnActionPerformed
        verFacturasPendientes();
    }//GEN-LAST:event_verFacturasPendientesPagoBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CuentaCorrienteAdministradorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CuentaCorrienteAdministradorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CuentaCorrienteAdministradorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CuentaCorrienteAdministradorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CuentaCorrienteAdministradorFrame(null, null, null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField alTxt;
    private javax.swing.JComboBox<String> combo;
    private javax.swing.JTextField deTxt;
    private javax.swing.JButton eliminarAsignadaBtn;
    private javax.swing.JButton eliminarReciboBtn;
    private javax.swing.JButton eliminarRemitoXBtn;
    private javax.swing.JButton excelBtn;
    private javax.swing.JTextField filtroNombreTxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton pagoPorUnoBtn;
    private javax.swing.JButton pagoTodoBtn;
    private javax.swing.JButton pdfBtn;
    private javax.swing.JCheckBox soloImpagasChk;
    private javax.swing.JTable tabla;
    private javax.swing.JTextField totalAdminTxt;
    private javax.swing.JButton verFacturasPendientesPagoBtn;
    private javax.swing.JButton volverBtn;
    // End of variables declaration//GEN-END:variables

    private void limpiarCampos() {
        filtroNombreTxt.setText("");
        UtilFrame.limpiarTabla(tabla);
        deTxt.setText("");
        alTxt.setText("");
        combo.removeAllItems();
        combo.addItem("");
        totalAdminTxt.setText("");
        soloImpagasChk.setSelected(false);
    }

    private void llenarCombo() {
        admins = null;
        combo.removeAllItems();
        combo.addItem("");
        String filtro = filtroNombreTxt.getText();
        try {
            admins = new AdministradorService().getAllAdministradoresActivosByFiltro(filtro);
        } catch (Exception ex) {
            Logger.getLogger(CuentaCorrienteAdministradorFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (admins != null && !admins.isEmpty()) {
            for (Administrador ad : admins) {
                combo.addItem(ad.getRazonSocial());
            }
            combo.addFocusListener(null);
            combo.showPopup();
            combo.requestFocus();
        }
    }

    private void calcularFechas() {
        int row = combo.getSelectedIndex();
        if (row > 0) {
            adm = admins.get(row - 1);
            Calendar cal1 = Calendar.getInstance();
            cal1.set(Calendar.MONTH, cal1.get(Calendar.MONTH) - 1);
            cal1.set(Calendar.DAY_OF_MONTH, 1);
            de = cal1.getTime();
            deTxt.setText(sdf.format(de));

            Calendar cal2 = Calendar.getInstance();
//        cal2.set(Calendar.MONTH, cal2.get(Calendar.MONTH) - 1);
            cal2.set(Calendar.DAY_OF_MONTH, cal2.getActualMaximum(Calendar.DAY_OF_MONTH));
            al = cal2.getTime();
            alTxt.setText(sdf.format(al));

            deTxt.requestFocus();
        }

    }

    private void volver() {
        MainFrame mf = new MainFrame();
        mf.setVisible(true);
        dispose();
    }

    private void pagoTodo() {
        int rowCount = tabla.getRowCount();
        int rowsSelec = tabla.getSelectedRowCount();
        int[] rown = tabla.getSelectedRows();
        if (rowCount < 1) {
            JOptionPane.showMessageDialog(this, "NO HAY COMPROBANTES");
            return;
        }
        if (rowsSelec < 1) {
            JOptionPane.showMessageDialog(this, "NO HAY COMPROBANTES SELECCIONADOS");
            return;
        }
        for (int i = 0; i < rowsSelec; i++) {
            int n = 0;
            List<Comprobante> compError = new ArrayList<>();
            if (ctaCte.get(rown[i]).getTipoComprobante().equals(11)) {
                Comprobante cmpte = ctaCte.get(rown[i]).getComprobante();
                Double imp = cmpte.getTotal();
                Integer x = UtilCobranza.aplicarCobranzaByComprobante(cmpte, imp);
                if (x > 0) {
                    n = 1;
                    compError.add(cmpte);
                }
                if (n > 0) {
                    JOptionPane.showMessageDialog(this, "ALGUNOS COMPROBANTES NO SE PROCESARON CORRECTAMENTE");

                } else {
                    JOptionPane.showMessageDialog(this, "PROCESO FINALIZADO CORRECTAMENTE");
                }
            }
        }
        llenarTabla();
    }

    private void pagoPorUno() {
        int row = tabla.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(this, "DEBE SELECCIONAR UN DOCUMENTO PARA VERLO");
            return;
        }
        int tipoCom = ctaCte.get(row).getTipoComprobante();
        if (tipoCom == 14) {
            JOptionPane.showMessageDialog(this, "NO PUEDE ASIGNAR PAGO A RECIBO");
            return;
        }
        if (tipoCom == 13) {
            JOptionPane.showMessageDialog(this, "NO PUEDE ASIGNAR PAGO A NOTA DE CREDITO");
            return;
        }
        if (tipoCom == 11) {
            Comprobante com = ctaCte.get(row).getComprobante();
//            System.out.println(com.getPagado());
            IngresarPagoFrame ipf = new IngresarPagoFrame(com, adm, de, al);
            ipf.setVisible(true);
            this.dispose();
        }

//        System.exit(0);
    }

    private void pdf() {

    }

    private void excel() {
        int rows = tabla.getRowCount();
        int row = combo.getSelectedIndex();
//        Administrador adm = admins.get(row - 1);
        String na = adm.getNombreAdministrador();
        na = UtilFrame.getNombreSinEspacios(na);
        if (rows > 0) {
            String rutaArchivo = "c:/alfa_sistema/data/excel/cta_cte_" + na + ".xls";
            File archivo = new File(rutaArchivo);
            if (archivo.exists()) {
                archivo.delete();
            }
            try {
                archivo.createNewFile();
            } catch (IOException ex) {
                Logger.getLogger(AbonosPendientesFacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            WritableWorkbook libro = null;
            try {
                libro = Workbook.createWorkbook(archivo);
            } catch (IOException ex) {
                Logger.getLogger(AbonosPendientesFacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            WritableSheet hoja1 = libro.createSheet("CUENTA CORRIENTE", 0);
            int y = 2;
            try {
                hoja1.addCell(new jxl.write.Label(0, 0, "ALFA - SISTEMAS - CUENTA CORRIENTE" + na));
                hoja1.addCell(new jxl.write.Label(0, 1, "CONSORCIO"));
                hoja1.addCell(new jxl.write.Label(1, 1, "FECHA"));
                hoja1.addCell(new jxl.write.Label(2, 1, "DOCUMENTO"));
                hoja1.addCell(new jxl.write.Label(3, 1, "IMP.CUOTA"));
                hoja1.addCell(new jxl.write.Label(4, 1, "NUM.CUOTA"));
                hoja1.addCell(new jxl.write.Label(5, 1, "TITULAR"));
                hoja1.addCell(new jxl.write.Label(6, 1, "DEBE"));
                hoja1.addCell(new jxl.write.Label(7, 1, "HABER"));
                hoja1.addCell(new jxl.write.Label(8, 1, "SALDO"));
            } catch (WriteException ex) {
                Logger.getLogger(AbonosPendientesFacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Error configurando Excel");
            }
            for (int i = 0; i < rows; i++) {
                String con = "";
                if (tabla.getValueAt(i, 0) != null) {
                    con = tabla.getValueAt(i, 0).toString(); //renglon, columna
                }
                String fech = tabla.getValueAt(i, 1).toString();
                String docu = tabla.getValueAt(i, 2).toString();
                Double imp2 = Double.valueOf(tabla.getValueAt(i, 3).toString().replace(",", "."));
                String n_cuo = "";
                String titu = "";
                if (tabla.getValueAt(i, 4) != null) {
                    n_cuo = tabla.getValueAt(i, 4).toString();
                }
                if (tabla.getValueAt(i, 5) != null) {
                    titu = tabla.getValueAt(i, 5).toString();
                }
                Double nd = Double.valueOf(tabla.getValueAt(i, 6).toString().replace(",", "."));
                Double nh = Double.valueOf(tabla.getValueAt(i, 7).toString().replace(",", "."));
                Double ns = Double.valueOf(tabla.getValueAt(i, 8).toString().replace(",", "."));
                try {
                    hoja1.addCell(new jxl.write.Label(0, y, con));
                    hoja1.addCell(new jxl.write.Label(1, y, fech));
                    hoja1.addCell(new jxl.write.Label(2, y, docu));
                    hoja1.addCell(new jxl.write.Number(3, y, imp2));
                    hoja1.addCell(new jxl.write.Label(4, y, n_cuo));
                    hoja1.addCell(new jxl.write.Label(5, y, titu));
                    hoja1.addCell(new jxl.write.Number(6, y, nd));
                    hoja1.addCell(new jxl.write.Number(7, y, nh));
                    hoja1.addCell(new jxl.write.Number(8, y, ns));

                    y += 1;
                } catch (WriteException ex) {
                    Logger.getLogger(AbonosPendientesFacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, "Error configurando Excel");
                }
            }
            try {
                libro.write();
                libro.close();
            } catch (IOException ex) {
                Logger.getLogger(AbonosPendientesFacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Error: 662");
                return;
            } catch (WriteException ex) {
                Logger.getLogger(AbonosPendientesFacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Error: 663");
                return;
            }
            JOptionPane.showMessageDialog(this, "Excel creado correctamente");

        }
    }

    private void llenarTabla() {
        cons = null;
        try {
            de = sdf.parse(deTxt.getText());
            al = sdf.parse(alTxt.getText());
        } catch (ParseException ex) {
            Logger.getLogger(CuentaCorrienteAdministradorFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            cons = new ConsorcioService().getAllConsorciosActivosByAdministrador(adm);
        } catch (Exception ex) {
            Logger.getLogger(CuentaCorrienteAdministradorFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        Boolean vacio = true;
        if (cons != null && !cons.isEmpty()) {
            ctaCte = new ArrayList<>();
            List<CuentaCorrienteCliente> cuentaCte = null;
            for (Consorcio co : cons) {
                try {
                    cuentaCte = new CuentaCorrienteClienteService()
                            .getCtaCteDeVariosClientesEntreFechas(co, de, al);
                } catch (Exception ex) {
                    Logger.getLogger(CuentaCorrienteAdministradorFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (cuentaCte != null && !cuentaCte.isEmpty()) {
                    vacio = false;
                    for (CuentaCorrienteCliente cc : cuentaCte) {
                        ctaCte.add(cc);
                    }
                }
            }
            UtilFrame.limpiarTabla(tabla);
            if (!vacio) {
//                UtilTabla ut = new UtilTabla();
                DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
//                tabla.setDefaultRenderer(Object.class, ut);
                Long id_co = 0L;
                Double totalAdmin = 0.0;
                Comprobante comp = null;
                Rubro rubro = null;
                Recibo re = null;
                for (CuentaCorrienteCliente ccc : ctaCte) {
                    Consorcio c = ccc.getConsorcio();
                    Domicilio dm = c.getDomicilio();
                    Object o[] = new Object[10];

                    totalAdmin += c.getSaldo();
                    o[1] = sdf.format(ccc.getFecha());
                    if (!c.getId().equals(id_co)) {
                        o[0] = dm.getCalle() + " " + dm.getNumero();
                        id_co = c.getId();
                        if (ccc.getDebe() > 0.00) {
                            comp = ccc.getComprobante();
                            rubro = ccc.getComprobante().getRubro();
                            o[2] = "FC " + comp.getLetra() + " " + comp.getSucursal()
                                    + " " + comp.getNumero() + " " + comp.getRubro().getDetalle();
                            o[3] = df.format(comp.getTotal());
                            if (rubro.getEsAbono()) {
                                o[4] = comp.getCuotasPagadas();
                            } else {
                                o[4] = comp.getPeriodo();
                            }
                            o[5] = comp.getRazonSocialTitular();
                            if (comp.getOriginal() != null) {
                                if (comp.getOriginal()) {
                                    o[9] = "Org";
                                } else {
                                    o[9] = "Asg";
                                }
                            } else {
                                o[9] = "Asg";
                            }
                        }
                        if (ccc.getHaber() > 0.00) {
                            if (ccc.getTipoComprobante().equals(13)) {
                                rubro = ccc.getComprobante().getRubro();
                                comp = ccc.getComprobante();
                                o[2] = "NC " + comp.getLetra() + " " + comp.getSucursal()
                                        + " " + comp.getNumero() + " " + comp.getRubro().getDetalle();
                                o[3] = df.format(comp.getTotal());
                                if (rubro.getEsAbono()) {
                                    o[4] = comp.getCuotasPagadas();
                                } else {
                                    o[4] = comp.getPeriodo();
                                }
                                o[5] = comp.getRazonSocialTitular();
                            }
                            if (ccc.getTipoComprobante().equals(14)) {
                                re = ccc.getRecibo();
                                o[2] = "RC " + re.getReferencia();
                                o[3] = df.format(re.getImporte());
                            }
                        }
                        o[6] = df.format(ccc.getDebe());//debe
                        o[7] = df.format(ccc.getHaber());//haber
                        o[8] = df.format(ccc.getSaldo());//saldo

                    } else {
                        if (ccc.getDebe() > 0.00) {
                            comp = ccc.getComprobante();
                            rubro = ccc.getComprobante().getRubro();
                            o[2] = "FC " + comp.getLetra() + " " + comp.getSucursal()
                                    + " " + comp.getNumero() + " " + comp.getRubro().getDetalle();
                            o[3] = df.format(comp.getTotal());
                            if (rubro.getEsAbono()) {
                                o[4] = comp.getCuotasPagadas();
                            } else {
                                o[4] = comp.getPeriodo();
                            }
                            o[5] = comp.getRazonSocialTitular();
                            if (comp.getOriginal() != null) {
                                if (comp.getOriginal()) {
                                    o[9] = "Org";
                                } else {
                                    o[9] = "Asg";
                                }
                            } else {
                                o[9] = "Asg";
                            }
                        }
                        if (ccc.getHaber() > 0.00) {
                            if (ccc.getTipoComprobante().equals(13)) {
                                rubro = ccc.getComprobante().getRubro();
                                comp = ccc.getComprobante();
                                o[2] = "NC " + comp.getLetra() + " " + comp.getSucursal()
                                        + " " + comp.getNumero() + " " + comp.getRubro().getDetalle();
                                o[3] = df.format(comp.getTotal());
                                if (rubro.getEsAbono()) {
                                    o[4] = comp.getCuotasPagadas();
                                } else {
                                    o[4] = comp.getPeriodo();
                                }
                                o[5] = comp.getRazonSocialTitular();
                            }
                            if (ccc.getTipoComprobante().equals(14)) {
                                re = ccc.getRecibo();
                                o[2] = "RC " + re.getReferencia();
                                o[3] = df.format(re.getImporte());
                            }
                        }
                        o[6] = df.format(ccc.getDebe());//debe
                        o[7] = df.format(ccc.getHaber());//haber
                        o[8] = df.format(ccc.getSaldo());//saldo
                    }
                    tbl.addRow(o);
                }
                tabla.setModel(tbl);
                totalAdminTxt.setText(df.format(totalAdmin));
            }
        }
    }

    private void llenarCampos() {
        int rows = admins.size();
        Long id0 = adm.getId();
        for (int i = 1; i < rows + 1; i++) {
            Long id2 = admins.get(i).getId();
            if (id0.equals(id2)) {
                combo.setSelectedIndex(i);
            }
        }
        deTxt.setText(sdf.format(de));
        alTxt.setText(sdf.format(al));
        llenarTabla();
    }

    private void buscarImpagas() {
        ivs = null;
        try {
//            ivs = new ComprobanteService().getComprobantesImpagosByAdministrador(adm);

        } catch (Exception ex) {
            Logger.getLogger(CuentaCorrienteAdministradorFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        UtilFrame.limpiarTabla(tabla);
        System.out.println(ivs);
//        System.exit(0);
        if (ivs != null && !ivs.isEmpty()) {
            DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
            Double totalAdm = 0.0;
            for (Comprobante com : ivs) {
                Object o[] = new Object[10];
                Integer cod = com.getCodigoCliente();
                Consorcio c = null;
                try {
                    c = new ConsorcioService().getConsorcioByCodigo(cod);

                } catch (Exception ex) {
                    Logger.getLogger(CuentaCorrienteAdministradorFrame.class
                            .getName()).log(Level.SEVERE, null, ex);
                    return;
                }
                if (!c.getCodigo().equals(cod)) {
                    Domicilio dm = c.getDomicilio();
                    o[0] = dm.getCalle() + " " + dm.getNumero();
                    totalAdm += com.getTotal();
                    o[1] = sdf.format(com.getFecha());
                    Rubro rubro = com.getRubro();
                    String titular = com.getRazonSocialTitular();
                    o[2] = com.getLetra() + " " + com.getSucursal()
                            + " " + com.getNumero() + " " + com.getRubro().getDetalle();

                    o[3] = df.format(com.getTotal());
                    if (com.getCodigoComprobante().equals(5)) {
                        o[4] = com.getCuotasPagadas();
                    } else {
                        if (com.getCuotasPagadas() != null) {
                            if (rubro.getCodigo().equals(2)) {
                                o[4] = com.getCuotasPagadas();
                            } else {
                                if (rubro.getCodigo().equals(3)) {
                                    String mes = com.getPeriodo();
                                    o[4] = mes;
                                } else {
                                    if (rubro.getCodigo().equals(6)) {
                                        o[4] = com.getCuotasPagadas();
                                    }
                                }
                            }
                        }
                    }
                    o[5] = titular;
                }

                o[6] = df.format(0.00);//debe
                o[7] = df.format(0.00);//haber
                o[8] = df.format(com.getTotal());//saldo

                o[9] = "";
                tbl.addRow(o);
            }
        }

    }

    private void eliminarRecibo() {
        int row = tabla.getSelectedRow();
        int rows = tabla.getSelectedRowCount();
        if (rows > 1) {
            JOptionPane.showMessageDialog(this, "DEBE SELECCIONAR SOLO UN RECIBO");
            return;
        }
        if (row < 0) {
            JOptionPane.showMessageDialog(this, "DEBE SELECCIONAR UN RECIBO");
            return;
        }
        eliminar(row);
    }

    private void eliminarAsignada() {
        int row = tabla.getSelectedRow();
        int rows = tabla.getSelectedRowCount();
        if (rows > 1) {
            JOptionPane.showMessageDialog(this, "SELECCIONE SOLAMENTE UNA FACTURA PARA ELIMINAR");
            return;
        }
        if (row < 0) {
            JOptionPane.showMessageDialog(this, "SELECCIONE UNA FACTURA ASIGNADA PARA ELIMINAR");
            return;
        }
        CuentaCorrienteCliente cc2 = ctaCte.get(row);
        System.out.println(cc2.getComprobante());
        System.out.println(cc2.getDebe());
        System.out.println(cc2.getHaber());
//        System.exit(0);
        if (cc2.getComprobante() != null) {
            Comprobante com = cc2.getComprobante();
            if (com.getOriginal()) {
                JOptionPane.showMessageDialog(this, "ESTA FACTURA ES ORIGINAL Y NO PUEDE ELIMINARLA");
                return;
            }
            if (cc2.getHaber() > 0.0) {
                JOptionPane.showMessageDialog(this, "SOLO PUEDE ELIMINAR FACTURA ASIGNADA");
                return;
            }
            if (!com.getLetra().equals("C")) {
                JOptionPane.showMessageDialog(this, "SOLO PUEDE ELIMINAR FACTURA ASIGNADA");
                return;
            }
            Integer codigo = com.getCodigoCliente();
            Consorcio cons0 = null;
            try {
                cons0 = new ConsorcioService().getConsorcioByCodigo(codigo);

            } catch (Exception ex) {
                Logger.getLogger(CuentaCorrienteAdministradorFrame.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
            List<ComprobanteRenglones> renglones = null;
            try {
                renglones = new ComprobanteRenglonesService().getRenglonesPorComprobante(com);

            } catch (Exception ex) {
                Logger.getLogger(CuentaCorrienteAdministradorFrame.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
            if (cons0 != null) {
                Double sal = cons0.getSaldo();
                sal -= com.getTotal();
                cons0.setSaldo(sal);
            } else {
                JOptionPane.showMessageDialog(this, "VERIFIQUE CONSORCIO");
                return;
            }

            Date hoy = new Date();
            List<CuentaCorrienteCliente> cue = null;
            try {
                cue = new CuentaCorrienteClienteService().getCuentaCorrienteClienteByClienteEntreFechas2(cons0, de, hoy);

            } catch (Exception ex) {
                Logger.getLogger(CuentaCorrienteAdministradorFrame.class
                        .getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "ERROR LEYENDO LA CUENTA CORRIENTE DEL CONSORCIO");
                return;
            }
            Long id1 = com.getId();
            if (cue.get(0).getTipoComprobante().equals(14)) {
                JOptionPane.showMessageDialog(this, "ERROR EL ULTIMO MOVIMIENTO DEL CONSORCIO DEBE SER FACTURA ASIGNADA");
                return;
            }
            Long id2 = cue.get(0).getComprobante().getId();
            if (!id1.equals(id2)) {
                JOptionPane.showMessageDialog(this, "ERROR NO ES EL ULTIMO MOVIMIENTO DEL CONSORCIO");
                return;
            }
            int a = JOptionPane.showConfirmDialog(this, "CONFIRME ELIMINAR COMPROBANTE ASIGNADO", "ATENCIÃN!!!", JOptionPane.YES_NO_OPTION);
            if (a == 0) {
                if (renglones != null && !renglones.isEmpty()) {
                    try {
                        new CuentaCorrienteClienteService().eliminarComprobanteAsignadoCompleto(cc2, cons0, renglones, com);

                    } catch (Exception ex) {
                        Logger.getLogger(CuentaCorrienteAdministradorFrame.class
                                .getName()).log(Level.SEVERE, null, ex);
                        JOptionPane.showMessageDialog(this, "ERROR NO ES EL ULTIMO MOVIMIENTO DEL CONSORCIO");
                        return;
                    }
                    JOptionPane.showMessageDialog(this, "COMPROBANTE ELIMINADO");
                    llenarTabla();
                }
            }
        }
    }

    private void eliminar(int row) {
        CuentaCorrienteCliente cc = ctaCte.get(row);
        Integer x = cc.getTipoComprobante();
        Date hoy = new Date();
        if (x.equals(14)) {
//            Integer codigoCliente = cc.getRecibo().getConsorcio().getCodigo();
            Consorcio co = cc.getRecibo().getConsorcio();
            Long id_rc = cc.getRecibo().getId();
            List<CuentaCorrienteCliente> cuenta = null;
            try {
                cuenta = new CuentaCorrienteClienteService().getCuentaCorrienteClienteByClienteEntreFechas2(co, de, hoy);

            } catch (Exception ex) {
                Logger.getLogger(CuentaCorrienteAdministradorFrame.class
                        .getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "ERROR LEYENDO LA CUENTA CORRIENTE DEL CONSORCIO");
                return;
            }
            Long id_rc2 = cuenta.get(0).getRecibo().getId();
            if (id_rc2.equals(id_rc)) {
                Recibo re = cuenta.get(0).getRecibo();
                Comprobante cmp = ctaCte.get(row).getComprobante();
                int a = JOptionPane.showConfirmDialog(this, "CONFIRMA ELIMINAR RECIBO?", "AtenciÃ³n", JOptionPane.YES_NO_OPTION);
                if (a == 0) {
                    Double importeRecibo = re.getImporte();
                    Double saldoConsorcio = co.getSaldo();
                    RcCo rcCo;
                    try {
                        rcCo = new RcCoService().getRecibosByReciboAndComprobante(re, cmp);

                    } catch (Exception ex) {
                        Logger.getLogger(CuentaCorrienteAdministradorFrame.class
                                .getName()).log(Level.SEVERE, null, ex);
                        JOptionPane.showMessageDialog(this, "ERROR LEYENDO CMP");
                        return;
                    }
//                    try {
//                        new RcCoService().deleteRecibo(rcCo);
//                    } catch (Exception ex) {
//                        Logger.getLogger(CuentaCorrienteAdministradorFrame.class.getName()).log(Level.SEVERE, null, ex);
//                        JOptionPane.showMessageDialog(this, "ERROR ELIMINADO CMP");
//                        return;
//                    }
//                            System.out.println(re);
//                            System.out.println(cmp);
//                            System.out.println(rcCo);
//                            System.exit(0);
                    BigDecimal bd_importe = new BigDecimal(df.format(importeRecibo).replace(",", "."));
                    BigDecimal bd_saldo = new BigDecimal(df.format(saldoConsorcio).replace(",", "."));
                    bd_saldo = bd_saldo.subtract(bd_importe);
                    co.setSaldo(bd_saldo.doubleValue());
                    BigDecimal bd_pagadoComprobante = new BigDecimal(df.format(cmp.getPagado()).replace(",", "."));
                    bd_pagadoComprobante = bd_pagadoComprobante.add(bd_importe);
                    cmp.setPagado(bd_pagadoComprobante.doubleValue());
                    cmp.setCuotasPagadas(cmp.getCuotasPagadas() + 1);
                    try {
                        new ReciboService().eliminarReciboCompleto(re, co, rcCo, cc, cmp);

                    } catch (Exception ex) {
                        Logger.getLogger(CuentaCorrienteAdministradorFrame.class
                                .getName()).log(Level.SEVERE, null, ex);
                    }
                    JOptionPane.showMessageDialog(this, "ELIMINADO");
                    llenarTabla();
                }
            } else {
                JOptionPane.showMessageDialog(this, "DEBE SER RECIBO Y ULTIMO MOVIMIENTO");
            }

        } else {
            JOptionPane.showMessageDialog(this, "DEBE SER RECIBO Y ULTIMO MOVIMIENTO");
        }

    }

    private void eliminarRemitoX() {
        int row = tabla.getSelectedRow();
        int rows = tabla.getSelectedRowCount();
        if (rows > 1) {
            JOptionPane.showMessageDialog(this, "SELECCIONE SOLAMENTE UN REMITO X PARA ELIMINAR");
            return;
        }
        if (row < 0) {
            JOptionPane.showMessageDialog(this, "SELECCIONE UN REMITO X PARA ELIMINAR");
            return;
        }
        CuentaCorrienteCliente cc2 = ctaCte.get(row);
        if (cc2.getComprobante() != null) {
            Comprobante com = cc2.getComprobante();

            if (cc2.getHaber() > 0.0) {
                JOptionPane.showMessageDialog(this, "SOLO PUEDE ELIMINAR REMITO X");
                return;
            }
            if (!com.getLetra().equals("X")) {
                JOptionPane.showMessageDialog(this, "SOLO PUEDE ELIMINAR UN REMITO X");
                return;
            }
            Integer codigo = com.getCodigoCliente();
            Consorcio cons0 = null;
            try {
                cons0 = new ConsorcioService().getConsorcioByCodigo(codigo);

            } catch (Exception ex) {
                Logger.getLogger(CuentaCorrienteAdministradorFrame.class
                        .getName()).log(Level.SEVERE, null, ex);
                return;
            }
            List<ComprobanteRenglones> renglones = null;
            try {
                renglones = new ComprobanteRenglonesService().getRenglonesPorComprobante(com);

            } catch (Exception ex) {
                Logger.getLogger(CuentaCorrienteAdministradorFrame.class
                        .getName()).log(Level.SEVERE, null, ex);
                return;
            }
            if (cons0 != null) {
                Double sal = cons0.getSaldo();
                sal -= com.getTotal();
                cons0.setSaldo(sal);
            } else {
                JOptionPane.showMessageDialog(this, "VERIFIQUE CONSORCIO");
                return;
            }
            Date hoy = new Date();
            List<CuentaCorrienteCliente> cue = null;
            try {
                cue = new CuentaCorrienteClienteService().getCuentaCorrienteClienteByClienteEntreFechas2(cons0, de, hoy);

            } catch (Exception ex) {
                Logger.getLogger(CuentaCorrienteAdministradorFrame.class
                        .getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "ERROR LEYENDO LA CUENTA CORRIENTE DEL CONSORCIO");
                return;
            }
            Long id1 = com.getId();
            if (cue != null) {
                if (!cue.get(0).getTipoComprobante().equals(11)) {
                    JOptionPane.showMessageDialog(this, "ERROR EL ULTIMO MOVIMIENTO DEL CONSORCIO DEBE SER REMITO X");
//                    for(CuentaCorrienteCliente cc3:cue){
//                        System.out.println(cc3.getComprobante().getLetra());
//                        System.out.println(cc3.getComprobante().getNumero());
//                        System.out.println(cc3.getDebe());
//                        System.out.println(cc3.getTipoComprobante());
//                    }
//                    System.exit(0);
                    return;
                }
                Long id2 = cue.get(0).getComprobante().getId();
                System.out.println(id2);
                System.out.println(id1);

                if (!id1.equals(id2)) {
                    JOptionPane.showMessageDialog(this, "ERROR NO ES EL ULTIMO MOVIMIENTO DEL CONSORCIO");
                    return;
                }
                if (com.getLetra().equals("X")) {
                    int a = JOptionPane.showConfirmDialog(this, "CONFIRME ELIMINAR REMITO X", "ATENCIÃN!!!", JOptionPane.YES_NO_OPTION);
                    if (a == 0) {
                        if (renglones != null && !renglones.isEmpty()) {
                            try {
                                new CuentaCorrienteClienteService().eliminarComprobanteAsignadoCompleto(cc2, cons0, renglones, com);

                            } catch (Exception ex) {
                                Logger.getLogger(CuentaCorrienteAdministradorFrame.class
                                        .getName()).log(Level.SEVERE, null, ex);
                                JOptionPane.showMessageDialog(this, "ERROR ELIMINANDO REMITO X");
                                return;
                            }
                            JOptionPane.showMessageDialog(this, "COMPROBANTE ELIMINADO");
                            llenarTabla();
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "ERROR NO ES UN REMITO X");
                    return;
                }
            } else {
                JOptionPane.showMessageDialog(this, "ERROR CON LA CUENTA CORRIENTE DEL CONSORCIO");
                return;
            }
        } else {
            JOptionPane.showMessageDialog(this, "ERROR Nro.1183 - DEBE SER REMITO X");
            return;
        }
    }

    private void verFacturasPendientes() {
        int row = combo.getSelectedIndex();
        if (row > 0) {
            Administrador adm = admins.get(row - 1);
            List<Comprobante> compros = new ArrayList<>();
            Boolean vacio = true;
            cons = null;
            try {
                cons = new ConsorcioService().getAllConsorciosActivosByAdministrador(adm);
            } catch (Exception ex) {
                Logger.getLogger(CuentaCorrienteAdministradorFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (cons != null && !cons.isEmpty()) {
                for (Consorcio co : cons) {
                    ivs = null;
                    try {
                        ivs = new ComprobanteService().getComprobantesImpagosByConsorcio(co);
                    } catch (Exception ex) {
                        Logger.getLogger(CuentaCorrienteAdministradorFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    if (ivs != null && !ivs.isEmpty()) {
                        for (Comprobante cs : ivs) {
                            compros.add(cs);
                        }
                    }
                }
                if (!vacio) {
                    VerComprobantesImpagosFrame vcif = new VerComprobantesImpagosFrame(compros, adm);
                    vcif.setVisible(true);
                    this.dispose();
                }
            }
        }
    }
}
