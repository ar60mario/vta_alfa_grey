/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.ventas.frame;

import ar.com.ventas.entities.Comprobante;
import ar.com.ventas.entities.Consorcio;
import ar.com.ventas.entities.CuentaCorrienteCliente;
import ar.com.ventas.entities.Domicilio;
import ar.com.ventas.entities.RcCo;
import ar.com.ventas.entities.Recibo;
import ar.com.ventas.estructuras.Constantes;
import ar.com.ventas.main.MainFrame;
import ar.com.ventas.services.ComprobanteService;
import ar.com.ventas.services.ConsorcioService;
import ar.com.ventas.services.CuentaCorrienteClienteService;
import ar.com.ventas.services.RcCoService;
import ar.com.ventas.services.ReciboService;
import ar.com.ventas.util.UtilFrame;
import java.io.File;
import java.io.IOException;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import jxl.Workbook;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;

/**
 *
 * @author argia
 */
public class RecibosFinDeAnioFrame extends javax.swing.JFrame {

    private List<Consorcio> consorcios;
    private SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    private DecimalFormat df = new DecimalFormat("#0.00");
    private DecimalFormat dfn = new DecimalFormat("#0");

    /**
     * Creates new form RecibosFinDeAnioFrame
     */
    public RecibosFinDeAnioFrame() {
        initComponents();
        getContentPane().setBackground(new java.awt.Color(Constantes.getR(), Constantes.getG(), Constantes.getB()));
        this.setLocationRelativeTo(null);
        limpiarCampos();
//        setExtendedState(6); // this.MAXIMIZED_BOTH
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        volverBtn = new javax.swing.JButton();
        goBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        excelBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("CUENTA CORRIENTE CONSORCIOS - RECIBOS A FIN DE AÑO");

        volverBtn.setText("VOLVER");
        volverBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverBtnActionPerformed(evt);
            }
        });

        goBtn.setText("CREAR");
        goBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goBtnActionPerformed(evt);
            }
        });

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CALLE", "NÚMERO", "DEBE", "HABER"
            }
        ));
        jScrollPane1.setViewportView(tabla);

        excelBtn.setText("EXCEL");
        excelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                excelBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 712, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(goBtn)
                        .addGap(18, 18, 18)
                        .addComponent(excelBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(volverBtn)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 470, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(volverBtn)
                    .addComponent(goBtn)
                    .addComponent(excelBtn))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void volverBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverBtnActionPerformed
        volver();
    }//GEN-LAST:event_volverBtnActionPerformed

    private void goBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goBtnActionPerformed
        crear();
    }//GEN-LAST:event_goBtnActionPerformed

    private void excelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excelBtnActionPerformed
        excel();
    }//GEN-LAST:event_excelBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RecibosFinDeAnioFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RecibosFinDeAnioFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RecibosFinDeAnioFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RecibosFinDeAnioFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RecibosFinDeAnioFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton excelBtn;
    private javax.swing.JButton goBtn;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabla;
    private javax.swing.JButton volverBtn;
    // End of variables declaration//GEN-END:variables

    private void volver() {
        MainFrame mf = new MainFrame();
        mf.setVisible(true);
        this.dispose();
    }

    private void limpiarCampos() {
        UtilFrame.limpiarTabla(tabla);
    }

    private void excel() {
        int rows = tabla.getRowCount();
//        int row = combo.getSelectedIndex();
//        Administrador adm = admins.get(row - 1);
//        String na = adm.getNombreAdministrador();
//        na = UtilFrame.getNombreSinEspacios(na);
        if (rows > 0) {
            String rutaArchivo = "c:/alfa_sistema/data/excel/recibos_fin_anio.xls";
            File archivo = new File(rutaArchivo);
            if (archivo.exists()) {
                archivo.delete();
            }
            try {
                archivo.createNewFile();
            } catch (IOException ex) {
                Logger.getLogger(AbonosPendientesFacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            WritableWorkbook libro = null;
            try {
                libro = Workbook.createWorkbook(archivo);
            } catch (IOException ex) {
                Logger.getLogger(AbonosPendientesFacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            WritableSheet hoja1 = libro.createSheet("RECIBOS AL 31.12.2023", 0);
            int y = 2;
            try {
                hoja1.addCell(new jxl.write.Label(0, 0, "ALFA - SISTEMAS - RECIBOS"));
                hoja1.addCell(new jxl.write.Label(0, 1, "CALLE"));
                hoja1.addCell(new jxl.write.Label(1, 1, "NUMERO"));
                hoja1.addCell(new jxl.write.Label(2, 1, "DEBE"));
                hoja1.addCell(new jxl.write.Label(3, 1, "HABER"));
//                hoja1.addCell(new jxl.write.Label(4, 1, "NUM.CUOTA"));
//                hoja1.addCell(new jxl.write.Label(5, 1, "TITULAR"));
//                hoja1.addCell(new jxl.write.Label(6, 1, "DEBE"));
//                hoja1.addCell(new jxl.write.Label(7, 1, "HABER"));
//                hoja1.addCell(new jxl.write.Label(8, 1, "SALDO"));
            } catch (WriteException ex) {
                Logger.getLogger(AbonosPendientesFacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Error configurando Excel");
            }
            for (int i = 0; i < rows; i++) {
                String con = "";
                if (tabla.getValueAt(i, 0) != null) {
                    con = tabla.getValueAt(i, 0).toString(); //renglon, columna
                }
                String fech = tabla.getValueAt(i, 1).toString();
                Double imp1 = 0.0;
                if (tabla.getValueAt(i, 2) != null) {
                    if (!tabla.getValueAt(i, 2).toString().isEmpty()) {
                        imp1 = Double.valueOf(tabla.getValueAt(i, 2).toString().replace(",", "."));
                    }
                }
                Double imp2 = 0.0;
                if (tabla.getValueAt(i, 3) != null) {
                    if (!tabla.getValueAt(i, 3).toString().isEmpty()) {
                        imp2 = Double.valueOf(tabla.getValueAt(i, 3).toString().replace(",", "."));
                    }
                }
//                String n_cuo = "";
//                String titu = "";
//                if (tabla.getValueAt(i, 4) != null) {
//                    n_cuo = tabla.getValueAt(i, 4).toString();
//                }
//                if (tabla.getValueAt(i, 5) != null) {
//                    titu = tabla.getValueAt(i, 5).toString();
//                }
//                Double nd = Double.valueOf(tabla.getValueAt(i, 6).toString().replace(",", "."));
//                Double nh = Double.valueOf(tabla.getValueAt(i, 7).toString().replace(",", "."));
//                Double ns = Double.valueOf(tabla.getValueAt(i, 8).toString().replace(",", "."));
                try {
                    hoja1.addCell(new jxl.write.Label(0, y, con));
                    hoja1.addCell(new jxl.write.Label(1, y, fech));
                    hoja1.addCell(new jxl.write.Number(2, y, imp1));
                    hoja1.addCell(new jxl.write.Number(3, y, imp2));
//                    hoja1.addCell(new jxl.write.Label(4, y, n_cuo));
//                    hoja1.addCell(new jxl.write.Label(5, y, titu));
//                    hoja1.addCell(new jxl.write.Number(6, y, nd));
//                    hoja1.addCell(new jxl.write.Number(7, y, nh));
//                    hoja1.addCell(new jxl.write.Number(8, y, ns));

                    y += 1;
                } catch (WriteException ex) {
                    Logger.getLogger(AbonosPendientesFacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, "Error configurando Excel");
                }
            }
            try {
                libro.write();
                libro.close();
            } catch (IOException ex) {
                Logger.getLogger(AbonosPendientesFacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Error: 365");
                return;
            } catch (WriteException ex) {
                Logger.getLogger(AbonosPendientesFacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Error: 366");
                return;
            }
            JOptionPane.showMessageDialog(this, "Excel creado correctamente");

        }
    }

    private void crear() {
        consorcios = null;
        try {
            consorcios = new ConsorcioService().getAllConsorciosActivos();
        } catch (Exception ex) {
            Logger.getLogger(RecibosFinDeAnioFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (consorcios != null && !consorcios.isEmpty()) {
            Date de = new Date();
            Date al = new Date();
            Date hoy = new Date();
            try {
                de = sdf.parse("01/01/2023");
                al = sdf.parse("31/12/2023");
            } catch (ParseException ex) {
                Logger.getLogger(RecibosFinDeAnioFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
            Integer nro;
            try {
                nro = new ReciboService().getCodigoSiguiente();
            } catch (Exception ex) {
//                Logger.getLogger(RecibosFinDeAnioFrame.class.getName()).log(Level.SEVERE, null, ex);
                nro = 0;
            }
            for (Consorcio co : consorcios) {
                List<CuentaCorrienteCliente> ccc;
                try {
                    ccc = new CuentaCorrienteClienteService().getCuentaCorrienteClienteByClienteEntreFechas(co, de, al);
                } catch (Exception ex) {
                    Logger.getLogger(RecibosFinDeAnioFrame.class.getName()).log(Level.SEVERE, null, ex);
                    continue;
                }
                if (!ccc.isEmpty()) {
//                    Double saldo = 0.0;
                    for (CuentaCorrienteCliente cc : ccc) {
//                        saldo += cc.getDebe() - cc.getHaber();
//                        String str1 = df.format(saldo);
//                        Double dbl1 = Double.valueOf(str1.replace(",", "."));
                        cc.setSaldo(0.0);
                        try {
                            new CuentaCorrienteClienteService().updateCuentaCorrienteCliente(cc);
                        } catch (Exception ex) {
                            Logger.getLogger(RecibosFinDeAnioFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        Comprobante comp = null;
                        if (cc.getTipoComprobante().equals(11)) {
                            comp = cc.getComprobante();
                            comp.setPagado(comp.getTotal());
                            Double impo = comp.getTotal();
                            try {
                                new ComprobanteService().updateComprobante(comp);
                            } catch (Exception ex) {
                                Logger.getLogger(RecibosFinDeAnioFrame.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            Recibo rc = new Recibo();
                            rc.setConsorcio(co);
                            rc.setFecha(al);
                            rc.setImporte(impo);
                            rc.setReferencia("CIERRE DE AÑO 2023 - FC: " + dfn.format(comp.getNumero()));
                            rc.setAplicado(impo);
                            nro += 1;
                            rc.setNumero(nro);
                            try {
                                rc = new ReciboService().saveRecibo(rc);
                            } catch (Exception ex) {
                                Logger.getLogger(RecibosFinDeAnioFrame.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            RcCo rc_co = new RcCo();
                            rc_co.setRecibo(rc);
                            rc_co.setComprobante(comp);
                            rc_co.setTotalComprobante(impo);
                            rc_co.setTotalRecibo(impo);
                            try {
                                new RcCoService().saveRecibo(rc_co);
                            } catch (Exception ex) {
                                Logger.getLogger(RecibosFinDeAnioFrame.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            CuentaCorrienteCliente cc2 = new CuentaCorrienteCliente();
                            cc2.setComprobante(null);
                            cc2.setConsorcio(co);
                            cc2.setDebe(0.00);
                            cc2.setFecha(al);
                            cc2.setHaber(impo);
                            cc2.setRecibo(rc);
                            cc2.setSaldo(0.00);
                            cc2.setTipoComprobante(14);
                            try {
                                new CuentaCorrienteClienteService().saveCuentaCorrienteCliente(cc2);
                            } catch (Exception ex) {
                                Logger.getLogger(RecibosFinDeAnioFrame.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            co.setSaldo(0.00);
                            try {
                                new ConsorcioService().updateConsorcio(co);
                            } catch (Exception ex) {
                                Logger.getLogger(RecibosFinDeAnioFrame.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            Domicilio dm = co.getDomicilio();
                            Object o[] = new Object[4];
                            o[0] = dm.getCalle();
                            o[1] = dm.getNumero();
                            o[3] = df.format(0);
                            tbl.addRow(o);
                        }
                    }
                }
            }

            for (Consorcio co : consorcios) {
                List<CuentaCorrienteCliente> ccc;
                try {
                    ccc = new CuentaCorrienteClienteService().getCuentaCorrienteClienteByClienteEntreFechas(co, de, hoy);
                } catch (Exception ex) {
                    Logger.getLogger(RecibosFinDeAnioFrame.class.getName()).log(Level.SEVERE, null, ex);
                    continue;
                }
                if (!ccc.isEmpty()) {
                    Double saldo = 0.0;
                    Double dbl1 = 0.0;
                    for (CuentaCorrienteCliente cc : ccc) {
                        saldo += cc.getDebe() - cc.getHaber();
                        String str1 = df.format(saldo);
                        dbl1 = Double.valueOf(str1.replace(",", "."));
                        cc.setSaldo(dbl1);
                        try {
                            new CuentaCorrienteClienteService().updateCuentaCorrienteCliente(cc);
                        } catch (Exception ex) {
                            Logger.getLogger(RecibosFinDeAnioFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    co.setSaldo(dbl1);
                    try {
                        new ConsorcioService().updateConsorcio(co);
                    } catch (Exception ex) {
                        Logger.getLogger(RecibosFinDeAnioFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
            tabla.setModel(tbl);
        }
    }
}
