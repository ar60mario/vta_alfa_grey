/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.ventas.frame;

import ar.com.ventas.entities.Abono;
import ar.com.ventas.entities.AbonoFactura;
import ar.com.ventas.entities.Administrador;
import ar.com.ventas.entities.Comprobante;
import ar.com.ventas.entities.ComprobanteNumerosIniciales;
import ar.com.ventas.entities.Consorcio;
import ar.com.ventas.entities.CuentaCorrienteCliente;
import ar.com.ventas.entities.CuotaFactura;
import ar.com.ventas.entities.Domicilio;
import ar.com.ventas.entities.ComprobanteRenglones;
import ar.com.ventas.entities.NuevoCae;
import ar.com.ventas.entities.Persona;
import ar.com.ventas.entities.RenglonAbono;
import ar.com.ventas.entities.Rubro;
import ar.com.ventas.entities.TicketTime;
import ar.com.ventas.entities.TicketToken;
import ar.com.ventas.entities.TipoFactura;
import ar.com.ventas.entities.TitularCuit;
import ar.com.ventas.estructuras.Constantes;
import ar.com.ventas.estructuras.Mes;
import ar.com.ventas.main.MainFrame;
import ar.com.ventas.services.AbonoFacturaService;
import ar.com.ventas.services.AbonoService;
import ar.com.ventas.services.AdministradorService;
import ar.com.ventas.services.ComprobanteNumerosInicialesService;
import ar.com.ventas.services.ComprobanteRenglonesService;
import ar.com.ventas.services.ComprobanteService;
import ar.com.ventas.services.ConsorcioService;
import ar.com.ventas.services.CuentaCorrienteClienteService;
import ar.com.ventas.services.IvaVentasService;
import ar.com.ventas.services.RenglonAbonoService;
import ar.com.ventas.services.RubroService;
import ar.com.ventas.services.TicketTimeService;
import ar.com.ventas.services.TitularCuitService;
import ar.com.ventas.util.PDFBuilder;
import ar.com.ventas.util.UtilAbonos;
import ar.com.ventas.util.UtilAfip;
import ar.com.ventas.util.UtilFactura;
import ar.com.ventas.util.UtilFrame;
import com.itextpdf.text.DocumentException;
import java.io.File;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Mario
 */
public class FacturarAbonosFrame extends javax.swing.JFrame {

    private List<Rubro> rubros;
    private List<Abono> abonos;
    private List<TitularCuit> titulares;
    private List<TipoFactura> tipos;
    private List<Administrador> administraciones;
    private SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    private DecimalFormat df = new DecimalFormat("#0.00");
    private Double saldoTitular;

    private Date fechaCae = new Date();
    private Long cae;

    private final int tst = 0; //1 esta en test

    /**
     * Creates new form FacturarAbonosFrame
     */
    public FacturarAbonosFrame() {
        initComponents();
        getContentPane().setBackground(new java.awt.Color(Constantes.getR(), Constantes.getG(), Constantes.getB()));
//        this.setLocationRelativeTo(null);
        setExtendedState(6); // this.MAXIMIZED_BOTH
        limpiarCampos();
        llenarCombo();
//go();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        comboR = new javax.swing.JComboBox<>();
        volverBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        generarFacturasBtn = new javax.swing.JButton();
        sacarDeListaBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        comboA = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        filtroTxt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        totalImporteTxt = new javax.swing.JTextField();
        filtroTitularTxt = new javax.swing.JTextField();
        comboT = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        fechaTxt = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabla2 = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        totalImporte2Txt = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        deTxt = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        alTxt = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        vtoTxt = new javax.swing.JTextField();
        consumidorFinalChk = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("FACTURAR ABONOS POR RUBRO");

        jLabel1.setText("RUBROS:");

        comboR.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboRActionPerformed(evt);
            }
        });
        comboR.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                comboRKeyPressed(evt);
            }
        });

        volverBtn.setText("Volver");
        volverBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverBtnActionPerformed(evt);
            }
        });

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CONSORCIO", "IMPORTE", "CUOTA", "CUOTAS", "IMP.CUOTA", "TIPO.FACT."
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabla);

        generarFacturasBtn.setText("Generar Facturas");
        generarFacturasBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generarFacturasBtnActionPerformed(evt);
            }
        });

        sacarDeListaBtn.setText("Sacar de Lista");
        sacarDeListaBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sacarDeListaBtnActionPerformed(evt);
            }
        });

        jLabel3.setText("ADMINISTRACION:");

        comboA.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboAActionPerformed(evt);
            }
        });
        comboA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                comboAKeyPressed(evt);
            }
        });

        jLabel4.setText("FILTRO ADMIN:");

        filtroTxt.setText("FILTRO ADM");
        filtroTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                filtroTxtKeyPressed(evt);
            }
        });

        jLabel2.setText("TOTAL IMPORTES:");

        jLabel5.setText("FILTRO TITULARES:");

        jLabel6.setText("TITULARES:");

        totalImporteTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        totalImporteTxt.setText("TOTAL IMPORTE");

        filtroTitularTxt.setText("FILTRO");
        filtroTitularTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                filtroTitularTxtKeyPressed(evt);
            }
        });

        comboT.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboTActionPerformed(evt);
            }
        });
        comboT.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                comboTKeyPressed(evt);
            }
        });

        jLabel7.setText("FECHA FACTURA ABONOS:");

        fechaTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        fechaTxt.setText("FECHA");
        fechaTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fechaTxtKeyPressed(evt);
            }
        });

        tabla2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "TITULAR", "DISPONIBLE", "ABONOS", "SALDO"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tabla2);

        jLabel9.setText("Total 2:");

        totalImporte2Txt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        totalImporte2Txt.setText("TOTAL IMPORTE 2");

        jLabel10.setText("DESDE:");

        deTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        deTxt.setText("DESDE");
        deTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                deTxtKeyPressed(evt);
            }
        });

        jLabel11.setText("HASTA:");

        alTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        alTxt.setText("HASTA");
        alTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                alTxtKeyPressed(evt);
            }
        });

        jLabel12.setText("VENCIMIENTO:");

        vtoTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        vtoTxt.setText("VENCIM");
        vtoTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                vtoTxtKeyPressed(evt);
            }
        });

        consumidorFinalChk.setText("Como Consumidor Final");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(generarFacturasBtn)
                        .addGap(18, 18, 18)
                        .addComponent(sacarDeListaBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(volverBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(38, 38, 38)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(comboT, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 402, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(filtroTitularTxt, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(53, 53, 53)
                                        .addComponent(totalImporteTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel9)
                                        .addGap(18, 18, 18)
                                        .addComponent(totalImporte2Txt, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 891, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addGap(18, 18, 18)
                                .addComponent(fechaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(deTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(alTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(vtoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel3)
                                        .addComponent(jLabel4)
                                        .addComponent(jLabel1))
                                    .addGap(18, 18, 18)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(comboA, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(filtroTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(0, 275, Short.MAX_VALUE)))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(comboR, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(consumidorFinalChk))))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 949, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 15, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(filtroTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(comboA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(comboR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(consumidorFinalChk))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(totalImporteTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(totalImporte2Txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(fechaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(deTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(alTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(vtoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(filtroTitularTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(comboT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(volverBtn)
                    .addComponent(generarFacturasBtn)
                    .addComponent(sacarDeListaBtn))
                .addGap(14, 14, 14))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void volverBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverBtnActionPerformed
        volver();
    }//GEN-LAST:event_volverBtnActionPerformed

    private void generarFacturasBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generarFacturasBtnActionPerformed
        int x = 0;
        int lineas = tabla.getRowCount();
        for (int y = 0; y < lineas; y++) {
            String txt = tabla.getValueAt(y, 2).toString();
            if (txt.equals("VENCIDO")) {
                JOptionPane.showMessageDialog(this, "NO SE PUEDEN GENERAR HAY ABONOS VENCIDOS\nQUITELOS DE LA LISTA");
                return;
            }
        }
        generarFacturas();
    }//GEN-LAST:event_generarFacturasBtnActionPerformed

    private void sacarDeListaBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sacarDeListaBtnActionPerformed
        DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
        int cantidadSeleccionada = tabla.getSelectedRowCount();
//        int cantidadTabla = tabla.getRowCount();
        int a[] = tabla.getSelectedRows();
        if (cantidadSeleccionada < 1) {
            JOptionPane.showMessageDialog(this, "DEBE SELECCIONAR UN CONSORCIO PARA SACER");
            return;
        }
        for (int n = cantidadSeleccionada - 1; n > -1; n--) {
            tbl.removeRow(a[n]);
            abonos.remove(a[n]);
        }
        llenarTabla(abonos);
    }//GEN-LAST:event_sacarDeListaBtnActionPerformed

    private void filtroTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_filtroTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            if (!filtroTxt.getText().isEmpty()) {
                llenarComboA();
            }
        }
    }//GEN-LAST:event_filtroTxtKeyPressed

    private void comboAKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comboAKeyPressed
        if (evt.getKeyCode() == 10) {
            int rowA = comboA.getSelectedIndex();
            if (rowA > 0) {
                comboR.addFocusListener(null);
                comboR.showPopup();
                comboR.requestFocus();
            }
        }
    }//GEN-LAST:event_comboAKeyPressed

    private void comboRKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comboRKeyPressed
        int rowR = comboR.getSelectedIndex();
        if (rowR > 0) {
            if (evt.getKeyCode() == 10) {
                Rubro ru = rubros.get(rowR - 1);
                buscarAbonosPendientesDeFacturar(ru);
            }
        }
    }//GEN-LAST:event_comboRKeyPressed

    private void filtroTitularTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_filtroTitularTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            if (!filtroTitularTxt.getText().isEmpty()) {
                llenarComboT();
            }
        }
    }//GEN-LAST:event_filtroTitularTxtKeyPressed

    private void fechaTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fechaTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            String fe = fechaTxt.getText();
            int largo = fe.length();
            if (largo == 10) {
                deTxt.requestFocus();
            } else {
                if (largo > 10) {
                    JOptionPane.showMessageDialog(this, "ERROR EN LARGO DE FECHA");
                    return;
                }
            }
            fe = UtilFrame.fecha(fe);
            fechaTxt.setText(fe);
        }
    }//GEN-LAST:event_fechaTxtKeyPressed

    private void comboTKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comboTKeyPressed
        if (evt.getKeyCode() == 10) {
            int row = comboT.getSelectedIndex();
            llenarTabla2(row);
        }
    }//GEN-LAST:event_comboTKeyPressed

    private void comboTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboTActionPerformed
        if (evt.getModifiers() == 16) {
            int row = comboT.getSelectedIndex();
            llenarTabla2(row);
        }
    }//GEN-LAST:event_comboTActionPerformed

    private void deTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_deTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            String fe = deTxt.getText();
            int largo = fe.length();
            if (largo == 10) {
                alTxt.requestFocus();
            } else {
                if (largo > 10) {
                    JOptionPane.showMessageDialog(this, "ERROR EN LARGO DE FECHA");
                    return;
                }
            }
            fe = UtilFrame.getFechaPrimero(fe);
            deTxt.setText(fe);
        }
    }//GEN-LAST:event_deTxtKeyPressed

    private void alTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_alTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            String fe = alTxt.getText();
            int largo = fe.length();
            if (largo == 10) {
                vtoTxt.requestFocus();
            } else {
                if (largo > 10) {
                    JOptionPane.showMessageDialog(this, "ERROR EN LARGO DE FECHA");
                    return;
                }
            }
            fe = UtilFrame.getFechaFinMes(fe);
            alTxt.setText(fe);
        }
    }//GEN-LAST:event_alTxtKeyPressed

    private void vtoTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_vtoTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            String fe = vtoTxt.getText();
            int largo = fe.length();
            if (largo == 10) {
                filtroTitularTxt.requestFocus();
            } else {
                if (largo > 10) {
                    JOptionPane.showMessageDialog(this, "ERROR EN LARGO DE FECHA");
                    return;
                }
            }
            fe = UtilFrame.getFechaFinMes(fe);
            vtoTxt.setText(fe);
        }
    }//GEN-LAST:event_vtoTxtKeyPressed

    private void comboAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboAActionPerformed
        if (evt.getModifiers() == 16) {
            int rowA = comboA.getSelectedIndex();
            if (rowA > 0) {
                comboR.addFocusListener(null);
                comboR.showPopup();
                comboR.requestFocus();
            }
        }
    }//GEN-LAST:event_comboAActionPerformed

    private void comboRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboRActionPerformed
        int rowR = comboR.getSelectedIndex();
        if (rowR > 0) {
            if (evt.getModifiers() == 16) {
                Rubro ru = rubros.get(rowR - 1);
                buscarAbonosPendientesDeFacturar(ru);
            }
        }
    }//GEN-LAST:event_comboRActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FacturarAbonosFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FacturarAbonosFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FacturarAbonosFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FacturarAbonosFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FacturarAbonosFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField alTxt;
    private javax.swing.JComboBox<String> comboA;
    private javax.swing.JComboBox<String> comboR;
    private javax.swing.JComboBox<String> comboT;
    private javax.swing.JCheckBox consumidorFinalChk;
    private javax.swing.JTextField deTxt;
    private javax.swing.JTextField fechaTxt;
    private javax.swing.JTextField filtroTitularTxt;
    private javax.swing.JTextField filtroTxt;
    private javax.swing.JButton generarFacturasBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton sacarDeListaBtn;
    private javax.swing.JTable tabla;
    private javax.swing.JTable tabla2;
    private javax.swing.JTextField totalImporte2Txt;
    private javax.swing.JTextField totalImporteTxt;
    private javax.swing.JButton volverBtn;
    private javax.swing.JTextField vtoTxt;
    // End of variables declaration//GEN-END:variables

    private void volver() {
        MainFrame mf = new MainFrame();
        mf.setVisible(true);
        this.dispose();
    }

    private void llenarCombo() {
        comboR.removeAllItems();
        comboR.addItem("");
        rubros = null;
        try {
            rubros = new RubroService().getAllRubrosAbonosActivos();
        } catch (Exception ex) {
            Logger.getLogger(FacturarAbonosFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (rubros != null && !rubros.isEmpty()) {
            for (Rubro ru : rubros) {
                comboR.addItem(ru.getDetalle());
            }
        }
    }

    private void buscarAbonosPendientesDeFacturar(Rubro r) {
        int rowA = comboA.getSelectedIndex();
        if (rowA > 0) {
            Administrador adm = administraciones.get(rowA - 1);
            abonos = null;
            try {
                abonos = new AbonoService().getAllAbonosActivosOrdenadoByRubroPendientesFacturar(r, adm);
            } catch (Exception ex) {
                Logger.getLogger(FacturarAbonosFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            for (Abono ab : abonos) {
                System.out.println(ab.getConsorcio().getDomicilio().getCalle() + " "
                        + ab.getConsorcio().getDomicilio().getNumero());
                System.out.println(ab.getTipoFacturacion());
            }
//            System.exit(0);
            llenarTabla(abonos);
        }
    }

    private void generarFacturas() {
        if (validar()) {
            int rowT = comboT.getSelectedIndex();
            int rowR = comboR.getSelectedIndex();
            Date fecha = new Date();
            Date fecha_periodo_dde = new Date();
            Date fecha_periodo_hta = new Date();
            Date fecha_vencim = new Date();
            try {
                fecha = sdf.parse(fechaTxt.getText());
                fecha_periodo_dde = sdf.parse(deTxt.getText());
                fecha_periodo_hta = sdf.parse(alTxt.getText());
                fecha_vencim = sdf.parse(vtoTxt.getText());
            } catch (ParseException ex) {
                Logger.getLogger(FacturarAbonosFrame.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "ERROR EN FECHA");
                fechaTxt.requestFocus();
                return;
            }
            TitularCuit titular = titulares.get(rowT - 1);
            Rubro rubro = rubros.get(rowR - 1);
            int x_comprobante;
            ComprobanteNumerosIniciales cni = null;
            try {
                cni = new ComprobanteNumerosInicialesService().getNumeroInicialByTitular(titular);
                if (cni == null) {
                    cni = new ComprobanteNumerosIniciales();
                    cni.setTitular(titular);
                    cni.setNroCpbte(1);
                    x_comprobante = 1;
                    cni = new ComprobanteNumerosInicialesService().saveImporte(cni);
                }
            } catch (Exception ex) {
                Logger.getLogger(FacturarAbonosFrame.class.getName()).log(Level.SEVERE, null, ex);
                return;
            }
            x_comprobante = cni.getNroCpbte() + 1;
            for (Abono ab : abonos) {
                Consorcio consorcio = ab.getConsorcio();
                Integer cta_facturada = ab.getCuotaFacturada();
                if (cta_facturada == null) {
                    cta_facturada = 0;
                }
                cta_facturada += 1;
                Double saldo_cliente;
                if (consorcio.getSaldo() != null) {
                    saldo_cliente = consorcio.getSaldo();
                } else {
                    saldo_cliente = 0.0;
                }
                Domicilio dm_cliente = ab.getConsorcio().getDomicilio();
                String calle_cliente = dm_cliente.getCalle()
                        + " " + dm_cliente.getNumero()
                        + " " + dm_cliente.getPisoDto();
                String cp_cliente = dm_cliente.getCodigoPostal()
                        + " " + dm_cliente.getLocalidad();
                String prov_cliente = dm_cliente.getProvincia();
                Domicilio dm_titular = titular.getDomicilio();
                String calle_titular = dm_titular.getCalle()
                        + " " + dm_titular.getNumero();
                String cp_titular = dm_titular.getCodigoPostal()
                        + " " + dm_titular.getLocalidad();
                String prov_titular = dm_titular.getProvincia();
                Integer tipoFact = ab.getTipoFacturacion();
                Double importe_abono = ab.getImporte() / ab.getCuotas();
                System.out.println(saldo_cliente);
                System.out.println(importe_abono);
                saldo_cliente += importe_abono;
//                Long n_cae = 1L;
                if (tipoFact.equals(1)) { // 1 Factura varios Recibos

                }
                if (tipoFact.equals(2)) { // 1 Factura por Mes
                    int ps = 3; // 3 es producto y servicio
                    ab.setPendiente(false);

                    List<RenglonAbono> ra = null;
                    try {
                        ra = new RenglonAbonoService().getRenglonAbonosByAbono(ab);
                    } catch (Exception ex) {
                        Logger.getLogger(FacturarAbonosFrame.class.getName()).log(Level.SEVERE, null, ex);
                        return;
                    }
                    String resultado = UtilFactura.saveFactura(consorcio, titular,
                            ab, ra, fecha, fecha_periodo_dde, fecha_periodo_hta, fecha_vencim, ps);

                    System.out.println(resultado);
                }
                if (tipoFact.equals(3)) { // 1 Recibo por Mes
                    cni.setNroCpbte(x_comprobante);
                    Comprobante com = new Comprobante();
                    com.setCae(1L);
                    com.setCalleNroPisoDtoCliente(calle_cliente);
                    com.setCantidadCuotas(ab.getCuotas());
                    com.setCodigoComprobante(0);
                    com.setCodigoPostalAndLocalidadCliente(cp_cliente);
                    com.setCodigoPostalAndLocalidadTitular(cp_titular);
                    com.setCuitCliente(consorcio.getCuit());
                    com.setCuitTitular(titular.getCuit());
                    com.setCuotasPagadas(cta_facturada);
                    com.setDomicilioTitular(calle_titular);
                    com.setFecha(fecha);
                    com.setFechaInicioActividades(titular.getFechaInicioActividades());
                    com.setFechaPeriodoDesde(fecha_periodo_dde);
                    com.setFechaPeriodoHasta(fecha_periodo_hta);
                    com.setFechaVencimientoCae(fecha);
                    com.setFechaVencimientoPago(fecha_vencim);
                    com.setGravado(importe_abono);
                    com.setIibb(titular.getIibb());
                    com.setIva(0.0);
                    com.setLetra("X");
                    com.setLetraComprobanteAsociado("");
                    com.setNumero(x_comprobante);
                    com.setNumeroComprobanteAsociado(0);
                    com.setPagado(0.0);
                    String textoP = "";
                    if (ab.getTextoPeriodo().equals(0)) {
                        textoP = UtilFrame.mesAnteriorEnLetras(new Date());
                    } else {
                        textoP = UtilFrame.mesActualEnLetras(new Date());
                    }
                    com.setPeriodo(textoP);

                    com.setPdfGenerado(false);
                    com.setProvinciaCliente(prov_cliente);
                    com.setProvinciaTitular(prov_titular);
                    com.setRazonSocialCliente(consorcio.getNombre());
                    com.setRazonSocialTitular(titular.getPersona().getApellidoNombre());
                    com.setRubro(rubro);
                    com.setSucursal(titular.getSucursal());
                    com.setSucursalComprobanteAsociado(0);
                    com.setTexto1("");
                    com.setTexto2("");

                    com.setOriginal(true);
                    com.setId_original(0L);

                    com.setTipoComprobanteAsociado(0);
                    com.setTipoDocumento(consorcio.getDocumentoTipo());
                    com.setTipoEmision(tipoFact);
                    com.setTipoInscripcion(consorcio.getTipoInscripcion().toString());
                    com.setTotal(importe_abono);
                    List<RenglonAbono> renglones = null;
                    try {
                        renglones = new RenglonAbonoService().getRenglonAbonosByAbono(ab);
                    } catch (Exception ex) {
                        Logger.getLogger(FacturarAbonosFrame.class.getName()).log(Level.SEVERE, null, ex);
                        JOptionPane.showMessageDialog(this, "ERROR EN ABONO");
                        return;
                    }
                    List<ComprobanteRenglones> renglonesComprob = new ArrayList<>();
                    for (RenglonAbono ra : renglones) {
                        ComprobanteRenglones cr = new ComprobanteRenglones();
                        cr.setComprobante(com);
                        cr.setDetalle(ra.getTexto());
                        cr.setImporte(cr.getImporte());
                        renglonesComprob.add(cr);
                    }
                    AbonoFactura af = new AbonoFactura();
                    af.setActivo(true);
                    CuentaCorrienteCliente cccli = new CuentaCorrienteCliente();
                    cccli.setComprobante(com);
                    cccli.setConsorcio(consorcio);
                    cccli.setDebe(importe_abono);
                    cccli.setFecha(fecha);
                    cccli.setHaber(0.0);
                    cccli.setRecibo(null);
                    cccli.setSaldo(saldo_cliente);
                    cccli.setTipoComprobante(tipoFact);
                    consorcio.setSaldo(saldo_cliente);
                    ab.setPendiente(false);
                    ab.setCuotaFacturada(cta_facturada);
                    try {
                        cni = new ComprobanteNumerosInicialesService().updateImporte(cni);
                        com = new ComprobanteService().saveComprobante(com);
                        for (ComprobanteRenglones co_re : renglonesComprob) {
                            co_re.setComprobante(com);
                            new ComprobanteRenglonesService().saveRenglon(co_re);
                        }
                        cccli.setComprobante(com);
                        new CuentaCorrienteClienteService().saveCuentaCorrienteCliente(cccli);
                        new ConsorcioService().updateConsorcio(consorcio);
                        new AbonoService().updateAbono(ab);
                        af.setAbono(ab);
                        af.setComprobante(com);
                        new AbonoFacturaService().saveAbonoFactura(af);
//                        UtilAbonos.grabarComprobante(nuevoCae, consorcio, titular, fecha, ab);
                    } catch (Exception ex) {
                        Logger.getLogger(FacturarAbonosFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                if (tipoFact.equals(4)) { // Factura Unica reparacion

                }
                if (tipoFact.equals(5)) { // Recibo Unico Reparacion

                }
            }
            JOptionPane.showMessageDialog(this, "FACTURACION COMPLETADA");
            volver();

        }
//                    if (ab.getTipoFacturacion() == 1) { // 1- 1Fc varios Rc
//                        nuevoCae = new NuevoCae();
//                        nuevoCae.setCae(12345678901234L);
//                        nuevoCae.setEstado("A");
//                        nuevoCae.setFecha(new Date());
//                        nuevoCae.setFechaPeriodoDesde(new Date());
//                        nuevoCae.setFechaPeriodoHasta(new Date());
//                        nuevoCae.setFechaVencimiento(new Date());
//                        nuevoCae.setFechaVencimientoPago(new Date());
//                        nuevoCae.setNumero(501);
//                        nuevoCae.setSucursal(100);
//                        String estado = nuevoCae.getEstado();
//                        if (estado.equals("A")) {
//                            UtilAbonos.grabarComprobante(nuevoCae, consorcio, titular, fecha, ab);
////                        generarPdf(nuevoCae, iv, titular, consorcio, ab.getImporte());
//                        } else {
////            grabar comprobante temporal para modificar.
//                        }
////                    }
//                        ab.setPendiente(false);
//                        try {
//                            new AbonoService().updateAbono(ab);
//                        } catch (Exception ex) {
//                            Logger.getLogger(FacturarAbonosFrame.class.getName()).log(Level.SEVERE, null, ex);
//                        }
//                    }
//                    if (ab.getTipoFacturacion() == 2) { // 2- 1Fc x Mes
//                        nuevoCae = new NuevoCae();
//                        nuevoCae.setCae(12345678901234L);
//                        nuevoCae.setEstado("A");
//                        nuevoCae.setFecha(new Date());
//                        nuevoCae.setFechaPeriodoDesde(new Date());
//                        nuevoCae.setFechaPeriodoHasta(new Date());
//                        nuevoCae.setFechaVencimiento(new Date());
//                        nuevoCae.setFechaVencimientoPago(new Date());
//                        nuevoCae.setNumero(501);
//                        nuevoCae.setSucursal(100);
////                        }
//                        String estado = nuevoCae.getEstado();
//                        if (estado.equals("A")) {
//                            UtilAbonos.grabarComprobantePorMes(nuevoCae, consorcio,
//                                    titular, fecha, ab);
////                        generarPdf(nuevoCae, iv, titular, consorcio, ab.getImporte());
//                        } else {
////            grabar comprobante temporal para modificar.
//                        }
////                    }
//                        ab.setPendiente(false);
//                        try {
//                            new AbonoService().updateAbono(ab);
//                        } catch (Exception ex) {
//                            Logger.getLogger(FacturarAbonosFrame.class.getName()).log(Level.SEVERE, null, ex);
//                        }
//                    }
//                    if (ab.getTipoFacturacion() == 3) { // 3- 1Rc x Mes
//
////                            Comprobante iv = grabarComprobante(nuevoCae, consorcio, titular, fecha, ab.getCuotas(), ab.getImporte());
//                        ab.setPendiente(false);
//                        try {
//                            new AbonoService().updateAbono(ab);
//                        } catch (Exception ex) {
//                            Logger.getLogger(FacturarAbonosFrame.class.getName()).log(Level.SEVERE, null, ex);
//                        }
//                    }
//                    if (ab.getTipoFacturacion() == 4) { //4- Factura Unica
//
//                    }
//                    CuentaCorrienteCliente ccc = new CuentaCorrienteCliente();
////                    ccc.setComprobante(comprobante);
//                    ccc.setConsorcio(consorcio);
//                    ccc.setDebe(saldoTitular);
//                    ccc.setFecha(fecha);
//                    ccc.setHaber(saldoTitular);
////                    ccc.setRecibo(recibo);
//                    ccc.setSaldo(saldoTitular);
//                    ccc.setTipoComprobante(SOMEBITS);
//                    try {
//                        new CuentaCorrienteClienteService().saveCuentaCorrienteCliente(ccc);
//                    } catch (Exception ex) {
//                        Logger.getLogger(FacturarAbonosFrame.class.getName()).log(Level.SEVERE, null, ex);
//                    }

//                    try {
//                        tkt = new TicketTimeService().getTicketByTitular(titular);
//                    } catch (Exception ex) {
//                        Logger.getLogger(FacturaReparacionFrame.class.getName()).log(Level.SEVERE, null, ex);
//                        return;
//                    }
//                System.out.println(titular);
//                System.out.println(fecha);
//                System.out.println(hora);
//                System.out.println(minutos);
//                System.out.println(segundos);
//                System.exit(0);
//                    if (tkt != null) {
//                    tito = UtilAfip.solicitarTicket(titular, fecha, hora, minutos, segundos);
//                        nuevoCae = UtilAfip.enviarFacturaAfip2(titular, ab.getConsorcio(), ab.getImporte(), fecha, tkt);
//                    } else {
//                        tkt = new TicketTime();
//                        tkt.setTitular(titular);
//                        tkt.setFecha(fecha);
//                        tkt.setHora(hora);
//                        tkt.setMinuto(minutos);
//                        tkt.setSegundo(segundos);
//                        try {
//                            tkt = new TicketTimeService().saveTicket(tkt);
//                        } catch (Exception ex) {
//                            Logger.getLogger(FacturaReparacionFrame.class.getName()).log(Level.SEVERE, null, ex);
//                            JOptionPane.showMessageDialog(this, "ERROR Nro.713 NO PUDO GRABAR TICKET AFIP, INTENTE NUEVAMENTE");
//                            return;
//                        }
//                        tito = UtilAfip.solicitarTicket(titular, fecha, hora, minutos, segundos);
//                        tkt.setSign(tito.getSign());
//                        tkt.setToken(tito.getToken());
//                        if (tst == 0) {
//                            nuevoCae = UtilAfip.enviarFacturaAfip2(titular, consorcio, ab.getImporte(), fecha, tkt);
//                        } else {
    }

    private void sacarDeLista(int row) {
        int a = JOptionPane.showConfirmDialog(this, "CONFIRMA SACAR DE LISTA", "Atención", JOptionPane.YES_NO_OPTION);
        if (a == 0) {
            abonos.remove(row);
            llenarTabla(abonos);
        }
        filtroTxt.setText("");
        comboT.removeAllItems();
        comboT.addItem("");
        UtilFrame.limpiarTabla(tabla2);
    }

    private void limpiarCampos() {
        vtoTxt.setText("");
        consumidorFinalChk.setSelected(false);
        consumidorFinalChk.setVisible(false);
        filtroTxt.setText("");
        filtroTitularTxt.setText("");
        fechaTxt.setText("");
        totalImporteTxt.setText("");
        totalImporte2Txt.setText("");
        comboA.removeAllItems();
        comboA.addItem("");
        comboT.removeAllItems();
        comboT.addItem("");
        deTxt.setText("");
        alTxt.setText("");
        UtilFrame.limpiarTabla(tabla);
        UtilFrame.limpiarTabla(tabla2);
        tipos = UtilFrame.getComboTipoFactura();
    }

    private void generarPdf(NuevoCae nuevoCae, Comprobante iv, TitularCuit titular, Consorcio consorcio, Double total) {
        cae = nuevoCae.getCae();
        Boolean aprobado;
        fechaCae = nuevoCae.getFechaVencimiento();
        Date fecha = nuevoCae.getFechaCae();
        String a = nuevoCae.getEstado();
        if (a.equals("A")) {
            aprobado = true;
        } else {
            aprobado = false;
        }
        String data = UtilFrame.crearQr(titular, consorcio, iv);
        if (aprobado) {
            try {
                File pdf = new PDFBuilder().armarFacturaC(titular,
                        consorcio, tabla, iv.getNumero(), nuevoCae, total);
                iv.setPdfGenerado(true);
                new ComprobanteService().updateComprobante(iv);
//                DesktopApi.open(pdf);
            } catch (DocumentException ex) {
                Logger.getLogger(FacturaReparacion2Frame.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "ERROR 531");
            } catch (Exception ex) {
                Logger.getLogger(FacturaReparacion2Frame.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "ERROR 534");
            }
//            volver();
        } else {
            JOptionPane.showMessageDialog(this, "COMPROBANTE NO APROBADO POR AFIP");
//            return;
        }
    }

    private void llenarComboA() {
        String filtro = filtroTxt.getText();
        comboA.removeAllItems();
        comboA.addItem("");
        comboT.removeAllItems();
        comboT.addItem("");
        administraciones = null;
        try {
            administraciones = new AdministradorService().getAllAdministradoresActivosByFiltro(filtro);
        } catch (Exception ex) {
            Logger.getLogger(FacturarAbonosFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (administraciones != null && !administraciones.isEmpty()) {
            for (Administrador adm : administraciones) {
                comboA.addItem(adm.getRazonSocial());
            }
            comboA.addFocusListener(null);
            comboA.showPopup();
            comboA.requestFocus();
        }
    }

    private void llenarTabla(List<Abono> abo) {
        UtilFrame.limpiarTabla(tabla);
        if (abo != null && !abo.isEmpty()) {
            DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
            Double totalImporte2 = 0.00;
            Double totalImporte = 0.00;
            Double impoSuma = 0.00;
            Double impoSuma2 = 0.00;
            for (Abono ab : abo) {
                Domicilio dm = ab.getConsorcio().getDomicilio();
//                String tipo_doc = ab.getConsorcio().getDocumentoTipo();
                String cuit = ab.getConsorcio().getCuit();
                if (cuit.length() != 13) {
                    JOptionPane.showMessageDialog(null, "ERROR EN CUIT CONSORCIO\n"
                            + " " + dm.getCalle() + " " + dm.getNumero());
                    return;
                }
                Double importe_parcial = ab.getImporte();
                Double imp_cta = importe_parcial / ab.getCuotas();
                if (ab.getTipoFacturacion().equals(1)) {
                    impoSuma = ab.getImporte();
                    totalImporte += impoSuma;
                }
                if (ab.getTipoFacturacion().equals(2)) {
                    impoSuma += (importe_parcial / ab.getCuotas());
                    totalImporte += imp_cta;
                }
                if (ab.getTipoFacturacion().equals(3)) {
                    impoSuma2 += (importe_parcial / ab.getCuotas());
                    totalImporte2 += impoSuma2;
                }
                Object o[] = new Object[6];
                o[0] = dm.getCalle() + " " + dm.getNumero();
                o[1] = df.format(importe_parcial);

                if (ab.getCuotaFacturada() != null) {
                    if (ab.getRubro().getCodigo().equals(3)) {
                        if (ab.getTextoPeriodo() != null) {
                            if (ab.getTextoPeriodo().equals(0)) {
                                o[2] = UtilFrame.mesAnteriorEnLetras(new Date());
                            } else {
                                o[2] = UtilFrame.mesActualEnLetras(new Date());
                            }
                        } else {
                            JOptionPane.showMessageDialog(this, "TIENE ABONOS SIN INDICAR PERIODO");
                            return;
                        }
                    } else {
                        if (ab.getRubro().getCodigo().equals(2)) {
                            o[2] = ab.getCuotaFacturada() + 1;
                        } else {
                            o[2] = ab.getCuotaFacturada() + 1;
                        }
                        Integer c2 = ab.getCuotaFacturada();
                        Integer c3 = ab.getCuotas();
                        if (c2.equals(c3)) {
                            o[2] = "VENCIDO";
                        }
                    }
                } else {
                    o[2] = 0;
                }
                o[3] = ab.getCuotas();
                o[4] = df.format(imp_cta);
                if (ab.getTipoFacturacion() != null) {
                    int rov = ab.getTipoFacturacion();
                    o[5] = tipos.get(rov).getDetalle();
                } else {
                    o[5] = "";
                }
                tbl.addRow(o);
            }
            totalImporteTxt.setText(df.format(totalImporte));
            totalImporte2Txt.setText(df.format(totalImporte2));
            tabla.setModel(tbl);
            fechaTxt.requestFocus();
        }
    }

    private void llenarComboT() {
        String filtro = filtroTitularTxt.getText();
        comboT.removeAllItems();
        comboT.addItem("");
        titulares = null;
        try {
            titulares = new TitularCuitService().getTitularDeCuitActivoByFiltro(filtro);
        } catch (Exception ex) {
            Logger.getLogger(FacturarAbonosFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (titulares != null && !titulares.isEmpty()) {
            for (TitularCuit tc : titulares) {
                comboT.addItem(tc.getPersona().getApellidoNombre());
            }
            comboT.addFocusListener(null);
            comboT.showPopup();
            comboT.requestFocus();
        }
    }

    private void llenarTabla2(int row) {
        UtilFrame.limpiarTabla(tabla2);
        if (row > 0) {
            DefaultTableModel tbl = (DefaultTableModel) tabla2.getModel();
            TitularCuit ti = titulares.get(row - 1);
            Persona pe = ti.getPersona();
            Double limPe = ti.getLimiteFacturar();
            Double tfc = UtilFrame.totalFacturado12(pe);
            Double timp = Double.valueOf(totalImporteTxt.getText().replace(",", "."));
            Double dif = tfc - limPe;
            saldoTitular = dif + timp;
            Object o1[] = new Object[4];
            o1[0] = ti.getPersona().getApellidoNombre();
            o1[1] = df.format(dif);
            o1[2] = totalImporteTxt.getText();
            o1[3] = df.format(saldoTitular);
            tbl.addRow(o1);
            tabla2.setModel(tbl);
        }
    }

    private boolean validar() {
        int rowA = comboA.getSelectedIndex();
        int rowR = comboR.getSelectedIndex();
        int rowT = comboT.getSelectedIndex();
        if (rowA < 1) {
            JOptionPane.showMessageDialog(this, "DEBE SELECCIONAR UN ADMINISTRADOR");
            return false;
        }
        if (rowR < 1) {
            JOptionPane.showMessageDialog(this, "DEBE SELECCIONAR UN RUBRO");
            return false;
        }
        if (rowT < 1) {
            JOptionPane.showMessageDialog(this, "DEBE SELECCIONAR UN TITULAR DE CUIT");
            return false;
        }
        String ti0 = totalImporteTxt.getText().replace(",", ".");
        Double ti1 = Double.valueOf(ti0);
        String ti2 = totalImporte2Txt.getText().replace(",", ".");
        Double ti3 = Double.valueOf(ti2);
        if (ti1 < 1) {
            if (ti3 < 1) {
                JOptionPane.showMessageDialog(this, "VERIFIQUE EL TOTAL DE ABONOS");
                return false;
            }
        }
        if (saldoTitular > 0.00 && ti1 > 0.0) {
            int a = JOptionPane.showConfirmDialog(this, "SALDO TITULAR SUPERA LIMITE\nFACTURA IGUAL?",
                    "Atención", JOptionPane.YES_NO_OPTION);
            if (a == 0) {
                return true;
            } else {
                return false;
            }
        }
        return true;
    }

//    private void go() {
//        tipos = UtilFrame.getComboTipoFactura();
//        for (TipoFactura tf:tipos){
//            System.out.println(tf.getCodigo());
//            System.out.println(tf.getDetalle());
//            System.out.println("");
//        }
//        System.exit(0);
//    }
}
