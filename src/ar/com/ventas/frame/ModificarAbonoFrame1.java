/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.ventas.frame;

import ar.com.ventas.entities.Abono;
import ar.com.ventas.entities.Consorcio;
import ar.com.ventas.entities.Domicilio;
import ar.com.ventas.entities.RenglonAbono;
import ar.com.ventas.entities.Rubro;
import ar.com.ventas.entities.TextoPredefinido;
import ar.com.ventas.entities.TextoPredefinidoLinea;
import ar.com.ventas.entities.TipoFactura;
import ar.com.ventas.estructuras.Constantes;
import ar.com.ventas.services.AbonoService;
import ar.com.ventas.services.ConsorcioService;
import ar.com.ventas.services.RenglonAbonoService;
import ar.com.ventas.services.RubroService;
import ar.com.ventas.services.TextoPredefinidoLineaService;
import ar.com.ventas.services.TextoPredefinidoService;
import ar.com.ventas.util.UtilFrame;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Mario
 */
public class ModificarAbonoFrame1 extends javax.swing.JFrame {

    private Abono abono;
    private int orden = 0;
    private DecimalFormat df = new DecimalFormat("#0.00");
    private SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    private List<Consorcio> clientes;
    private List<Rubro> rubros;
    private List<RenglonAbono> renglones;
    private List<TextoPredefinido> textos;
    private List<TextoPredefinidoLinea> lineaTextos;
    private List<RenglonAbono> renglones2;
    private List<TipoFactura> tipos;

    /**
     * Creates new form NuevoAbonoFrame
     *
     * @param abono
     */
    public ModificarAbonoFrame1(Abono abono) {
        initComponents();
        getContentPane().setBackground(new java.awt.Color(Constantes.getR(), Constantes.getG(), Constantes.getB()));
//        this.setLocationRelativeTo(null);
        setExtendedState(6); // this.MAXIMIZED_BOTH
        this.abono = abono;
        limpiarCampos();
        llenarCampos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        volverBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        codigoTxt = new javax.swing.JTextField();
        activoChk = new javax.swing.JCheckBox();
        grabarBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        comboC = new javax.swing.JComboBox<>();
        comboR = new javax.swing.JComboBox<>();
        importeTxt = new javax.swing.JTextField();
        calcularBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        comboT = new javax.swing.JComboBox<>();
        agregarLineaBtn = new javax.swing.JButton();
        eliminarLineaBtn = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        comboCu = new javax.swing.JComboBox<>();
        pendienteChk = new javax.swing.JCheckBox();
        jLabel7 = new javax.swing.JLabel();
        comboTf = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        frecuenciaTxt = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        fechaInicioTxt = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        cuotaFacturadaTxt = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        valorCuotaTxt = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("MODIFICACION DETALLES DE ABONO");

        volverBtn.setText("Volver");
        volverBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverBtnActionPerformed(evt);
            }
        });

        jLabel1.setText("Código:");

        codigoTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        codigoTxt.setText("CODIGO");

        activoChk.setText("Activo");

        grabarBtn.setText("Grabar");
        grabarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                grabarBtnActionPerformed(evt);
            }
        });

        jLabel2.setText("CLIENTE:");

        jLabel3.setText("RUBRO:");

        jLabel4.setText("IMPORTE:");

        comboC.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        comboR.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        importeTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        importeTxt.setText("IMPORTE");

        calcularBtn.setText("Calcular");
        calcularBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calcularBtnActionPerformed(evt);
            }
        });

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "DETALLE", "IMPORTE"
            }
        ));
        jScrollPane1.setViewportView(tabla);
        if (tabla.getColumnModel().getColumnCount() > 0) {
            tabla.getColumnModel().getColumn(0).setPreferredWidth(300);
            tabla.getColumnModel().getColumn(1).setPreferredWidth(30);
        }

        jLabel5.setText("TEXTO PREDEFINIDO:");

        comboT.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboTActionPerformed(evt);
            }
        });

        agregarLineaBtn.setText("Agregar Línea");
        agregarLineaBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarLineaBtnActionPerformed(evt);
            }
        });

        eliminarLineaBtn.setText("Eliminar Línea");
        eliminarLineaBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarLineaBtnActionPerformed(evt);
            }
        });

        jLabel6.setText("CUOTAS:");

        comboCu.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        pendienteChk.setText("PENDIENTE FACTURAR");

        jLabel7.setText("Tipo Facturación:");

        comboTf.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel8.setText("FRECUENCIA:");

        frecuenciaTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        frecuenciaTxt.setText("FRQ");

        jLabel9.setText("FECHA INICIO:");

        fechaInicioTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        fechaInicioTxt.setText("FECH.INICIO");

        jLabel10.setText("CUOTA FACTURADA:");

        cuotaFacturadaTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        cuotaFacturadaTxt.setText("CF");

        jLabel11.setText("VALOR CUOTA:");

        valorCuotaTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        valorCuotaTxt.setText("VALOR CTA");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(comboC, javax.swing.GroupLayout.PREFERRED_SIZE, 555, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel8)
                        .addGap(18, 18, 18)
                        .addComponent(frecuenciaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(107, 107, 107))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(agregarLineaBtn)
                                        .addGap(18, 18, 18)
                                        .addComponent(eliminarLineaBtn))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(grabarBtn)
                                        .addGap(18, 18, 18)
                                        .addComponent(calcularBtn)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel11)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel6)
                                    .addComponent(valorCuotaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(comboCu, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel10)
                                        .addGap(18, 18, 18)
                                        .addComponent(cuotaFacturadaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 167, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addGap(18, 18, 18)
                                        .addComponent(importeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(volverBtn))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel3)
                                    .addGap(35, 35, 35)
                                    .addComponent(comboR, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(68, 68, 68)
                                    .addComponent(pendienteChk)
                                    .addGap(41, 41, 41)
                                    .addComponent(jLabel7)
                                    .addGap(18, 18, 18)
                                    .addComponent(comboTf, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addGap(18, 18, 18)
                                    .addComponent(codigoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(activoChk)
                                    .addGap(18, 18, 18)
                                    .addComponent(jLabel5)
                                    .addGap(18, 18, 18)
                                    .addComponent(comboT, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jLabel9)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(fechaInicioTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(codigoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(activoChk)
                    .addComponent(jLabel5)
                    .addComponent(comboT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(fechaInicioTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(comboC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(frecuenciaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(comboR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pendienteChk)
                    .addComponent(jLabel7)
                    .addComponent(comboTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 311, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(agregarLineaBtn)
                    .addComponent(eliminarLineaBtn)
                    .addComponent(jLabel6)
                    .addComponent(comboCu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(cuotaFacturadaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(grabarBtn)
                    .addComponent(volverBtn)
                    .addComponent(jLabel4)
                    .addComponent(importeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(calcularBtn)
                    .addComponent(jLabel11)
                    .addComponent(valorCuotaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void volverBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverBtnActionPerformed
        volver();
    }//GEN-LAST:event_volverBtnActionPerformed

    private void grabarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grabarBtnActionPerformed
        calcular();
        grabar();
    }//GEN-LAST:event_grabarBtnActionPerformed

    private void comboTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboTActionPerformed
        int row = comboT.getSelectedIndex();
        if (row > 0) {
            int a = JOptionPane.showConfirmDialog(this, "DESEA INCORPORAR EL TEXTO AL ABONO?",
                    "Atención", JOptionPane.YES_NO_OPTION);
            if (a == 0) {
                cargarTexto(row - 1);
            }
        }
    }//GEN-LAST:event_comboTActionPerformed

    private void calcularBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calcularBtnActionPerformed
        calcular();
    }//GEN-LAST:event_calcularBtnActionPerformed

    private void agregarLineaBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarLineaBtnActionPerformed
        tabla = UtilFrame.agregarLinea(2, tabla);
    }//GEN-LAST:event_agregarLineaBtnActionPerformed

    private void eliminarLineaBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarLineaBtnActionPerformed
        int row = tabla.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(this, "ELEGIR");
            return;
        }
        tabla = UtilFrame.borrarLinea(tabla, row);
    }//GEN-LAST:event_eliminarLineaBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ModificarAbonoFrame1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ModificarAbonoFrame1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ModificarAbonoFrame1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ModificarAbonoFrame1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ModificarAbonoFrame1(null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox activoChk;
    private javax.swing.JButton agregarLineaBtn;
    private javax.swing.JButton calcularBtn;
    private javax.swing.JTextField codigoTxt;
    private javax.swing.JComboBox<String> comboC;
    private javax.swing.JComboBox<String> comboCu;
    private javax.swing.JComboBox<String> comboR;
    private javax.swing.JComboBox<String> comboT;
    private javax.swing.JComboBox<String> comboTf;
    private javax.swing.JTextField cuotaFacturadaTxt;
    private javax.swing.JButton eliminarLineaBtn;
    private javax.swing.JTextField fechaInicioTxt;
    private javax.swing.JTextField frecuenciaTxt;
    private javax.swing.JButton grabarBtn;
    private javax.swing.JTextField importeTxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JCheckBox pendienteChk;
    private javax.swing.JTable tabla;
    private javax.swing.JTextField valorCuotaTxt;
    private javax.swing.JButton volverBtn;
    // End of variables declaration//GEN-END:variables

    private void volver() {
        CuotaAbonoFrame mf = new CuotaAbonoFrame();
        mf.setVisible(true);
        this.dispose();
    }

    private void limpiarCampos() {
        codigoTxt.setText("");
        valorCuotaTxt.setText("");
        activoChk.setSelected(true);
        comboT.removeAllItems();
        comboT.addItem("");
        comboTf.removeAllItems();
        tipos = UtilFrame.getComboTipoFactura();
        textos = null;
        for(TipoFactura tf: tipos){
            comboTf.addItem(tf.getDetalle());
        }
        try {
            textos = new TextoPredefinidoService().getAllTextoPredefinidoActivos();
        } catch (Exception ex) {
            Logger.getLogger(ModificarAbonoFrame1.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (textos != null && !textos.isEmpty()) {
            for (TextoPredefinido tp : textos) {
                comboT.addItem(tp.getTextoCorto());
            }
        }
        comboCu.removeAllItems();
        comboCu.addItem("");
        for (int i = 1; i < 13; i++) {
            String e = String.valueOf(i);
            comboCu.addItem(e);
        }
    }

    private void grabar() {
        if (verificar()) {
            int rowC = comboC.getSelectedIndex();
            int rowR = comboR.getSelectedIndex();
            int rowCu = comboCu.getSelectedIndex();
            int rowTf = comboTf.getSelectedIndex();
            int ctaFac = Integer.valueOf(cuotaFacturadaTxt.getText());
            Date fi;
            try {
                fi = sdf.parse(fechaInicioTxt.getText());
                System.out.println(fi);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "ERROR EN LA FECHA");
                fechaInicioTxt.requestFocus();
                System.out.println(ex);
                return;
            }
            int frq;
            if (frecuenciaTxt.getText().isEmpty()) {
                frq = 0;
            } else {
                try {
                    frq = Integer.valueOf(frecuenciaTxt.getText());
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, "DEBE SER UN NUMERO ENTERO");
                    return;
                }
            }
            Rubro ru = rubros.get(rowR - 1);
            Consorcio cl = clientes.get(rowC - 1);
            abono.setCodigo(Integer.valueOf(codigoTxt.getText()));
            abono.setFrecuencia(frq);
            abono.setFechaInicio(fi);
            if (activoChk.isSelected()) {
                abono.setActivo(true);
                if (pendienteChk.isSelected()) {
                    abono.setPendiente(true);
                }else{
                    abono.setPendiente(false);
                }
            } else {
                abono.setActivo(false);
                abono.setPendiente(false);
            }
            abono.setImporte(Double.valueOf(importeTxt.getText().replace(",", ".")));
            abono.setRubro(ru);
            abono.setConsorcio(cl);
            abono.setCuotas(rowCu);
            abono.setCuotaFacturada(ctaFac);
            abono.setTipoFacturacion(rowTf);
            renglones = new ArrayList<>();
            int rowT = tabla.getRowCount();
            for (int i = 0; i < rowT; i++) {
                RenglonAbono ra = new RenglonAbono();
                ra.setAbono(abono);
                Double importe;
                String str1 = tabla.getValueAt(i, 0).toString();
                String str = tabla.getValueAt(i, 1).toString();
                if (str.isEmpty()) {
                    importe = 0.0;
                } else {
                    importe = Double.valueOf(str.replace(",", "."));
                }
                ra.setImporte(importe);
                ra.setOrden(i);
                ra.setTexto(str1);
                renglones.add(ra);
            }
            try {
                new AbonoService().updateAbonoCompleto(abono, renglones, renglones2);
            } catch (Exception ex) {
                Logger.getLogger(ModificarAbonoFrame1.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "ERROR GRABANDO");
            }
            JOptionPane.showMessageDialog(this, "GRABADO OK");
            volver();
        }
    }

    private boolean verificar() {
        int rowC = comboC.getSelectedIndex();
        int rowR = comboR.getSelectedIndex();
        int rowCu = comboCu.getSelectedIndex();
        int rowT = tabla.getRowCount();
        int rowTf = comboTf.getSelectedIndex();
        Date fi;
        try {
            fi = sdf.parse(fechaInicioTxt.getText());
            System.out.println(fi);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "ERROR EN LA FECHA");
            fechaInicioTxt.requestFocus();
            System.out.println(ex);
            return false;
        }
        if (frecuenciaTxt.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "INGRESE LA FRECUENCI DE FC, NUMERO ENTERO");
            frecuenciaTxt.requestFocus();
            return false;
        }
        try {
            int tst = Integer.valueOf(frecuenciaTxt.getText());
            System.out.println(tst);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "FRECUENCIA DEBE SER UN NUMERO ENTERO");
            System.out.println(ex);
            frecuenciaTxt.requestFocus();
            return false;
        }
        if(cuotaFacturadaTxt.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "CUOTA FACTURADA DEBE INGRESAR UN NUMERO ENTERO");
            cuotaFacturadaTxt.requestFocus();
            return false;
        }
        try {
            int ctaFac = Integer.valueOf(cuotaFacturadaTxt.getText());
            System.out.println(ctaFac);
        } catch (Exception ex){
            JOptionPane.showMessageDialog(this, "CUOTA FACTURADA DEBE SER UN NUMERO ENTERO");
            System.out.println(ex);
            cuotaFacturadaTxt.requestFocus();
            return false;
        }
        if(rowTf < 1){
            JOptionPane.showMessageDialog(this, "DEBE SELECCIONAR UN TIPO DE FACTURACION");
            return false;
        }
        if (rowC < 1) {
            JOptionPane.showMessageDialog(this, "DEBE PERMANECER SELECCIONADO EL CONSORCIO");
            return false;
        }
        if (rowR < 1) {
            JOptionPane.showMessageDialog(this, "DEBE PERMANECER SELECCIONADO EL RUBRO");
            return false;
        }
        if (rowCu < 1) {
            JOptionPane.showMessageDialog(this, "DEBE INDICAR EL NUMERO DE CUOTAS");
            return false;
        }
        if (rowT < 1) {
            JOptionPane.showMessageDialog(this, "DEBE INDICAR UN TEXTO PARA EL ABONO");
            return false;
        }
        if (importeTxt.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "DEBE INDICAR UN IMPORTE PARA EL ABONO");
            return false;
        }
        return true;
    }

    private void llenarCampos() {
        codigoTxt.setText(abono.getCodigo().toString());
        codigoTxt.setEditable(false);
        if (abono.getActivo() != null) {
            if (abono.getActivo()) {
                activoChk.setSelected(true);
            } else {
                activoChk.setSelected(false);
            }
        } else {
            activoChk.setSelected(false);
        }
        if(abono.getFrecuencia() != null){
            frecuenciaTxt.setText(abono.getFrecuencia().toString());
        } else {
            frecuenciaTxt.setText("0");
        }
        if(abono.getCuotaFacturada() != null){
            cuotaFacturadaTxt.setText(abono.getCuotaFacturada().toString());
        }else{
            cuotaFacturadaTxt.setText("0");
        }
        if(abono.getFechaInicio() != null){
            fechaInicioTxt.setText(sdf.format(abono.getFechaInicio()));
        } else {
            fechaInicioTxt.setText(sdf.format(new Date()));
        }
        if (abono.getPendiente()) {
            pendienteChk.setSelected(true);
        } else {
            pendienteChk.setSelected(false);
        }
        int rowCu = abono.getCuotas();
        comboCu.setSelectedIndex(rowCu);
        importeTxt.setText(df.format(abono.getImporte()));
        valorCuotaTxt.setText(df.format(abono.getImporte()/abono.getCuotas()));
        rubros = null;
        clientes = null;
        try {
            rubros = new RubroService().getAllRubrosActivos();
        } catch (Exception ex) {
            Logger.getLogger(ModificarAbonoFrame1.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            clientes = new ConsorcioService().getAllConsorciosActivos();
        } catch (Exception ex) {
            Logger.getLogger(ModificarAbonoFrame1.class.getName()).log(Level.SEVERE, null, ex);
        }
        comboC.removeAllItems();
        comboR.removeAllItems();
        comboC.addItem("");
        comboR.addItem("");
        Long idC = abono.getConsorcio().getId();
        Long idR = abono.getRubro().getId();
        int posC = 0;
        int pC = 0;
        int posR = 0;
        int pR = 0;
        if (clientes != null && !clientes.isEmpty()) {
            for (Consorcio c : clientes) {
                posC += 1;
                Domicilio dm = c.getDomicilio();
                comboC.addItem(dm.getCalle() + " " + dm.getNumero());
                if (idC.equals(c.getId())) {
                    pC = posC;
                }
            }
        }
        if (rubros != null && !rubros.isEmpty()) {
            for (Rubro r : rubros) {
                posR += 1;
                comboR.addItem(r.getDetalle());
                if (idR.equals(r.getId())) {
                    pR = posR;
                }
            }
        }
        comboC.setSelectedIndex(pC);
        comboR.setSelectedIndex(pR);
        UtilFrame.limpiarTabla(tabla);
        renglones = null;
        try {
            renglones = new RenglonAbonoService().getRenglonAbonosByAbono(abono);
        } catch (Exception ex) {
            Logger.getLogger(ModificarAbonoFrame1.class.getName()).log(Level.SEVERE, null, ex);
        }
        renglones2 = renglones;
//        System.out.println(renglones);
//        System.out.println(renglones2);
        if (renglones != null && !renglones.isEmpty()) {
            DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
            for (RenglonAbono re : renglones) {
                Object o[] = new Object[2];
                o[0] = re.getTexto();
                if (re.getImporte() != null) {
                    if (re.getImporte() > 0.009) {
                        o[1] = df.format(re.getImporte());
                    } else {
                        o[1] = "";
                    }
                } else {
                    o[1] = "";
                }
                tbl.addRow(o);
            }
            tabla.setModel(tbl);
        }
        comboTf.setSelectedIndex(abono.getTipoFacturacion());
    }

    private void cargarTexto(int i) {
        TextoPredefinido tp1 = textos.get(i);
        lineaTextos = null;
        try {
            lineaTextos = new TextoPredefinidoLineaService().getAllTextoPredefinidoActivosByTextoPredefinido(tp1);
        } catch (Exception ex) {
            Logger.getLogger(ModificarAbonoFrame1.class.getName()).log(Level.SEVERE, null, ex);
        }
//        if(renglones == null){
//            renglones = new ArrayList<>();
//        }
        if (lineaTextos != null && !lineaTextos.isEmpty()) {
            DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
            for (TextoPredefinidoLinea textoLinea : lineaTextos) {
                Object o[] = new Object[2];
                o[0] = textoLinea.getLinea();
                o[1] = "";
                tbl.addRow(o);
            }
            tabla.setModel(tbl);
        }
    }

    private void calcular() {
        int rows = tabla.getRowCount();
        Double total = 0.0;
        for (int i = 0; i < rows; i++) {
            String imp1 = tabla.getValueAt(i, 1).toString();
            if (!imp1.isEmpty()) {
                Double parcial = Double.valueOf(imp1.replace(",", "."));
                total += parcial;
            }
            valorCuotaTxt.setText(df.format(total));
            importeTxt.setText(df.format(total * comboCu.getSelectedIndex()));
        }
    }
}
