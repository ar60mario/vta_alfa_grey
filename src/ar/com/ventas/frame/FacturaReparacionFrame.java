/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.ventas.frame;

import ar.com.ventas.entities.Administrador;
import ar.com.ventas.entities.Comprobante;
import ar.com.ventas.entities.Consorcio;
import ar.com.ventas.entities.CuentaCorrienteCliente;
import ar.com.ventas.entities.CuotaFactura;
import ar.com.ventas.entities.Domicilio;
import ar.com.ventas.entities.ComprobanteRenglones;
import ar.com.ventas.entities.NuevoCae;
import ar.com.ventas.entities.Persona;
import ar.com.ventas.entities.RenglonTrabajoReparacion;
import ar.com.ventas.entities.Rubro;
import ar.com.ventas.entities.TextoPredefinido;
import ar.com.ventas.entities.TextoPredefinidoLinea;
import ar.com.ventas.entities.TicketTime;
import ar.com.ventas.entities.TicketToken;
import ar.com.ventas.entities.TitularCuit;
import ar.com.ventas.main.MainFrame;
import ar.com.ventas.services.ComprobanteService;
import ar.com.ventas.services.ConsorcioService;
import ar.com.ventas.services.CuentaCorrienteClienteService;
import ar.com.ventas.services.IvaVentasService;
import ar.com.ventas.services.RubroService;
import ar.com.ventas.services.TextoPredefinidoLineaService;
import ar.com.ventas.services.TextoPredefinidoService;
import ar.com.ventas.services.TicketTimeService;
import ar.com.ventas.services.TitularCuitService;
import ar.com.ventas.util.DesktopApi;
import ar.com.ventas.util.PDFBuilder;
import ar.com.ventas.util.UtilAfip;
import ar.com.ventas.util.UtilFrame;

import com.google.zxing.common.BitMatrix;
import com.google.zxing.qrcode.QRCodeWriter;
import com.itextpdf.text.DocumentException;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileOutputStream;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Base64;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Objects;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Mario
 */
public class FacturaReparacionFrame extends javax.swing.JFrame {

    private List<Consorcio> consorcios;
    private Consorcio consorcio = null;
    private List<TitularCuit> titulares;
    private TitularCuit titular;
    private List<Rubro> rubros;
    private final SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    private final DecimalFormat df = new DecimalFormat("#0.00");
    private Double total;
    private Boolean aprobado = false;
    private Boolean grabado = false;
    private Date fechaCae = new Date();
    private Date fecha = new Date();
    private Long cae;
    private Integer numeroFactura;
    private List<TextoPredefinido> textos;
    private List<TextoPredefinidoLinea> lineas;

    private static final int qrTamAncho = 150;
    private static final int qrTamAlto = 150;
    private static final String formato = "png";
    private static final String ruta = "c:/SYSTEM/qr/codigoQR";
    private static final String extension = ".png";
    private static SimpleDateFormat sdf_qr = new SimpleDateFormat("yyyy-MM-dd");
    private final DecimalFormat df_qr = new DecimalFormat("00000000");

    private String ver_qr = "1";
    private String fecha_qr;
    private String cuit_qr;
    ;
    private String puntoVenta_qr;
    private String tipoComprobante_qr;
    private String numeroComprobante_qr;
    private String importe_qr;
    private String moneda_qr = "PES";
    private String cotiz_qr = "1";
    private String tipoDoc_qr;
    private String numeroDoc_qr;
    private String tipoCodigoAutoriz_qr = "E";
    private String nroCae_qr;

    private int tst = 1; //1 esta en test

    /**
     * Creates new form FacturaReparacionFrame
     */
    public FacturaReparacionFrame() {
        initComponents();
        getContentPane().setBackground(new java.awt.Color(90, 180, 180));
        setExtendedState(6); // this.MAXIMIZED_BOTH
        limpiarCampos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        combo = new javax.swing.JComboBox<>();
        calleTxt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        numeroTxt = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        fechaTxt = new javax.swing.JTextField();
        agregarLineaBtn = new javax.swing.JButton();
        eliminarLineaBtn = new javax.swing.JButton();
        calcularBtn = new javax.swing.JButton();
        totalTxt = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        comboT = new javax.swing.JComboBox<>();
        volverBtn = new javax.swing.JButton();
        generarFacturaBtn = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        comboC = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        comboR = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        comboTx = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("FACTURA REPARACION");

        jLabel1.setText("Consorcio:");

        combo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        combo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboActionPerformed(evt);
            }
        });
        combo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                comboKeyPressed(evt);
            }
        });

        calleTxt.setText("CALLE");
        calleTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                calleTxtKeyPressed(evt);
            }
        });

        jLabel2.setText("Buscar por Calle:");

        jLabel3.setText("Buscar Por Número:");

        numeroTxt.setText("NUMERO");
        numeroTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                numeroTxtKeyPressed(evt);
            }
        });

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "DETALLE", "IMPORTE"
            }
        ));
        jScrollPane1.setViewportView(tabla);
        if (tabla.getColumnModel().getColumnCount() > 0) {
            tabla.getColumnModel().getColumn(0).setPreferredWidth(500);
            tabla.getColumnModel().getColumn(1).setPreferredWidth(50);
        }

        jLabel4.setText("FECHA:");

        fechaTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        fechaTxt.setText("FECHA");
        fechaTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fechaTxtKeyPressed(evt);
            }
        });

        agregarLineaBtn.setText("Agregar Línea");
        agregarLineaBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarLineaBtnActionPerformed(evt);
            }
        });

        eliminarLineaBtn.setText("Eliminar Línea");
        eliminarLineaBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarLineaBtnActionPerformed(evt);
            }
        });

        calcularBtn.setText("Calcular");
        calcularBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calcularBtnActionPerformed(evt);
            }
        });

        totalTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        totalTxt.setText("TOTAL");

        jLabel5.setText("TITULAR:");

        comboT.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboTActionPerformed(evt);
            }
        });

        volverBtn.setText("Volver");
        volverBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverBtnActionPerformed(evt);
            }
        });

        generarFacturaBtn.setText("Generar Factura");
        generarFacturaBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generarFacturaBtnActionPerformed(evt);
            }
        });

        jLabel6.setText("Cuotas:");

        comboC.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel7.setText("Rubro:");

        comboR.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel8.setText("Texto Predefinido:");

        comboTx.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboTx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboTxActionPerformed(evt);
            }
        });
        comboTx.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                comboTxKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(calleTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                                    .addComponent(numeroTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE))
                                .addGap(18, 39, Short.MAX_VALUE)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(fechaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(combo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(comboTx, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(agregarLineaBtn)
                            .addComponent(jLabel5))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(eliminarLineaBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(calcularBtn)
                                .addGap(18, 18, 18)
                                .addComponent(totalTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(comboT, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(181, 181, 181))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(generarFacturaBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(volverBtn)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(comboC, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(77, 77, 77)
                                .addComponent(jLabel7)
                                .addGap(18, 18, 18)
                                .addComponent(comboR, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 791, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 172, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(calleTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(fechaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(comboTx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(numeroTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(combo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(agregarLineaBtn)
                    .addComponent(eliminarLineaBtn)
                    .addComponent(calcularBtn)
                    .addComponent(totalTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(comboT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(comboC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(comboR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 24, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(volverBtn)
                    .addComponent(generarFacturaBtn))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void calleTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_calleTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            if (calleTxt.getText().isEmpty()) {
                numeroTxt.requestFocus();
            } else {
                buscarPorCalle();
            }
        }
    }//GEN-LAST:event_calleTxtKeyPressed

    private void numeroTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_numeroTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            if (numeroTxt.getText().isEmpty()) {
                calleTxt.requestFocus();
            } else {
                buscarPorNumero();
            }
        }
    }//GEN-LAST:event_numeroTxtKeyPressed

    private void comboKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comboKeyPressed
        if (evt.getKeyCode() == 10) {
            int row = combo.getSelectedIndex();
            if (row > 0) {
                consorcio = consorcios.get(row - 1);
                fechaTxt.requestFocus();
            }
        }
    }//GEN-LAST:event_comboKeyPressed

    private void comboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboActionPerformed
        int row = combo.getSelectedIndex();
        if (row > 0) {
            if (evt.getModifiers() == 16) {
                consorcio = consorcios.get(row - 1);
                fechaTxt.requestFocus();
            }
        }
    }//GEN-LAST:event_comboActionPerformed

    private void fechaTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fechaTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            String fe = fechaTxt.getText();
            int largo = fe.length();
            if (largo == 10) {
                agregarLinea();
                agregarLineaBtn.requestFocus();
            } else {
                if (largo > 10) {
                    JOptionPane.showMessageDialog(this, "ERROR EN LARGO DE FECHA");
                    return;
                }
            }
            fe = UtilFrame.fecha(fe);
            fechaTxt.setText(fe);
        }
    }//GEN-LAST:event_fechaTxtKeyPressed

    private void agregarLineaBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarLineaBtnActionPerformed
        agregarLinea();
    }//GEN-LAST:event_agregarLineaBtnActionPerformed

    private void eliminarLineaBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarLineaBtnActionPerformed
        eliminarLinea();
    }//GEN-LAST:event_eliminarLineaBtnActionPerformed

    private void calcularBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calcularBtnActionPerformed
        calcular();
    }//GEN-LAST:event_calcularBtnActionPerformed

    private void volverBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverBtnActionPerformed
        volver();
    }//GEN-LAST:event_volverBtnActionPerformed

    private void comboTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboTActionPerformed
        int row = comboT.getSelectedIndex();
        if (row > 0) {
            titular = titulares.get(row - 1);
        }
    }//GEN-LAST:event_comboTActionPerformed

    private void generarFacturaBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generarFacturaBtnActionPerformed
        if (validar()) {
            generarFactura();
        }
    }//GEN-LAST:event_generarFacturaBtnActionPerformed

    private void comboTxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboTxActionPerformed
        if (evt.getModifiers() == 16) {
            int row = comboTx.getSelectedIndex();
            if (row > 0) {
                cargarLineas(row);
            }
        }
    }//GEN-LAST:event_comboTxActionPerformed

    private void comboTxKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comboTxKeyPressed
        if (evt.getKeyCode() == 10) {
            int row = comboTx.getSelectedIndex();
            if (row > 0) {
                cargarLineas(row);
            }
        }
    }//GEN-LAST:event_comboTxKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FacturaReparacionFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FacturaReparacionFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FacturaReparacionFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FacturaReparacionFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FacturaReparacionFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton agregarLineaBtn;
    private javax.swing.JButton calcularBtn;
    private javax.swing.JTextField calleTxt;
    private javax.swing.JComboBox<String> combo;
    private javax.swing.JComboBox<String> comboC;
    private javax.swing.JComboBox<String> comboR;
    private javax.swing.JComboBox<String> comboT;
    private javax.swing.JComboBox<String> comboTx;
    private javax.swing.JButton eliminarLineaBtn;
    private javax.swing.JTextField fechaTxt;
    private javax.swing.JButton generarFacturaBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField numeroTxt;
    private javax.swing.JTable tabla;
    private javax.swing.JTextField totalTxt;
    private javax.swing.JButton volverBtn;
    // End of variables declaration//GEN-END:variables

    private void limpiarCampos() {
        calleTxt.setText("");
        numeroTxt.setText("");
        fechaTxt.setText("");
        totalTxt.setText("");
        combo.removeAllItems();
        comboT.removeAllItems();
        comboC.removeAllItems();
        comboC.addItem("");
        comboR.removeAllItems();
        comboR.addItem("");
        for (Integer i = 1; i < 13; i++) {
            comboC.addItem(i.toString());
        }
        UtilFrame.limpiarTabla(tabla);
        comboTx.removeAllItems();
        comboTx.addItem("");
        textos = null;
        try {
            textos = new TextoPredefinidoService().getAllTextoPredefinidoActivos();
        } catch (Exception ex) {
            Logger.getLogger(FacturaReparacionFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (textos != null && !textos.isEmpty()) {
            for (TextoPredefinido tp : textos) {
                comboTx.addItem(tp.getTextoCorto());
            }
        }
    }

    private void buscarPorCalle() {
        consorcios = null;
        combo.removeAllItems();
        combo.addItem("");
        String filtro = calleTxt.getText();
        try {
            consorcios = new ConsorcioService().getAllConsorciosActivosByFiltro(filtro);
        } catch (Exception ex) {
            Logger.getLogger(FacturaReparacionFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (consorcios != null && !consorcios.isEmpty()) {
            for (Consorcio c : consorcios) {
                Domicilio dm = c.getDomicilio();
                combo.addItem(dm.getCalle() + " " + dm.getNumero());
            }
            combo.addFocusListener(null);
            combo.showPopup();
            combo.requestFocus();
        }
    }

    private void buscarPorNumero() {
        combo.removeAllItems();
        combo.addItem("");
        String nro = numeroTxt.getText();
        consorcios = null;
        try {
            consorcios = new ConsorcioService().getAllConsorciosActivosByNumero(nro);
        } catch (Exception ex) {
            Logger.getLogger(FacturaReparacionFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (consorcios != null && !consorcios.isEmpty()) {
            for (Consorcio c : consorcios) {
                Domicilio dm = c.getDomicilio();
                combo.addItem(dm.getCalle() + " " + dm.getNumero());
            }
            combo.addFocusListener(null);
            combo.showPopup();
            combo.requestFocus();
        }
    }

    private void volver() {
        MainFrame mf = new MainFrame();
        mf.setVisible(true);
        this.dispose();
    }

    private void agregarLinea() {
        DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
        Object o[] = new Object[2];
        o[0] = "";
        o[1] = "";
        tbl.addRow(o);
        tabla.setModel(tbl);
    }

    private void eliminarLinea() {
        int row = tabla.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(this, "DEBE SELECCIONAR UNA LINEA PARA ELIMINAR");
            return;
        }
        DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
        tbl.removeRow(row);
        tabla.setModel(tbl);
    }

    private void calcular() {
        int rows = tabla.getRowCount();
        total = 0.00;
        Double tl;
        if (rows > 0) {
            for (int i = 0; i < rows; i++) {
                if (!tabla.getValueAt(i, 1).toString().isEmpty()) {
                    tl = Double.valueOf(tabla.getValueAt(i, 1).toString().replace(",", "."));
                    total += tl;
                }
            }
        }
        totalTxt.setText(df.format(total));
        llenarComboTitulares();
    }

    private void llenarComboTitulares() {
        titulares = null;
        try {
            titulares = new TitularCuitService().getAllTitularDeCuitActivos();
        } catch (Exception ex) {
            Logger.getLogger(FacturaReparacionFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (titulares != null && !titulares.isEmpty()) {
            comboT.removeAllItems();
            comboT.addItem("");
            for (TitularCuit tc : titulares) {
                Persona pe = tc.getPersona();
                comboT.addItem(tc.getPersona().getApellidoNombre()
                        + " " + df.format(-tc.getLimiteFacturar() + UtilFrame.totalFacturado12(pe)));
            }
        }
        rubros = null;
        try {
            rubros = new RubroService().getAllRubrosActivos();
        } catch (Exception ex) {
            Logger.getLogger(FacturaReparacionFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (rubros != null && !rubros.isEmpty()) {
            comboR.removeAllItems();
            comboR.addItem("");
            for (Rubro r : rubros) {
                comboR.addItem(r.getDetalle());
            }
        }
        comboC.setSelectedIndex(1);
        comboR.setSelectedIndex(4);
    }

    private void generarFactura() {
        Calendar cal = Calendar.getInstance();
        fecha = cal.getTime();
        Integer hora = cal.get(Calendar.HOUR_OF_DAY);
        Integer minutos = cal.get(Calendar.MINUTE);
        Integer segundos = cal.get(Calendar.SECOND);
        TicketTime tkt = null;
        TicketToken tito = new TicketToken();
        try {
            tkt = new TicketTimeService().getTicketByTitular(titular);
        } catch (Exception ex) {
            Logger.getLogger(FacturaReparacionFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (tkt != null) {
            tito = UtilAfip.solicitarTicket(titular, fecha, hora, minutos, segundos);
        } else {
            tkt = new TicketTime();
            tkt.setTitular(titular);
            tkt.setFecha(fecha);
            tkt.setHora(hora);
            tkt.setMinuto(minutos);
            tkt.setSegundo(segundos);
            try {
                tkt = new TicketTimeService().saveTicket(tkt);
            } catch (Exception ex) {
                Logger.getLogger(FacturaReparacionFrame.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "ERROR Nro.713 NO PUDO GRABAR TICKET AFIP, INTENTE NUEVAMENTE");
                return;
            }
            tito = UtilAfip.solicitarTicket(titular, fecha, hora, minutos, segundos);
        }
        Date fechaFc;
        try {
            fechaFc = sdf.parse(fechaTxt.getText());
        } catch (ParseException ex) {
//            Logger.getLogger(FacturaReparacionFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "VERIFIQUE FECHA FACTURA");
            fechaTxt.requestFocus();
            return;
        }
        tkt.setSign(tito.getSign());
        tkt.setToken(tito.getToken());

//        System.out.println(tkt);
//        System.out.println(tito.getSign());
//        System.out.println(tito.getToken());
//        System.exit(0);
        NuevoCae nuevoCae = null;
        if (tst == 0) {
//            nuevoCae = UtilAfip.enviarFacturaAfip2(titular, consorcio, total, fechaFc, tkt);
        } else {
            nuevoCae = new NuevoCae();
            nuevoCae.setCae(12345678901234L);
            nuevoCae.setEstado("A");
            nuevoCae.setFechaCae(new Date());
            nuevoCae.setFechaPeriodoDesde(new Date());
            nuevoCae.setFechaPeriodoHasta(new Date());
            nuevoCae.setFechaVencimiento(new Date());
            nuevoCae.setFechaVencimientoPago(new Date());
            nuevoCae.setNumero(501);
            nuevoCae.setSucursal(100);
        }
        String estado = nuevoCae.getEstado();
        if (estado.equals("A")) {
            Comprobante iv = grabarComprobante(nuevoCae);
            generarPdf(nuevoCae, iv);
        } else {
//            grabar comprobante temporal para modificar.

        }
        JOptionPane.showMessageDialog(this, "COMPROBANTE GRABADO CORRECTAMENTE");
        volver();
    }

//    private NuevoCae presentarAfip(TitularCuit titular, Double total) {
//        NuevoCae nc = new NuevoCae();
//        int nro = 205;
//        cae = 123456789012345L;
//        fechaCae = new Date();
//        aprobado = true;
//        numeroFactura = nro;
//
//        return nc;
//    }
    private void generarPdf(NuevoCae nuevoCae, Comprobante iv) {
        cae = nuevoCae.getCae();
        fechaCae = nuevoCae.getFechaVencimiento();
        fecha = nuevoCae.getFechaCae();
        String a = nuevoCae.getEstado();
        if (a.equals("A")) {
            aprobado = true;
        } else {
            aprobado = false;
        }
        String data = UtilFrame.crearQr(titular, consorcio, iv);
        if (aprobado) {
            try {
                File pdf = new PDFBuilder().armarFacturaC(titular,
                        consorcio, tabla, iv.getNumero(), nuevoCae, total);
                iv.setPdfGenerado(true);
                new ComprobanteService().updateComprobante(iv);
                DesktopApi.open(pdf);
            } catch (DocumentException ex) {
                Logger.getLogger(FacturaReparacionFrame.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "ERROR 531");
            } catch (Exception ex) {
                Logger.getLogger(FacturaReparacionFrame.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "ERROR 534");
            }
//            volver();
//            volver();
//            volver();
//            volver();
//            volver();
//            volver();
//            volver();
//            volver();
        } else {
            JOptionPane.showMessageDialog(this, "COMPROBANTE NO APROBADO POR AFIP");
//            return;
        }
    }

    private Comprobante grabarComprobante(NuevoCae nuevoCae) {
        Administrador adm = consorcio.getAdministrador();
        int pmc = 0;
        if (adm.getPagaMesCorriente() != null) {
            if (adm.getPagaMesCorriente()) {
                pmc = 1;
            }
        }
        Comprobante iv = new Comprobante();
        iv.setCae(nuevoCae.getCae());
        iv.setFechaPeriodoDesde(nuevoCae.getFechaPeriodoDesde());
        iv.setFechaPeriodoHasta(nuevoCae.getFechaPeriodoHasta());
        iv.setFechaVencimientoPago(nuevoCae.getFechaVencimientoPago());
        int tipoCompr = 0;
        int rowR = comboR.getSelectedIndex() - 1;
        iv.setRubro(rubros.get(rowR));
        String cuit = consorcio.getCuit();
        String cuitTitular = titular.getCuit();
        Domicilio dmT = titular.getDomicilio();
        Domicilio dmC = consorcio.getDomicilio();
        fecha = nuevoCae.getFechaCae();
        String letra = "";
//            try {
//                fecha = sdf.parse(fechaTxt.getText());
//            } catch (ParseException ex) {
//                Logger.getLogger(FacturaReparacionFrame.class.getName()).log(Level.SEVERE, null, ex);
//                JOptionPane.showMessageDialog(this, "ERROR GRABANDO COMPROBANTE\nVERIFIQUE FECHA");
//                return;
//            }
        if (titular.getTipoInscipcion() == 6) {
            tipoCompr = 11;
            letra = "C";
        }
        fechaCae = nuevoCae.getFechaVencimiento();
        numeroFactura = nuevoCae.getNumero();
        List<ComprobanteRenglones> ivr = new ArrayList<>();
        int rows = tabla.getRowCount();
        for (int i = 0; i < rows; i++) {
            ComprobanteRenglones ivr0 = new ComprobanteRenglones();
            ivr0.setDetalle(tabla.getValueAt(i, 0).toString());
            if (!tabla.getValueAt(i, 1).equals("")) {
                String imp = tabla.getValueAt(i, 1).toString().replace(",", ".");
                Double impor = Double.valueOf(imp);
                ivr0.setImporte(impor);
                ivr.add(ivr0);
            } else {
                ivr0.setImporte(0.0);
                ivr.add(ivr0);
            }
        }
        iv.setCodigoComprobante(tipoCompr);
        iv.setTipoComprobanteAsociado(tipoCompr);
        iv.setCuitCliente(cuit);
        iv.setCuitTitular(cuitTitular);
        iv.setCalleNroPisoDtoCliente(dmC.getCalle() + " " + dmC.getNumero());
        iv.setCodigoPostalAndLocalidadCliente(dmC.getCodigoPostal() + " "
                + dmC.getLocalidad());
        iv.setCodigoPostalAndLocalidadTitular(dmT.getCodigoPostal() + " "
                + dmT.getLocalidad());
        iv.setProvinciaCliente(dmC.getProvincia());
        iv.setProvinciaTitular(dmT.getProvincia());
        iv.setDomicilioTitular(dmT.getCalle() + " " + dmT.getNumero());
        iv.setFecha(fecha);
        iv.setFechaInicioActividades(titular.getFechaInicioActividades());
        iv.setFechaVencimientoCae(fechaCae);
        int caCu = comboC.getSelectedIndex();
        iv.setCantidadCuotas(caCu);
        iv.setCuotasPagadas(0);
        iv.setIibb(titular.getIibb());
        iv.setLetra(letra);
        iv.setNumero(numeroFactura);
        iv.setNumeroComprobanteAsociado(0);
        iv.setRazonSocialCliente(consorcio.getNombre());
        iv.setRazonSocialTitular(titular.getPersona().getApellidoNombre());
        iv.setSucursal(titular.getSucursal());
        iv.setSucursalComprobanteAsociado(0);
        iv.setTipoInscripcion(titular.getTipoInscipcion().toString());
        iv.setTotal(total);
        iv.setTipoDocumento(consorcio.getDocumentoTipo());

        int f = comboC.getSelectedIndex();
        Double cuota = total / f;
//        System.out.println(f);
        List<CuotaFactura> cuotas = new ArrayList<>();
        Date fechaCuota = fecha;
        Date fecha2;
        for (int i = 0; i < f; i++) {
            CuotaFactura cf = new CuotaFactura();
            cf.setCancelada(false);
            if (pmc == 1) {
                fecha2 = fechaCuota;
                fechaCuota = UtilFrame.getFechaMesSiguiente(fechaCuota);
            } else {
                fechaCuota = UtilFrame.getFechaMesSiguiente(fechaCuota);
                fecha2 = fechaCuota;
            }
            cf.setFechaDeVencimiento(fecha2);
            cf.setImporteCuota(total);
            cf.setImportePagado(0.00);
            cuotas.add(cf);
        }
        CuentaCorrienteCliente ccc = new CuentaCorrienteCliente();
        ccc.setComprobante(null);
        ccc.setConsorcio(consorcio);
        ccc.setDebe(total);
        ccc.setFecha(fecha);
        ccc.setHaber(0.0);
        ccc.setComprobante(iv);
        ccc.setRecibo(null);
        ccc.setSaldo(consorcio.getSaldo() + total);
        ccc.setTipoComprobante(tipoCompr);
//        try {
//            new CuentaCorrienteClienteService().saveCuentaCorrienteCliente(ccc);
//        } catch (Exception ex) {
//            Logger.getLogger(FacturaReparacionFrame.class.getName()).log(Level.SEVERE, null, ex);
//        }
        consorcio.setSaldo(consorcio.getSaldo() + total);
        RenglonTrabajoReparacion rtr;
//        try {
//            new ConsorcioService().updateConsorcio(consorcio);
//        } catch (Exception ex) {
//            Logger.getLogger(FacturaReparacionFrame.class.getName()).log(Level.SEVERE, null, ex);
//        }
        try {
           // new ComprobanteService().saveComprobanteAndCtaCteAndConso2(iv, ivr, consorcio, ccc, cuotas, rtr);
            grabado = true;
        } catch (Exception ex) {
            Logger.getLogger(FacturaReparacionFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "ERROR GRABANDO COMPROBANTE");
        }
//            UtilFrame.generarQr(iv);
        return iv;
    }

//    private void dataQr() {
//        // crear QR
//        String modeloFcPapel = "011";
//        String cui = titular.getCuit();
//        String pri = "";
//        String med = "";
//        String fin = "";
//        int lgo = cui.length();
//        if (lgo != 13) {
//            cui = "0000000000000" + cui;
//            int lgo1 = cui.length();
//            fin = cui.substring(lgo1 - 11, lgo1);
//        }
//        if (lgo > 11) {
//            pri = cui.substring(0, 2);
//            med = cui.substring(3, 11);
//            fin = cui.substring(12, 13);
//        }
//        fecha_qr = sdf_qr.format(fecha);
//        numeroDoc_qr = pri + med + fin;
//        tipoComprobante_qr = modeloFcPapel;
//        numeroComprobante_qr = numeroFactura.toString();
//        importe_qr = df.format(total);
//        tipoDoc_qr = "80";
//        nroCae_qr = cae.toString();
//        puntoVenta_qr = titular.getSucursal().toString();
//        String data = "{\"ver\":" + ver_qr
//                + ",\"fecha\":\"" + fecha_qr + "\""
//                + ",\"cuit\":" + cuit_qr
//                + ",\"ptoVta\":" + puntoVenta_qr
//                + ",\"tipoCmp\":" + tipoComprobante_qr
//                + ",\"nroCmp\":" + numeroComprobante_qr
//                + ",\"importe\":" + importe_qr
//                + ",\"moneda\":\"" + moneda_qr + "\""
//                + ",\"ctz\":" + cotiz_qr
//                + ",\"tipoDocRec\":" + tipoDoc_qr
//                + ",\"nroDocRec\":" + numeroDoc_qr
//                + ",\"tipoCodAut\":\"" + tipoCodigoAutoriz_qr + "\""
//                + ",\"codAut\":" + nroCae_qr + "}";
////        try {
//////            generarQR(data);
////        } catch (Exception ex) {
////            Logger.getLogger(PDFBuilder.class.getName()).log(Level.SEVERE, null, ex);
////        }
//
//        // fin crear QR
    private boolean validar() {
        int rowT = comboT.getSelectedIndex();
        int rowC = comboC.getSelectedIndex();
        int rowR = comboR.getSelectedIndex();
        if (rowT < 1) {
            JOptionPane.showMessageDialog(this, "DEBE SELECCIONAR UN TITULAR PARA FACTURAR");
            comboT.requestFocus();
            return false;
        }
        if (rowC < 1) {
            JOptionPane.showMessageDialog(this, "DEBE SELECCIONAR CUOTAS PARA FACTURAR");
            comboC.requestFocus();
            return false;
        }
        Double tot;
        try {
            tot = Double.valueOf(totalTxt.getText().replace(",", "."));
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "VERIFIQUE EL IMPORTE TOTAL");
            tot = 0.0;
            return false;
        }
        if (tot.equals(0.0)) {
            JOptionPane.showMessageDialog(this, "VERIFIQUE QUE IMPORTE TOTAL SEA MAYOR QUE 0.00");
            return false;
        }
        if (rowR < 1) {
            JOptionPane.showMessageDialog(this, "DEBE SELECCIONAR RUBRO PARA FACTURAR");
            comboR.requestFocus();
            return false;
        }
        return true;
    }

    private void cargarLineas(int r) {
        TextoPredefinido tp1 = textos.get(r - 1);
        lineas = null;
        if (consorcio != null) {
            try {
                lineas = new TextoPredefinidoLineaService().getAllTextoPredefinidoActivosByTextoPredefinido(tp1);
            } catch (Exception ex) {
                Logger.getLogger(FacturaReparacionFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (lineas != null && !lineas.isEmpty()) {
                DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
                for (TextoPredefinidoLinea tpl : lineas) {
                    Object o[] = new Object[2];
                    o[0] = tpl.getLinea();
                    o[1] = "";
                    tbl.addRow(o);
                }
                tabla.setModel(tbl);
            }
        }
    }
}
