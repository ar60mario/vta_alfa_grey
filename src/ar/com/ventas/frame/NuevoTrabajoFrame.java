/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.ventas.frame;

import ar.com.ventas.entities.Consorcio;
import ar.com.ventas.entities.Estructura;
import ar.com.ventas.entities.EstructuraServicio;
import ar.com.ventas.entities.OrdenFactura;
import ar.com.ventas.entities.Persona;
import ar.com.ventas.entities.RenglonTrabajo;
import ar.com.ventas.entities.Rubro;
import ar.com.ventas.entities.Trabajo;
import ar.com.ventas.entities.Servicio;
import ar.com.ventas.estructuras.CampoEstructura;
import ar.com.ventas.estructuras.Constantes;
import ar.com.ventas.main.MainFrame;
import ar.com.ventas.services.ConsorcioService;
import ar.com.ventas.services.EstructuraServicioService;
import ar.com.ventas.services.PersonaService;
import ar.com.ventas.services.RenglonTrabajoService;
import ar.com.ventas.services.RubroService;
import ar.com.ventas.services.TrabajoService;
import ar.com.ventas.services.ServicioService;
import ar.com.ventas.util.UtilFrame;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Mario
 */
public class NuevoTrabajoFrame extends javax.swing.JFrame {

    private final SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    private List<Consorcio> consorcios;
    private Consorcio consorcio;
    private List<Rubro> rubros;
    private Rubro rubro;
    private List<RenglonTrabajo> renglones = new ArrayList<>();
    private List<Persona> personas;
    private List<EstructuraServicio> es = null;
    private Integer rowC;
    private final Trabajo trabajo = new Trabajo();
    private String caracteristicas = "";
    private Boolean bacterio;
    private Boolean fisicoQi;
    private Date fechaCargar;

    /**
     * Creates new form NuevoServicioFrame
     *
     */
    public NuevoTrabajoFrame() {
        initComponents();
        getContentPane().setBackground(new java.awt.Color(Constantes.getR(), Constantes.getG(), Constantes.getB()));
        this.setLocationRelativeTo(null);
//        setExtendedState(6); //this.MAXIMIZED_BOTH
        llenarListas();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        volverBtn = new javax.swing.JButton();
        comboS = new javax.swing.JComboBox<>();
        guardarBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        completarBtn = new javax.swing.JButton();
        comboC = new javax.swing.JComboBox<>();
        personaLbl = new javax.swing.JLabel();
        comboP = new javax.swing.JComboBox<>();
        fechaLbl = new javax.swing.JLabel();
        fecha2Txt = new javax.swing.JTextField();
        textoLbl = new javax.swing.JLabel();
        textoTxt = new javax.swing.JTextField();
        cantidadLbl = new javax.swing.JLabel();
        cantidadTxt = new javax.swing.JTextField();
        importeLbl = new javax.swing.JLabel();
        importeTxt = new javax.swing.JTextField();
        opcionLbl = new javax.swing.JLabel();
        comboO = new javax.swing.JComboBox<>();
        cargarBtn = new javax.swing.JButton();
        descartarBtn = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        calleTxt = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        textoEnFacturaTxt = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("CARGA NUEVO TRABAJO");

        jLabel1.setText("Consorcio:");

        jLabel2.setText("Rubro:");

        volverBtn.setText("Volver");
        volverBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverBtnActionPerformed(evt);
            }
        });

        comboS.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboSActionPerformed(evt);
            }
        });
        comboS.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                comboSKeyPressed(evt);
            }
        });

        guardarBtn.setText("Guardar");
        guardarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarBtnActionPerformed(evt);
            }
        });

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CAMPO", "CONTENIDO"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tabla);

        completarBtn.setText("Completar");
        completarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                completarBtnActionPerformed(evt);
            }
        });

        comboC.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboCActionPerformed(evt);
            }
        });
        comboC.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                comboCKeyPressed(evt);
            }
        });

        personaLbl.setText("Persona:");

        comboP.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboP.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                comboPMouseClicked(evt);
            }
        });
        comboP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                comboPKeyPressed(evt);
            }
        });

        fechaLbl.setText("Fecha:");

        fecha2Txt.setText("FECHA");
        fecha2Txt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fecha2TxtKeyPressed(evt);
            }
        });

        textoLbl.setText("Texto:");

        textoTxt.setText("TEXTO");
        textoTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                textoTxtKeyPressed(evt);
            }
        });

        cantidadLbl.setText("Cantidad:");

        cantidadTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        cantidadTxt.setText("CATIDAD");
        cantidadTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cantidadTxtKeyPressed(evt);
            }
        });

        importeLbl.setText("Importe:");

        importeTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        importeTxt.setText("IMPORTE");
        importeTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                importeTxtKeyPressed(evt);
            }
        });

        opcionLbl.setText("Opci√≥n:");

        comboO.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "", "SI", "NO" }));
        comboO.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                comboOMouseClicked(evt);
            }
        });
        comboO.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                comboOKeyPressed(evt);
            }
        });

        cargarBtn.setText("Cargar");
        cargarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cargarBtnActionPerformed(evt);
            }
        });

        descartarBtn.setText("Descartar");
        descartarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                descartarBtnActionPerformed(evt);
            }
        });

        jLabel6.setText("Buscar x Calle:");

        calleTxt.setText("CALLE");
        calleTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                calleTxtKeyPressed(evt);
            }
        });

        jLabel3.setText("TEXTO EN FACTURA:");

        textoEnFacturaTxt.setText("TEXTO EN FACTURA");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(guardarBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(volverBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(completarBtn)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(calleTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(textoEnFacturaTxt))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel1)
                                        .addComponent(jLabel2))
                                    .addGap(18, 18, 18)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(comboS, 0, 542, Short.MAX_VALUE)
                                        .addComponent(comboC, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 671, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(93, 93, 93)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(textoLbl)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(textoTxt))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(cantidadLbl)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(cantidadTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(personaLbl)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(comboP, javax.swing.GroupLayout.PREFERRED_SIZE, 347, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(fechaLbl)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(fecha2Txt, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(opcionLbl)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(comboO, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(cargarBtn)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(descartarBtn))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(importeLbl)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(importeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(0, 69, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(calleTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(comboC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(comboS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(personaLbl)
                    .addComponent(comboP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fechaLbl)
                            .addComponent(fecha2Txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(textoLbl)
                            .addComponent(textoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cantidadLbl)
                            .addComponent(cantidadTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(importeLbl)
                            .addComponent(importeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(opcionLbl)
                            .addComponent(comboO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cargarBtn)
                            .addComponent(descartarBtn))
                        .addGap(164, 164, 164))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(textoEnFacturaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addComponent(completarBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(volverBtn)
                    .addComponent(guardarBtn))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void volverBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverBtnActionPerformed
        volver();
    }//GEN-LAST:event_volverBtnActionPerformed

    private void guardarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarBtnActionPerformed
        guardar();
    }//GEN-LAST:event_guardarBtnActionPerformed

    private void comboSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboSActionPerformed
        if (evt.getModifiers() == 16) {
            int rowS = comboS.getSelectedIndex();
            rowC = comboC.getSelectedIndex();
            if (rowC < 1) {
                JOptionPane.showMessageDialog(this, "DEBE SELECCIONAR UN CONSORCIO");
                return;
            }
            if (rowS < 1) {
                JOptionPane.showMessageDialog(this, "DEBE SELECCIONAR UN RUBRO");
                return;
            }
            if (rowS > 0) {
                tabla = UtilFrame.limpiarTabla(tabla);
                consorcio = consorcios.get(rowC -1);
                rubro = rubros.get(rowS -1);
                if (!verificarServicio()) {
                    NuevoServicioFrame_1 nsf = new NuevoServicioFrame_1(consorcio, rubro);
                    nsf.setVisible(true);
                    this.dispose();
                } else {
                    crearRenglones();
                    cargarCampos(rowS);
                }
            }
        }
    }//GEN-LAST:event_comboSActionPerformed

    private void completarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_completarBtnActionPerformed
        completar();
    }//GEN-LAST:event_completarBtnActionPerformed

    private void comboCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboCActionPerformed
        if (evt.getModifiers() == 16) {
            rowC = comboC.getSelectedIndex();
            if (rowC > 0) {
                consorcio = consorcios.get(rowC - 1);
                llenarComboS();
            }
        }
    }//GEN-LAST:event_comboCActionPerformed

    private void descartarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_descartarBtnActionPerformed
        descartar();
    }//GEN-LAST:event_descartarBtnActionPerformed

    private void cargarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cargarBtnActionPerformed
        cargar();
    }//GEN-LAST:event_cargarBtnActionPerformed

    private void calleTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_calleTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            if (calleTxt.isEditable()) {
                llenarComboC();
            }
        }
    }//GEN-LAST:event_calleTxtKeyPressed

    private void tablaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaMouseClicked
        ocultarCampos();
        completar();
    }//GEN-LAST:event_tablaMouseClicked

    private void fecha2TxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fecha2TxtKeyPressed
        if (evt.getKeyCode() == 10) {
            String fe = fecha2Txt.getText();
            int largo = fe.length();
            if (largo == 10) {
                Date f = new Date();
                try {
                    f = sdf.parse(fe);
                } catch (ParseException ex) {
                    Logger.getLogger(NuevoTrabajoFrame.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, "ERROR EN FECHA");
                    return;
                }
                trabajo.setFecha(f);
                fechaCargar = f;
                cargar();
            } else {
                fe = UtilFrame.fecha(fe);
                fecha2Txt.setText(fe);
            }
        }
    }//GEN-LAST:event_fecha2TxtKeyPressed

    private void textoTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textoTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            cargar();
        }
    }//GEN-LAST:event_textoTxtKeyPressed

    private void comboPKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comboPKeyPressed
        int row = comboP.getSelectedIndex();
        if (row > 0) {
            if (evt.getKeyCode() == 10) {
                cargar();
            }
        }
    }//GEN-LAST:event_comboPKeyPressed

    private void cantidadTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cantidadTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            cargar();
        }
    }//GEN-LAST:event_cantidadTxtKeyPressed

    private void importeTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_importeTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            cargar();
        }
    }//GEN-LAST:event_importeTxtKeyPressed

    private void comboOKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comboOKeyPressed
        if (evt.getKeyCode() == 10) {
            int row = comboO.getSelectedIndex();
            if (row > 0) {
                cargar();
            }
        }
    }//GEN-LAST:event_comboOKeyPressed

    private void comboCKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comboCKeyPressed
        if (evt.getKeyCode() == 10) {
            rowC = comboC.getSelectedIndex();
            if (rowC > 0) {
                consorcio = consorcios.get(rowC - 1);
                llenarComboS();
            }
        }
    }//GEN-LAST:event_comboCKeyPressed

    private void comboSKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comboSKeyPressed
        if (evt.getKeyCode() == 10) {
            int rowS = comboS.getSelectedIndex();
            rowC = comboC.getSelectedIndex();
            if (rowC < 1) {
                JOptionPane.showMessageDialog(this, "DEBE SELECCIONAR UN CONSORCIO");
                return;
            }
            if (rowS < 1) {
                JOptionPane.showMessageDialog(this, "DEBE SELECCIONAR UN RUBRO");
                return;
            }
            if (rowS > 0) {
                tabla = UtilFrame.limpiarTabla(tabla);
                consorcio = consorcios.get(rowC -1);
                rubro = rubros.get(rowS -1);
                if (!verificarServicio()) {
                    NuevoServicioFrame_1 nsf = new NuevoServicioFrame_1(consorcio, rubro);
                    nsf.setVisible(true);
                    this.dispose();
                } else {
                    crearRenglones();
                    cargarCampos(rowS);
                }
//                verificarServicio();
//                crearRenglones();
//                cargarCampos(rowS);
            }
        }
    }//GEN-LAST:event_comboSKeyPressed

    private void comboOMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_comboOMouseClicked
        int row = comboO.getSelectedIndex();
        if (row > 0) {
            if (evt.getModifiers() == 16) {
                cargar();
            }
        }
    }//GEN-LAST:event_comboOMouseClicked

    private void comboPMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_comboPMouseClicked
        int row = comboP.getSelectedIndex();
        if (row > 0) {
            if (evt.getModifiers() == 16) {
                cargar();
            }
        }
    }//GEN-LAST:event_comboPMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NuevoTrabajoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NuevoTrabajoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NuevoTrabajoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NuevoTrabajoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NuevoTrabajoFrame().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField calleTxt;
    private javax.swing.JLabel cantidadLbl;
    private javax.swing.JTextField cantidadTxt;
    private javax.swing.JButton cargarBtn;
    private javax.swing.JComboBox<String> comboC;
    private javax.swing.JComboBox<String> comboO;
    private javax.swing.JComboBox<String> comboP;
    private javax.swing.JComboBox<String> comboS;
    private javax.swing.JButton completarBtn;
    private javax.swing.JButton descartarBtn;
    private javax.swing.JTextField fecha2Txt;
    private javax.swing.JLabel fechaLbl;
    private javax.swing.JButton guardarBtn;
    private javax.swing.JLabel importeLbl;
    private javax.swing.JTextField importeTxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel opcionLbl;
    private javax.swing.JLabel personaLbl;
    private javax.swing.JTable tabla;
    private javax.swing.JTextField textoEnFacturaTxt;
    private javax.swing.JLabel textoLbl;
    private javax.swing.JTextField textoTxt;
    private javax.swing.JButton volverBtn;
    // End of variables declaration//GEN-END:variables

    private void llenarListas() {
        limpiarCampos();
        consorcios = null;
        comboC.removeAllItems();
        comboC.addItem("");
        rubros = null;
        comboS.removeAllItems();
        comboS.addItem("");
        //crearRenglones();
        calleTxt.requestFocus();

    }

    private void guardar() {
        if (validar()) {
            int rowT = comboS.getSelectedIndex();
            rubro = rubros.get(rowT - 1);
            Servicio servicio = definirServicio(rubro, consorcio);
            System.out.println(servicio);
            System.exit(0);
            servicio.setCaracteristicas(caracteristicas);
            int cantidadCuotas = servicio.getCantidadCuotas();
            Double impS = servicio.getImporte();
            String textoFc = trabajo.getTextoEnFactura();
            Trabajo trabajo = new Trabajo();
            trabajo.setActivo(true);
            trabajo.setCuota(1);
            trabajo.setFacturaEmitida(false);
            trabajo.setReciboEmitido(false);
            trabajo.setFecha(fechaCargar);
            trabajo.setTextoEnFactura("");
            trabajo.setServicio(servicio);
            trabajo.setPdfGenerado(false);
            trabajo.setRenovado(false);
            OrdenFactura of = new OrdenFactura();
            of.setActivo(true);
            of.setCantidadCuotas(cantidadCuotas);
            of.setCobranzaPorRecibo(true);
            of.setImporte(impS);
            of.setTextoFactura(textoFc);
            of.setTrabajo(trabajo);
            for (RenglonTrabajo rs : renglones) {
                rs.setTrabajo(trabajo);
            }
            try {
                new TrabajoService().saveTrabajoCompleto(trabajo, renglones);
                JOptionPane.showMessageDialog(this, "TRABAJO GUARDADO CORRECTAMENTE");
            } catch (Exception ex) {
                Logger.getLogger(NuevoTrabajoFrame.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "ERROR Nro. 569 GUARDANDO TRABAJO");
                return;
            }
            servicio.setTrabajoCreado(true);
            try {
                new ServicioService().updateServicio(servicio);
            } catch (Exception ex) {
                Logger.getLogger(NuevoTrabajoFrame.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "ERROR Nro. 621 GUARDANDO SERVICIO");
            }
            volver();
        }
    }

    private void crearRenglones() {
        renglones = new ArrayList<>();
        fechaCargar = new Date();
        int rowS = comboS.getSelectedIndex();
        if (rowS > 0) {
            rubro = rubros.get(rowS - 1);
            Servicio servicio = definirServicio(rubro, consorcio);

//            servicio = servicios.get(rowS - 1);
            if (servicio != null) {
                if (servicio.getBacteriologico()) {
                    bacterio = true;
                } else {
                    bacterio = false;
                }
                if (servicio.getFisicoQuimico()) {
                    fisicoQi = true;
                } else {
                    fisicoQi = false;
                }
                caracteristicas = servicio.getCaracteristicas();
            }
//            Rubro rubro = servicio.getRubro();
            Estructura estructura = rubro.getEstructura();
            List<EstructuraServicio> es = null;
            try {
                es = new EstructuraServicioService().getAllEstructuraServicioByEstructuraActivos(estructura);
            } catch (Exception ex) {
                Logger.getLogger(NuevoTrabajoFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (es != null && !es.isEmpty()) {
                for (EstructuraServicio e : es) {
                    RenglonTrabajo rs = new RenglonTrabajo();
                    rs.setActivo(true);
                    rs.setVisible(e.getVisible());
                    rs.setCampo(e.getContenido());
                    rs.setCodigoCampo(e.getCampoEstructura());
                    rs.setContenido("");
                    rs.setFecha(fechaCargar);
                    rs.setTrabajo(trabajo);
                    rs.setOrden(e.getOrden());
                    CampoEstructura ce = CampoEstructura.fromCodigo(rs.getCodigoCampo());
                    String content = ce.crearCampo(fechaCargar, caracteristicas, bacterio, fisicoQi);
                    rs.setContenido(content);
                    renglones.add(rs);
                }

            }
        }
    }

    private void cargarCampos(int rowS) {
        comboC.setEnabled(false);
        comboS.setEnabled(false);
        calleTxt.setEditable(false);
        rubro = rubros.get(rowS - 1);
        Estructura estructura = rubro.getEstructura();
        es = null;
        try {
            es = new EstructuraServicioService().getAllEstructuraServicioByEstructuraActivos(estructura);
        } catch (Exception ex) {
            Logger.getLogger(NuevoTrabajoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (es != null && !es.isEmpty()) {
            DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
            int rowH = 0;
//            int linO;
            String sn;

            for (EstructuraServicio e : es) {
                Object o[] = new Object[2];
                o[0] = e.getContenido();
                if (renglones != null && !renglones.isEmpty()) {
                    RenglonTrabajo rs = renglones.get(rowH);
                    if (rs.getContenido().isEmpty()) {
                        o[1] = "";
                    } else {
                        int ce = rs.getCodigoCampo();
                        CampoEstructura campoEstr = CampoEstructura.fromCodigo(ce);
                        o[1] = campoEstr.mostrarCampos(rs.getContenido());

                    }

                } else {
                    o[1] = "";
                }
                tbl.addRow(o);
                rowH += 1;
            }
            tabla.setModel(tbl);
        }
        textoEnFacturaTxt.setText(rubro.getTextoEnFactura());
    }

    private void completar() {
        int row = tabla.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(this, "SELECCIONE PARA COMPLETAR");
            return;
        }
        if (renglones != null && !renglones.isEmpty()) {
            int ce = renglones.get(row).getCodigoCampo();

            RenglonTrabajo re = renglones.get(row);
            String st = re.getContenido();
            CampoEstructura ce2 = CampoEstructura.fromCodigo(ce);
            ce2.visualizarCampos(comboP, fecha2Txt, textoTxt, cantidadTxt, importeTxt, comboO, personaLbl, fechaLbl, textoLbl, cantidadLbl, importeLbl, opcionLbl, st);

        }
    }

    private boolean validar() {
        int rowS = comboS.getSelectedIndex();
        rowC = comboC.getSelectedIndex();
        rubro = rubros.get(rowS - 1);
        consorcio = consorcios.get(rowC -1);
        Servicio se = definirServicio(rubro, consorcio);
//        int periodicidad = se.getPeriodicidad();
//        Consorcio cons = consorcios.get(rowC - 1);
        List<Trabajo> trabajos;
        List<RenglonTrabajo> renglones2 = null;
        try {
            trabajos = new TrabajoService().getTrabajosByConsorcioAndServicio(consorcio, se);
        } catch (Exception ex) {
            return true;
        }
        if (trabajos != null && !trabajos.isEmpty()) {
            try {
                renglones2 = new RenglonTrabajoService().getAllRenglonesByTrabajoActivos(trabajos);
            } catch (Exception ex) {
                Logger.getLogger(NuevoTrabajoFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            Date d1;
            int mes1 = 0;
            int anio1 = 0;
            if (renglones != null && !renglones.isEmpty()) {
                for (RenglonTrabajo r : renglones) {
                    int codigo = r.getCodigoCampo();
                    if (codigo == 4) {
                        if (r.getContenido().trim().isEmpty()) {
                            JOptionPane.showMessageDialog(this, "TRABAJO SIN FECHA");
                            return false;
                        }
                        try {
                            d1 = sdf.parse(r.getContenido());
                        } catch (ParseException ex) {
                            Logger.getLogger(NuevoTrabajoFrame.class.getName()).log(Level.SEVERE, null, ex);
                            JOptionPane.showMessageDialog(this, "ERROR EN FECHA");
                            return false;
                        }
                        Calendar cal = Calendar.getInstance();
                        cal.setTime(d1);
                        mes1 = cal.get(Calendar.MONTH);
                        anio1 = cal.get(Calendar.YEAR);
                    }
                    if (codigo == 15 || codigo == 16) {
                        if (r.getContenido().trim().isEmpty()) {
                            JOptionPane.showMessageDialog(this, "DEBE TENER UNA OPCION DE ANALISIS");
                            return false;
                        }
                    }
                    if (codigo == 11 || codigo == 10) {
                        if (r.getContenido().trim().isEmpty()) {
                            JOptionPane.showMessageDialog(this, "DEBE TENER UNA OPCION ENVIO O RECEPCION DE ANALISIS");
                            return false;
                        }
                    }
                }
                for (RenglonTrabajo r : renglones2) {
                    int codigo = r.getCodigoCampo();
                    if (codigo == 4) {
                        Date d2 = new Date();
                        try {
                            d2 = sdf.parse(r.getContenido());
                        } catch (ParseException ex) {
                            Logger.getLogger(NuevoTrabajoFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        Calendar cal = Calendar.getInstance();
                        cal.setTime(d2);
                        int mes2 = cal.get(Calendar.MONTH);
                        int anio2 = cal.get(Calendar.YEAR);
                        if (anio1 == anio2) {
                            if (mes1 == mes2) {
                                JOptionPane.showMessageDialog(this, "TRABAJO EXISTENTE");
                                return false;
                            }
                        }
                    }
                }
            }
        }
        return true;
    }

    private void llenarComboS() {
        Consorcio c = consorcios.get(rowC - 1);
        rubros = null;
        try {
            rubros = new RubroService().getAllRubrosActivos();
        } catch (Exception ex) {
            Logger.getLogger(NuevoTrabajoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        comboS.removeAllItems();
        comboS.addItem("");
        if (rubros != null && !rubros.isEmpty()) {
            for (Rubro t : rubros) {
                comboS.addItem(t.getDetalle());
            }
            comboS.requestFocus();
            comboS.addFocusListener(null);
            comboS.showPopup();
        }
    }

    private void limpiarCampos() {
        calleTxt.setText("");
        comboP.removeAllItems();
        comboP.addItem("");
        personas = null;
        try {
            personas = new PersonaService().getEmpleadosActivos();
        } catch (Exception ex) {
            Logger.getLogger(CompletarRenglonServicioFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (personas != null && !personas.isEmpty()) {
            for (Persona pe : personas) {
                comboP.addItem(pe.getApellidoNombre());
            }
        }
        ocultarCampos();
    }

    private void descartar() {
        limpiarCampos();
    }

    private void cargar() {
        int row = tabla.getSelectedRow();
        RenglonTrabajo renglon = renglones.get(row);
        int ce = renglones.get(row).getCodigoCampo();
        CampoEstructura campoEstr = CampoEstructura.fromCodigo(ce);
        String str = "";
        int linP = comboP.getSelectedIndex();
        int linO = comboO.getSelectedIndex();
        str = textoTxt.getText();
        campoEstr.cargarCampos(fecha2Txt,
                renglon, linP, personas, linO, str);
        renglones.set(row, renglon);
        tabla = UtilFrame.limpiarTabla(tabla);
        llenarTabla();
        limpiarCampos();
        tabla.requestFocus();
    }

    private void llenarTabla() {
        DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
        int rowH = 0;
        for (EstructuraServicio e : es) {
            Object o[] = new Object[2];
            o[0] = e.getContenido();
            if (renglones != null && !renglones.isEmpty()) {
                RenglonTrabajo rs = renglones.get(rowH);
                if (rs.getContenido().isEmpty()) {
                    o[1] = "";
                } else {
                    int ce = rs.getCodigoCampo();
                    CampoEstructura campoEstr = CampoEstructura.fromCodigo(ce);
                    String x1 = campoEstr.mostrarCampos(rs.getContenido());
                    o[1] = x1;
                }
            } else {
                o[1] = "";
            }
            tbl.addRow(o);
            rowH += 1;
        }
        tabla.setModel(tbl);
    }

    private void llenarComboC() {
        String calle = calleTxt.getText();
        consorcios = null;
        try {
            consorcios = new ConsorcioService().getAllConsorciosActivosByFiltro(calle);
        } catch (Exception ex) {
            Logger.getLogger(NuevoTrabajoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (consorcios != null && !consorcios.isEmpty()) {
            comboC.removeAllItems();
            comboC.addItem("");
            for (Consorcio c : consorcios) {
                comboC.addItem(c.getNombre() + " "
                        + c.getDomicilio().getCalle() + " "
                        + c.getDomicilio().getNumero());
            }
            comboC.requestFocus();
            comboC.addFocusListener(null);
            comboC.showPopup();
        }
    }

    private void volver() {
        MainFrame asf = new MainFrame();
        asf.setVisible(true);
        this.dispose();
    }

    private void ocultarCampos() {
        fechaLbl.setVisible(false);
        personaLbl.setVisible(false);
        textoLbl.setVisible(false);
        cantidadLbl.setVisible(false);
        importeLbl.setVisible(false);
        opcionLbl.setVisible(false);
        fecha2Txt.setVisible(false);
        comboP.setVisible(false);
        textoTxt.setVisible(false);
        cantidadTxt.setVisible(false);
        importeTxt.setVisible(false);
        comboO.setVisible(false);
        cargarBtn.setVisible(false);
        descartarBtn.setVisible(false);
        completarBtn.setVisible(false);
    }

    private Boolean verificarServicio() {
        Servicio servicio;
        try {
            servicio = new ServicioService().getServicioActivoByRubroAndConsorcio(rubro, consorcio);
        } catch (Exception ex) {
            return false;
        }
        return servicio != null;
    }

    private Servicio definirServicio(Rubro rubro, Consorcio consorcio) {
        Servicio servicio = null;
        try {
            servicio = new ServicioService().getServicioActivoByRubroAndConsorcio(rubro, consorcio);
        } catch (Exception ex) {
            Logger.getLogger(NuevoTrabajoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        return servicio;
    }
}
