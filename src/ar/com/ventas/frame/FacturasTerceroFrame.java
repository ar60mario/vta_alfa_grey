/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.ventas.frame;

import ar.com.ventas.entities.Consorcio;
import ar.com.ventas.entities.FacturaDeTercero;
import ar.com.ventas.estructuras.Constantes;
import ar.com.ventas.main.MainFrame;
import ar.com.ventas.services.ConsorcioService;
import ar.com.ventas.services.FacturaDeTerceroService;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Mario
 */
public class FacturasTerceroFrame extends javax.swing.JFrame {

    private List<FacturaDeTercero> facturas;
    private SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    private DecimalFormat df = new DecimalFormat("#0.00");
    private List<Consorcio> consorcios;

    /**
     * Creates new form FacturasTerceroFrame
     */
    public FacturasTerceroFrame() {
        initComponents();
        getContentPane().setBackground(new java.awt.Color(Constantes.getR(), Constantes.getG(), Constantes.getB()));
        this.setLocationRelativeTo(null);
//        setExtendedState(this.MAXIMIZED_BOTH);
        llenarCombo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        nuevaBtn = new javax.swing.JButton();
        volverBtn = new javax.swing.JButton();
        modificarBtn = new javax.swing.JButton();
        confirmarEntregaBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        combo = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("ABM FACTURAS DE TERCEROS POR CONSORCIO");

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "FECHA", "NUMERO", "PROVEEDOR", "TOTAL", "ENTREGADA"
            }
        ));
        jScrollPane1.setViewportView(tabla);

        nuevaBtn.setText("Nueva");
        nuevaBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevaBtnActionPerformed(evt);
            }
        });

        volverBtn.setText("Volver");
        volverBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverBtnActionPerformed(evt);
            }
        });

        modificarBtn.setText("Modificar");
        modificarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modificarBtnActionPerformed(evt);
            }
        });

        confirmarEntregaBtn.setText("Confirmar Entrega");
        confirmarEntregaBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmarEntregaBtnActionPerformed(evt);
            }
        });

        jLabel1.setText("Consorcio:");

        combo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        combo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(volverBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 796, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(nuevaBtn)
                                .addGap(18, 18, 18)
                                .addComponent(modificarBtn)
                                .addGap(18, 18, 18)
                                .addComponent(confirmarEntregaBtn))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(combo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(0, 186, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(combo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nuevaBtn)
                    .addComponent(modificarBtn)
                    .addComponent(confirmarEntregaBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addComponent(volverBtn)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void volverBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverBtnActionPerformed
        volver();
    }//GEN-LAST:event_volverBtnActionPerformed

    private void confirmarEntregaBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmarEntregaBtnActionPerformed
        confirmar();
    }//GEN-LAST:event_confirmarEntregaBtnActionPerformed

    private void modificarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modificarBtnActionPerformed
        modificar();
    }//GEN-LAST:event_modificarBtnActionPerformed

    private void nuevaBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevaBtnActionPerformed
        nueva();
    }//GEN-LAST:event_nuevaBtnActionPerformed

    private void comboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboActionPerformed
        int row = combo.getSelectedIndex();
        if (row > 0) {
            Consorcio co = consorcios.get(row - 1);
            llenarTabla(co);
        }
    }//GEN-LAST:event_comboActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FacturasTerceroFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FacturasTerceroFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FacturasTerceroFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FacturasTerceroFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FacturasTerceroFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> combo;
    private javax.swing.JButton confirmarEntregaBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton modificarBtn;
    private javax.swing.JButton nuevaBtn;
    private javax.swing.JTable tabla;
    private javax.swing.JButton volverBtn;
    // End of variables declaration//GEN-END:variables

    private void volver() {
        MainFrame mf = new MainFrame();
        mf.setVisible(true);
        this.dispose();
    }

    private void confirmar() {
        int row = combo.getSelectedIndex();
        if(row > 0){
            int rowT = tabla.getSelectedRow();
            if(rowT < 0){
                JOptionPane.showMessageDialog(this, "DEBE SELECCIONAR UNA FACTURA PARA CONFIRMAR ENTREGA");
                return;
            }
            FacturaDeTercero ft = facturas.get(rowT);
            ft.setEntregada(true);
            int a = JOptionPane.showConfirmDialog(this, "CONFIRME LA ENTREGA DE FACTURA\n"+ft.getNumero()
                    , "Atención", JOptionPane.YES_NO_OPTION);
            if(a==0){
                try {
                    new FacturaDeTerceroService().updateFacturaDeTercero(ft);
                    JOptionPane.showMessageDialog(this, "FACTURA ACTUALIZADA CORRECTAMENTE");
                } catch (Exception ex) {
                    Logger.getLogger(FacturasTerceroFrame.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, "ERROR Nro.248 ACTUALIZANDO FACTURA");
                    return;
                }
            }
            Consorcio co = consorcios.get(row -1);
            llenarTabla(co);
        }
    }

    private void modificar() {
        int row = combo.getSelectedIndex();
        if (row > 0) {
            Consorcio co = consorcios.get(row - 1);
            int rowT = tabla.getSelectedRow();
            if (rowT < 0) {
                JOptionPane.showMessageDialog(this, "SELECCIONE UNA FACTURA PARA MODIFICAR");
                return;
            }
            FacturaDeTercero ft = facturas.get(rowT);
            ModificarFacturaTerceroFrame mftf = new ModificarFacturaTerceroFrame(co, ft);
            mftf.setVisible(true);
            this.dispose();
        }
    }

    private void nueva() {
        int row = combo.getSelectedIndex();
        if (row > 0) {
            Consorcio co = consorcios.get(row - 1);
            NuevaFacturaTerceroFrame nftf = new NuevaFacturaTerceroFrame(co);
            nftf.setVisible(true);
            this.dispose();
        } else {
            JOptionPane.showMessageDialog(this, "DEBE SELECCIONAR UN CONSORCIO PARA ASIGNAR A NUEVA FACTURA");
            return;
        }
    }

    private void llenarTabla(Consorcio consorcio) {
        limpiarTabla();
        facturas = null;
        try {
            facturas = new FacturaDeTerceroService().getAllFacturasDeTerceroNoCobradasByConsorcio(consorcio);
        } catch (Exception ex) {
            Logger.getLogger(FacturasTerceroFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (facturas != null && !facturas.isEmpty()) {
            DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
            for (FacturaDeTercero ft : facturas) {
                Object o[] = new Object[5];
                o[0] = sdf.format(ft.getFecha());
                o[1] = ft.getNumero();
                o[2] = ft.getProveedor();
                o[3] = df.format(ft.getTotal());
                if (ft.getEntregada()) {
                    o[4] = "ENTREGADA";
                } else {
                    o[4] = "NO ENTREGADA";
                }
                tbl.addRow(o);
            }
            tabla.setModel(tbl);
        }
    }

    private void limpiarTabla() {
        int rows = tabla.getRowCount();
        if (rows > 0) {
            DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
            for (int i = 0; i < rows; i++) {
                tbl.removeRow(0);
            }
            tabla.setModel(tbl);
        }
    }

    private void llenarCombo() {
        consorcios = null;
        combo.removeAllItems();
        combo.addItem("");
        try {
            consorcios = new ConsorcioService().getAllConsorciosActivos();
        } catch (Exception ex) {
            Logger.getLogger(FacturasTerceroFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (consorcios != null && !consorcios.isEmpty()) {
            for (Consorcio co : consorcios) {
                combo.addItem(co.getNombre() + " "
                        + co.getDomicilio().getCalle() + " "
                        + co.getDomicilio().getNumero());
            }
        }
    }
}
