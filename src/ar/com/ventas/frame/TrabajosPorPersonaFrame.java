/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.ventas.frame;

import ar.com.ventas.entities.Configuracion;
import ar.com.ventas.entities.Domicilio;
import ar.com.ventas.entities.Persona;
import ar.com.ventas.entities.RenglonTrabajo;
import ar.com.ventas.entities.Trabajo;
import ar.com.ventas.estructuras.Constantes;
import ar.com.ventas.estructuras.Mes;
import ar.com.ventas.main.MainFrame;
import ar.com.ventas.services.ConfiguracionService;
import ar.com.ventas.services.PersonaService;
import ar.com.ventas.services.RenglonTrabajoService;
import ar.com.ventas.services.TrabajoService;
import ar.com.ventas.util.UtilFrame;
import java.io.File;
import java.io.IOException;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import jxl.Workbook;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;

/**
 *
 * @author Mario
 */
public class TrabajosPorPersonaFrame extends javax.swing.JFrame {

    private List<Persona> personas = null;
    private Persona persona;
    private List<Mes> meses;
    private final SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    private final SimpleDateFormat sdf_dia = new SimpleDateFormat("dd");
    private final DecimalFormat df = new DecimalFormat("#0.00");
    private final DecimalFormat df2 = new DecimalFormat("00000");

    /**
     * Creates new form TrabajosPorPersonaFrame
     */
    public TrabajosPorPersonaFrame() {
        initComponents();
        getContentPane().setBackground(new java.awt.Color(Constantes.getR(), Constantes.getG(), Constantes.getB()));
        this.setLocationRelativeTo(null);
//        setExtendedState(this.MAXIMIZED_BOTH);
        limpiarCampos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        nombreTxt = new javax.swing.JTextField();
        combo = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        volverBtn = new javax.swing.JButton();
        excelBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        comboMes = new javax.swing.JComboBox<>();
        comboAnio = new javax.swing.JComboBox<>();
        verBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("TRABAJOS POR PERSONA");

        jLabel1.setText("Nombre a Buscar:");

        nombreTxt.setText("NOMBRE");
        nombreTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                nombreTxtKeyPressed(evt);
            }
        });

        combo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        combo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboActionPerformed(evt);
            }
        });
        combo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                comboKeyPressed(evt);
            }
        });

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "DIA", "Dirección", "Trabajo", "Detalle", "Apellido y Nombre", "Otros Empleados", "Importe"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabla);
        if (tabla.getColumnModel().getColumnCount() > 0) {
            tabla.getColumnModel().getColumn(0).setPreferredWidth(50);
            tabla.getColumnModel().getColumn(1).setPreferredWidth(250);
            tabla.getColumnModel().getColumn(2).setPreferredWidth(200);
            tabla.getColumnModel().getColumn(3).setPreferredWidth(350);
            tabla.getColumnModel().getColumn(4).setPreferredWidth(250);
            tabla.getColumnModel().getColumn(5).setPreferredWidth(200);
            tabla.getColumnModel().getColumn(6).setPreferredWidth(70);
        }

        volverBtn.setText("Volver");
        volverBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverBtnActionPerformed(evt);
            }
        });

        excelBtn.setText("Excel");
        excelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                excelBtnActionPerformed(evt);
            }
        });

        jLabel2.setText("Período:");

        comboMes.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboMes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboMesActionPerformed(evt);
            }
        });
        comboMes.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                comboMesKeyPressed(evt);
            }
        });

        comboAnio.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboAnio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboAnioActionPerformed(evt);
            }
        });
        comboAnio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                comboAnioKeyPressed(evt);
            }
        });

        verBtn.setText("Ver");
        verBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(excelBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(volverBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(comboMes, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(comboAnio, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(nombreTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(combo, javax.swing.GroupLayout.PREFERRED_SIZE, 423, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(66, 66, 66)
                                .addComponent(verBtn)))
                        .addGap(0, 235, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(nombreTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(combo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(verBtn))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(comboMes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboAnio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 398, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(volverBtn)
                    .addComponent(excelBtn))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void comboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboActionPerformed
        if (evt.getModifiers() == 16) {
            int row = combo.getSelectedIndex();
            if (row > 0) {
                persona = personas.get(row - 1);
                comboMes.addFocusListener(null);
                comboMes.showPopup();
                comboMes.requestFocus();
            }
        }
    }//GEN-LAST:event_comboActionPerformed

    private void nombreTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nombreTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            llenarCombo();
        }
    }//GEN-LAST:event_nombreTxtKeyPressed

    private void volverBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverBtnActionPerformed
        volver();
    }//GEN-LAST:event_volverBtnActionPerformed

    private void excelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excelBtnActionPerformed
        excel();
    }//GEN-LAST:event_excelBtnActionPerformed

    private void comboMesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboMesActionPerformed
        if (evt.getModifiers() == 16) {
            int rowM = comboMes.getSelectedIndex();
            if (rowM > 0) {
                comboAnio.addFocusListener(null);
                comboAnio.showPopup();
                comboAnio.requestFocus();
            }
        }
    }//GEN-LAST:event_comboMesActionPerformed

    private void comboKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comboKeyPressed
        if (evt.getKeyCode() == 10) {
            int row = combo.getSelectedIndex();
            if (row > 0) {
                persona = personas.get(row - 1);
                comboMes.addFocusListener(null);
                comboMes.showPopup();
                comboMes.requestFocus();
//            buscar(persona);
            }
        }
    }//GEN-LAST:event_comboKeyPressed

    private void comboMesKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comboMesKeyPressed
        if (evt.getKeyCode() == 10) {
            int rowM = comboMes.getSelectedIndex();
            if (rowM > 0) {
                comboAnio.addFocusListener(null);
                comboAnio.showPopup();
                comboAnio.requestFocus();
            }
        }
    }//GEN-LAST:event_comboMesKeyPressed

    private void comboAnioKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comboAnioKeyPressed
        if (evt.getKeyCode() == 10) {
            int row = comboAnio.getSelectedIndex();
            if (row > 0) {
                buscar();
            }
        }
    }//GEN-LAST:event_comboAnioKeyPressed

    private void comboAnioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboAnioActionPerformed
        if (evt.getModifiers() == 16) {
            int row = comboAnio.getSelectedIndex();
            if (row > 0) {
                buscar();
            }
        }
    }//GEN-LAST:event_comboAnioActionPerformed

    private void verBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verBtnActionPerformed
        ver();
    }//GEN-LAST:event_verBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TrabajosPorPersonaFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TrabajosPorPersonaFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TrabajosPorPersonaFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TrabajosPorPersonaFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TrabajosPorPersonaFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> combo;
    private javax.swing.JComboBox<String> comboAnio;
    private javax.swing.JComboBox<String> comboMes;
    private javax.swing.JButton excelBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField nombreTxt;
    private javax.swing.JTable tabla;
    private javax.swing.JButton verBtn;
    private javax.swing.JButton volverBtn;
    // End of variables declaration//GEN-END:variables

    private void volver() {
        MainFrame mf = new MainFrame();
        mf.setVisible(true);
        this.dispose();
    }

    private void excel() {
        Configuracion conf = null;
        try {
            conf = new ConfiguracionService().getConfiguracion(1L);
        } catch (Exception ex) {
            Logger.getLogger(RenovacionesFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        Integer nc;
        if (conf.getNroPersonas() != null) {
            nc = conf.getNroPersonas();
            nc += 1;
        } else {
            nc = 1;
        }
        conf.setNroPersonas(nc);
        try {
            new ConfiguracionService().updateConfiguracion(conf);
        } catch (Exception ex) {
            Logger.getLogger(RenovacionesFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        String fn = df2.format(nc);
        String rutaArchivo = "c://SYSTEM//excel//personal" + fn + ".xls";
        File archivo = new File(rutaArchivo);
        if (archivo.exists()) {
            archivo.delete();
        }
        int rows = tabla.getRowCount();
//            int cols = tabla.getColumnCount();

        try {
            archivo.createNewFile();
        } catch (IOException ex) {
            Logger.getLogger(RenovacionesFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        WritableWorkbook libro = null;
        try {
            libro = Workbook.createWorkbook(archivo);
        } catch (IOException ex) {
            Logger.getLogger(RenovacionesFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        WritableSheet hoja1 = libro.createSheet("PERSONAL", 0);
        try {
            hoja1.addCell(new jxl.write.Label(0, 0, "EMITANK"));
            hoja1.addCell(new jxl.write.Label(0, 1, "DIA"));
            hoja1.addCell(new jxl.write.Label(1, 1, "DIRECCION"));
            hoja1.addCell(new jxl.write.Label(2, 1, "TRABAJO"));
            hoja1.addCell(new jxl.write.Label(3, 1, "DETALLE"));
            hoja1.addCell(new jxl.write.Label(4, 1, "APELLIDO Y NOMBRE"));
            hoja1.addCell(new jxl.write.Label(5, 1, "OTROS EMPLEADOS"));
            hoja1.addCell(new jxl.write.Label(6, 1, "IMPORTE"));

            for (int i = 0; i < rows; i++) {

                hoja1.addCell(new jxl.write.Label(0, i + 2, tabla.getValueAt(i, 0).toString()));
                hoja1.addCell(new jxl.write.Label(1, i + 2, tabla.getValueAt(i, 1).toString()));
                hoja1.addCell(new jxl.write.Label(2, i + 2, tabla.getValueAt(i, 2).toString()));
                hoja1.addCell(new jxl.write.Label(3, i + 2, tabla.getValueAt(i, 3).toString()));
                hoja1.addCell(new jxl.write.Label(4, i + 2, tabla.getValueAt(i, 4).toString()));
                hoja1.addCell(new jxl.write.Label(5, i + 2, tabla.getValueAt(i, 5).toString()));
                hoja1.addCell(new jxl.write.Label(6, i + 2, tabla.getValueAt(i, 6).toString()));
            }
        } catch (WriteException ex) {
            Logger.getLogger(RenovacionesFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error configurando Excel");
        }
        try {
            libro.write();
            libro.close();
        } catch (IOException ex) {
            Logger.getLogger(RenovacionesFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error: 441");
        } catch (WriteException ex) {
            Logger.getLogger(RenovacionesFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error: 442");
        }
        JOptionPane.showMessageDialog(this, "Excel creado correctamente");

    }

    private void llenarCombo() {
        personas = null;
        combo.removeAllItems();
        combo.addItem("");
        String filtro = nombreTxt.getText();
        try {
            personas = new PersonaService().getPersonasActivasByFiltro(filtro);
        } catch (Exception ex) {
            Logger.getLogger(TrabajosPorPersonaFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (personas != null && !personas.isEmpty()) {
//            UtilFrame.limpiarTabla(tabla);
//            DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
            for (Persona pe : personas) {
                combo.addItem(pe.getApellidoNombre());
            }
            combo.addFocusListener(null);
            combo.showPopup();
            combo.requestFocus();
        }
    }

    private void buscar() {
        int mes = comboMes.getSelectedIndex();
        DecimalFormat df2 = new DecimalFormat("00");
        DecimalFormat df4 = new DecimalFormat("0000");
        Object x_anio = comboAnio.getSelectedItem();
        int anio = Integer.valueOf(x_anio.toString());
        String fecha3 = "01/" + df2.format(mes) + "/" + df4.format(anio);
        Date fecha1 = new Date();
        try {
            fecha1 = sdf.parse(fecha3);
        } catch (ParseException ex) {
            Logger.getLogger(TrabajosPorPersonaFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        Calendar cal = Calendar.getInstance();
        cal.setTime(fecha1);
        cal.set(Calendar.DATE, cal.getActualMaximum(Calendar.DATE));
        Date fecha2 = cal.getTime();
        List<Trabajo> traba = null;
        try {
            traba = new TrabajoService().getTrabajosActivosByPeriodo(fecha1, fecha2);
        } catch (Exception ex) {
            Logger.getLogger(TrabajosPorPersonaFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        UtilFrame.limpiarTabla(tabla);
        if (traba != null && !traba.isEmpty()) {
            DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
            for (Trabajo t : traba) {
                List<Persona> empleados;
                try {
                    empleados = new RenglonTrabajoService().getEmpleadosByTrabajo(t);
                } catch (Exception ex) {
                    Logger.getLogger(TrabajosPorPersonaFrame.class.getName()).log(Level.SEVERE, null, ex);
                    empleados = null;
                }
                String va = "NO";
                if (empleados != null && !empleados.isEmpty()) {
                    Double importe = 0.0;
                    String otrosEmpleados = "";
                    int cantidadOtrosEmpleados = 0;
                    for (Persona emp : empleados) {
                        Long i1 = emp.getId();
                        Long i2 = persona.getId();
                        if (!i1.equals(i2)) {
                            if (cantidadOtrosEmpleados > 0) {
                                otrosEmpleados += " - " + emp.getApellidoNombre();
                            } else {
                                otrosEmpleados += emp.getApellidoNombre();
                            }
                            cantidadOtrosEmpleados += 1;
                        } else {
                            va = "SI";
                        }
                    }
                    if (va.equals("SI")) {
                        Object o[] = new Object[7];
                        o[0] = sdf_dia.format(t.getFecha());
                        Domicilio dm = t.getServicio().getConsorcio().getDomicilio();
                        o[1] = dm.getCalle() + " " + dm.getNumero();
                        o[2] = t.getServicio().getRubro().getDetalle();
                        o[3] = t.getServicio().getCaracteristicas();
                        o[4] = persona.getApellidoNombre();
                        o[5] = otrosEmpleados;
                        if (cantidadOtrosEmpleados < 1) {
                            if (t.getServicio().getImporte1() != null) {
                                importe = t.getServicio().getImporte1().getImporte();
                            }
                        } else {
                            if (t.getServicio().getImporte2() != null) {
                                importe = t.getServicio().getImporte2().getImporte();
                            }
                        }
                        o[6] = df.format(importe);
                        tbl.addRow(o);
                    }
                }
            }
            tabla.setModel(tbl);
        }
    }

    private void limpiarCampos() {
//        llenarCombo();
        verBtn.setVisible(false);
        nombreTxt.setText("");
        combo.removeAllItems();
        combo.addItem("");
        nombreTxt.requestFocus();
        llenarPeriodos();
    }

    private void llenarPeriodos() {
        comboMes.removeAllItems();
        comboMes.addItem("");
        comboAnio.removeAllItems();
        comboAnio.addItem("");
        meses = new ArrayList<>();
        for (Mes mes : Mes.values()) {
            meses.add(mes);
        }
        for (Mes m : meses) {
            comboMes.addItem(m.name());
        }
        int anio1;
        int anio2;
        Calendar calendar = Calendar.getInstance();
//        calendar.setTime(new Date());
        anio2 = calendar.get(Calendar.YEAR);
        calendar.add(Calendar.DATE, - 730);
        anio1 = calendar.get(Calendar.YEAR);
        DecimalFormat dfa = new DecimalFormat("0000");
        for (int i = anio1 - 1; i < anio2 + 1; i++) {
            comboAnio.addItem(dfa.format(i));
        }
    }

    private void ver() {
        List<RenglonTrabajo> reng = null;
        try {
            reng = new RenglonTrabajoService().getEmpleados();
        } catch (Exception ex) {
            Logger.getLogger(TrabajosPorPersonaFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (reng != null && !reng.isEmpty()) {
            DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
            for (RenglonTrabajo rt : reng) {
                if (!rt.getContenido().equals("")) {
                    Long ide = Long.valueOf(rt.getContenido());
                    String nombre;
                    try {
                        nombre = new PersonaService().getPersonaActivaById(ide);
                    } catch (Exception ex) {
                        Logger.getLogger(TrabajosPorPersonaFrame.class.getName()).log(Level.SEVERE, null, ex);
                        nombre = "";
                    }
                    Domicilio dm = rt.getTrabajo().getServicio().getConsorcio().getDomicilio();
                    String cons = dm.getCalle() + " " + dm.getNumero();
                    Object o[] = new Object[5];
                    o[0] = "1";
                    o[1] = rt.getContenido();
                    o[2] = cons;
                    o[3] = nombre;
                    o[4] = rt.getTrabajo().getFecha();
                    tbl.addRow(o);
                }
            }
            tabla.setModel(tbl);
        }
    }

}
