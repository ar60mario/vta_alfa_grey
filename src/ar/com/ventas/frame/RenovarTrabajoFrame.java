/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.ventas.frame;

import ar.com.ventas.entities.Consorcio;
import ar.com.ventas.entities.Domicilio;
import ar.com.ventas.entities.Estructura;
import ar.com.ventas.entities.EstructuraServicio;
import ar.com.ventas.entities.Persona;
import ar.com.ventas.entities.RenglonTrabajo;
import ar.com.ventas.entities.Trabajo;
import ar.com.ventas.entities.Servicio;
import ar.com.ventas.estructuras.CampoEstructura;
import ar.com.ventas.estructuras.Constantes;
import ar.com.ventas.main.MainFrame;
import ar.com.ventas.services.EstructuraServicioService;
import ar.com.ventas.services.PersonaService;
import ar.com.ventas.services.RenglonTrabajoService;
import ar.com.ventas.services.TrabajoService;
import ar.com.ventas.services.ServicioService;
import ar.com.ventas.util.UtilFrame;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Mario
 */
public class RenovarTrabajoFrame extends javax.swing.JFrame {

    private final SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    private Consorcio consorcio;
    private Servicio servicio;
    private List<RenglonTrabajo> renglones;
    private List<RenglonTrabajo> renglones2 = new ArrayList<>();
    private List<Persona> personas;
    private final List<EstructuraServicio> es = null;
    private final Trabajo trabajo1;
    private Trabajo trabajo2 = new Trabajo();
    private String caracteristicas = "";
    private Boolean bacterio;
    private Boolean fisicoQi;
    private Date fechaCargar;

    /**
     * Creates new form NuevoServicioFrame
     *
     * @param trabajo
     */
    public RenovarTrabajoFrame(Trabajo trabajo) {
        initComponents();
        getContentPane().setBackground(new java.awt.Color(Constantes.getR(), Constantes.getG(), Constantes.getB()));
        this.setLocationRelativeTo(null);
//        setExtendedState(this.MAXIMIZED_BOTH);
        this.trabajo1 = trabajo;
        cargarTrabajo(trabajo1);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        volverBtn = new javax.swing.JButton();
        guardarBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        completarBtn = new javax.swing.JButton();
        personaLbl = new javax.swing.JLabel();
        comboP = new javax.swing.JComboBox<>();
        fechaLbl = new javax.swing.JLabel();
        fecha2Txt = new javax.swing.JTextField();
        textoLbl = new javax.swing.JLabel();
        textoTxt = new javax.swing.JTextField();
        cantidadLbl = new javax.swing.JLabel();
        cantidadTxt = new javax.swing.JTextField();
        importeLbl = new javax.swing.JLabel();
        importeTxt = new javax.swing.JTextField();
        opcionLbl = new javax.swing.JLabel();
        comboO = new javax.swing.JComboBox<>();
        cargarBtn = new javax.swing.JButton();
        descartarBtn = new javax.swing.JButton();
        consorcioTxt = new javax.swing.JTextField();
        servicioTxt = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("CARGA NUEVO TRABAJO");

        jLabel1.setText("Consorcio:");

        jLabel2.setText("Servicio:");

        volverBtn.setText("Volver");
        volverBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverBtnActionPerformed(evt);
            }
        });

        guardarBtn.setText("Guardar");
        guardarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarBtnActionPerformed(evt);
            }
        });

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CAMPO", "CONTENIDO"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tabla);

        completarBtn.setText("Completar");
        completarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                completarBtnActionPerformed(evt);
            }
        });

        personaLbl.setText("Persona:");

        comboP.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboP.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                comboPMouseClicked(evt);
            }
        });
        comboP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                comboPKeyPressed(evt);
            }
        });

        fechaLbl.setText("Fecha:");

        fecha2Txt.setText("FECHA");
        fecha2Txt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fecha2TxtKeyPressed(evt);
            }
        });

        textoLbl.setText("Texto:");

        textoTxt.setText("TEXTO");
        textoTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                textoTxtKeyPressed(evt);
            }
        });

        cantidadLbl.setText("Cantidad:");

        cantidadTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        cantidadTxt.setText("CATIDAD");
        cantidadTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cantidadTxtKeyPressed(evt);
            }
        });

        importeLbl.setText("Importe:");

        importeTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        importeTxt.setText("IMPORTE");
        importeTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                importeTxtKeyPressed(evt);
            }
        });

        opcionLbl.setText("Opci√≥n:");

        comboO.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "", "SI", "NO" }));
        comboO.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                comboOMouseClicked(evt);
            }
        });
        comboO.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                comboOKeyPressed(evt);
            }
        });

        cargarBtn.setText("Cargar");
        cargarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cargarBtnActionPerformed(evt);
            }
        });

        descartarBtn.setText("Descartar");
        descartarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                descartarBtnActionPerformed(evt);
            }
        });

        consorcioTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        consorcioTxt.setText("CONSORCIO");

        servicioTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        servicioTxt.setText("SERVICIO");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(guardarBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(volverBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(consorcioTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 542, Short.MAX_VALUE)
                                    .addComponent(servicioTxt)))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 671, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(93, 93, 93)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(textoLbl)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(textoTxt))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(cantidadLbl)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(cantidadTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(personaLbl)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(comboP, javax.swing.GroupLayout.PREFERRED_SIZE, 347, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(fechaLbl)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(fecha2Txt, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(opcionLbl)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(comboO, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(cargarBtn)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(descartarBtn))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(importeLbl)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(importeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(0, 69, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(completarBtn)
                        .addGap(0, 1146, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(consorcioTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(personaLbl)
                    .addComponent(comboP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(servicioTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fechaLbl)
                            .addComponent(fecha2Txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(textoLbl)
                            .addComponent(textoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cantidadLbl)
                            .addComponent(cantidadTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(importeLbl)
                            .addComponent(importeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(opcionLbl)
                            .addComponent(comboO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cargarBtn)
                            .addComponent(descartarBtn))
                        .addGap(191, 191, 191))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(completarBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(volverBtn)
                    .addComponent(guardarBtn))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void volverBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverBtnActionPerformed
        volver();
    }//GEN-LAST:event_volverBtnActionPerformed

    private void guardarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarBtnActionPerformed
        guardar();
    }//GEN-LAST:event_guardarBtnActionPerformed

    private void completarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_completarBtnActionPerformed
        completar();
    }//GEN-LAST:event_completarBtnActionPerformed

    private void descartarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_descartarBtnActionPerformed
        descartar();
    }//GEN-LAST:event_descartarBtnActionPerformed

    private void cargarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cargarBtnActionPerformed
        cargar();
    }//GEN-LAST:event_cargarBtnActionPerformed

    private void tablaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaMouseClicked
        ocultarCampos();
        completar();
    }//GEN-LAST:event_tablaMouseClicked

    private void fecha2TxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fecha2TxtKeyPressed
        if (evt.getKeyCode() == 10) {
            String fe = fecha2Txt.getText();
            int largo = fe.length();
            if (largo == 10) {
                Date f = new Date();
                try {
                    f = sdf.parse(fe);
                } catch (ParseException ex) {
                    Logger.getLogger(RenovarTrabajoFrame.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, "ERROR EN FECHA");
                    return;
                }
                trabajo2.setFecha(f);
                fechaCargar = f;
                cargar();
            } else {
                fe = UtilFrame.fecha(fe);
                fecha2Txt.setText(fe);
            }
        }
    }//GEN-LAST:event_fecha2TxtKeyPressed

    private void textoTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textoTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            cargar();
        }
    }//GEN-LAST:event_textoTxtKeyPressed

    private void comboPKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comboPKeyPressed
        int row = comboP.getSelectedIndex();
        if (row > 0) {
            if (evt.getKeyCode() == 10) {
                cargar();
            }
        }
    }//GEN-LAST:event_comboPKeyPressed

    private void cantidadTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cantidadTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            cargar();
        }
    }//GEN-LAST:event_cantidadTxtKeyPressed

    private void importeTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_importeTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            cargar();
        }
    }//GEN-LAST:event_importeTxtKeyPressed

    private void comboOKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comboOKeyPressed
        int row = comboO.getSelectedIndex();
        if (row > 0) {
            if (evt.getKeyCode() == 10) {
                cargar();
            }
        }
    }//GEN-LAST:event_comboOKeyPressed

    private void comboOMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_comboOMouseClicked
        int row = comboO.getSelectedIndex();
        if (row > 0) {
            if (evt.getModifiers() == 16) {
                cargar();
            }
        }
    }//GEN-LAST:event_comboOMouseClicked

    private void comboPMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_comboPMouseClicked
        int row = comboP.getSelectedIndex();
        if (row > 0) {
            if (evt.getModifiers() == 16) {
                cargar();
            }
        }
    }//GEN-LAST:event_comboPMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RenovarTrabajoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RenovarTrabajoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RenovarTrabajoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RenovarTrabajoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RenovarTrabajoFrame(null).setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel cantidadLbl;
    private javax.swing.JTextField cantidadTxt;
    private javax.swing.JButton cargarBtn;
    private javax.swing.JComboBox<String> comboO;
    private javax.swing.JComboBox<String> comboP;
    private javax.swing.JButton completarBtn;
    private javax.swing.JTextField consorcioTxt;
    private javax.swing.JButton descartarBtn;
    private javax.swing.JTextField fecha2Txt;
    private javax.swing.JLabel fechaLbl;
    private javax.swing.JButton guardarBtn;
    private javax.swing.JLabel importeLbl;
    private javax.swing.JTextField importeTxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel opcionLbl;
    private javax.swing.JLabel personaLbl;
    private javax.swing.JTextField servicioTxt;
    private javax.swing.JTable tabla;
    private javax.swing.JLabel textoLbl;
    private javax.swing.JTextField textoTxt;
    private javax.swing.JButton volverBtn;
    // End of variables declaration//GEN-END:variables

    private void guardar() {
        if (validar()) {
            try {
                caracteristicas = new RenglonTrabajoService().getCaracteristicasByTrabajo(trabajo1);
            } catch (Exception ex) {
                Logger.getLogger(RenovarTrabajoFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            servicio.setCaracteristicas(caracteristicas);
            trabajo1.setRenovado(true);

            for (RenglonTrabajo rs : renglones2) {
                rs.setTrabajo(trabajo2);
            }
            try {
                new TrabajoService().updateTrabajo(trabajo1);
                new TrabajoService().saveTrabajoCompleto(trabajo2, renglones2);
                JOptionPane.showMessageDialog(this, "TRABAJO GUARDADO CORRECTAMENTE");
            } catch (Exception ex) {
                Logger.getLogger(RenovarTrabajoFrame.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "ERROR Nro. 569 GUARDANDO TRABAJO");
                return;
            }
            servicio.setUltimoTrabajo(fechaCargar);
            try {
                new ServicioService().updateServicio(servicio);
            } catch (Exception ex) {
                Logger.getLogger(RenovarTrabajoFrame.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "ERROR Nro. 621 GUARDANDO SERVICIO");
            }
            volver();
        }
    }

    private void completar() {
        int row = tabla.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(this, "SELECCIONE PARA COMPLETAR");
            return;
        }
        if (renglones2 != null && !renglones2.isEmpty()) {
            int ce = renglones2.get(row).getCodigoCampo();
            RenglonTrabajo re = renglones2.get(row);
            String st = re.getContenido();
            CampoEstructura ce2 = CampoEstructura.fromCodigo(ce);
            ce2.visualizarCampos(comboP, fecha2Txt, textoTxt, cantidadTxt, importeTxt, comboO, personaLbl, fechaLbl, textoLbl, cantidadLbl, importeLbl, opcionLbl, st);
        }
    }

    private boolean validar() {
        List<Trabajo> trabajos = null;
        List<RenglonTrabajo> renglones3 = null;
        try {
            trabajos = new TrabajoService().getTrabajosByConsorcioAndServicio(consorcio, servicio);
        } catch (Exception ex) {
            return true;
        }
        if (trabajos != null && !trabajos.isEmpty()) {
            try {
                renglones3 = new RenglonTrabajoService().getAllRenglonesByTrabajoActivos(trabajos);
            } catch (Exception ex) {
                Logger.getLogger(RenovarTrabajoFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            Date d1;
            int mes1 = 0;
            int anio1 = 0;
            if (renglones3 != null && !renglones3.isEmpty()) {
                for (RenglonTrabajo r : renglones3) {
                    int codigo = r.getCodigoCampo();
                    if (codigo == 4) {
                        if (r.getContenido().trim().isEmpty()) {
                            JOptionPane.showMessageDialog(this, "TRABAJO SIN FECHA");
                            return false;
                        }
                        try {
                            d1 = sdf.parse(r.getContenido());
                        } catch (ParseException ex) {
                            Logger.getLogger(RenovarTrabajoFrame.class.getName()).log(Level.SEVERE, null, ex);
                            JOptionPane.showMessageDialog(this, "ERROR EN FECHA");
                            return false;
                        }
                        Calendar cal = Calendar.getInstance();
                        cal.setTime(d1);
                        mes1 = cal.get(Calendar.MONTH);
                        anio1 = cal.get(Calendar.YEAR);
                    }
                    if (codigo == 15 || codigo == 16) {
                        if (r.getContenido().trim().isEmpty()) {
                            JOptionPane.showMessageDialog(this, "DEBE TENER UNA OPCION DE ANALISIS");
                            return false;
                        }
                    }
                    if (codigo == 11 || codigo == 10) {
                        if (r.getContenido().trim().isEmpty()) {
                            JOptionPane.showMessageDialog(this, "DEBE TENER UNA OPCION ENVIO O RECEPCION DE ANALISIS");
                            return false;
                        }
                    }
                }
                for (RenglonTrabajo r : renglones2) {
                    int codigo = r.getCodigoCampo();
                    if (codigo == 4) {
                        Date d2 = new Date();
                        try {
                            d2 = sdf.parse(r.getContenido());
                        } catch (ParseException ex) {
                            Logger.getLogger(RenovarTrabajoFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        Calendar cal = Calendar.getInstance();
                        cal.setTime(d2);
                        int mes2 = cal.get(Calendar.MONTH);
                        int anio2 = cal.get(Calendar.YEAR);
                        if (anio1 == anio2) {
                            if (mes1 == mes2) {
                                JOptionPane.showMessageDialog(this, "TRABAJO EXISTENTE");
                                return false;
                            }
                        }
                    }
                }
            }
        }
        return true;
    }

    private void limpiarCampos() {
        comboP.removeAllItems();
        comboP.addItem("");
        personas = null;
        try {
            personas = new PersonaService().getEmpleadosActivos();
        } catch (Exception ex) {
            Logger.getLogger(CompletarRenglonServicioFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (personas != null && !personas.isEmpty()) {
            for (Persona pe : personas) {
                comboP.addItem(pe.getApellidoNombre());
            }
        }
        ocultarCampos();
    }

    private void descartar() {
        limpiarCampos();
    }

    private void cargar() {
        int row = tabla.getSelectedRow();
        RenglonTrabajo renglon = renglones2.get(row);
        int ce = renglones2.get(row).getCodigoCampo();
        CampoEstructura campoEstr = CampoEstructura.fromCodigo(ce);
        String str = "";
        int linP = comboP.getSelectedIndex();
        int linO = comboO.getSelectedIndex();
        str = textoTxt.getText();
        campoEstr.cargarCampos(fecha2Txt,
                renglon, linP, personas, linO, str);
        renglones2.set(row, renglon);
        tabla = UtilFrame.limpiarTabla(tabla);
        llenarTabla();
        limpiarCampos();
        tabla.requestFocus();
    }

    private void llenarTabla() {
        DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
        if (renglones2 != null && !renglones2.isEmpty()) {
            for (RenglonTrabajo rt : renglones2) {
                Object o[] = new Object[2];
                o[0] = rt.getCodigoCampo();
                if (rt.getContenido().isEmpty()) {
                    o[1] = "";
                } else {
                    int ce = rt.getCodigoCampo();
                    CampoEstructura campoEstr = CampoEstructura.fromCodigo(ce);
                    String x1 = campoEstr.mostrarCampos(rt.getContenido());
                    o[1] = x1;
                }
                tbl.addRow(o);
            }
            tabla.setModel(tbl);
        }
    }

    private void volver() {
        MainFrame asf = new MainFrame();
        asf.setVisible(true);
        this.dispose();
    }

    private void ocultarCampos() {
        fechaLbl.setVisible(false);
        personaLbl.setVisible(false);
        textoLbl.setVisible(false);
        cantidadLbl.setVisible(false);
        importeLbl.setVisible(false);
        opcionLbl.setVisible(false);
        fecha2Txt.setVisible(false);
        comboP.setVisible(false);
        textoTxt.setVisible(false);
        cantidadTxt.setVisible(false);
        importeTxt.setVisible(false);
        comboO.setVisible(false);
        cargarBtn.setVisible(false);
        descartarBtn.setVisible(false);
        completarBtn.setVisible(false);
    }

    private void cargarTrabajo(Trabajo trabajo1) {
        limpiarCampos();
        UtilFrame.limpiarTabla(tabla);
        servicio = trabajo1.getServicio();
        caracteristicas = servicio.getCaracteristicas();
        consorcio = servicio.getConsorcio();
        Domicilio dm = consorcio.getDomicilio();
        String cons = dm.getCalle() + " " + dm.getNumero();
        String rub = servicio.getRubro().getDetalle();
        consorcioTxt.setText(cons);
        servicioTxt.setText(rub);
        bacterio = servicio.getBacteriologico();
        fisicoQi = servicio.getFisicoQuimico();
        renglones = null;
        try {
            renglones = new RenglonTrabajoService().getRenglonesByTrabajoActivo(trabajo1);
        } catch (Exception ex) {
            Logger.getLogger(RenovarTrabajoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (renglones != null && !renglones.isEmpty()) {
            fechaCargar = new Date();
            trabajo2.setActivo(true);
            trabajo2.setCuota(1);
            trabajo2.setFacturaEmitida(false);
            trabajo2.setReciboEmitido(false);
            trabajo2.setFecha(fechaCargar);
            trabajo2.setTextoEnFactura("");
            trabajo2.setServicio(servicio);
            trabajo2.setPdfGenerado(false);
            trabajo2.setRenovado(false);
            Estructura est = servicio.getRubro().getEstructura();
            List<EstructuraServicio> estr = null;
            try {
                estr = new EstructuraServicioService().getAllEstructuraServicioByEstructuraActivos(est);
            } catch (Exception ex) {
                Logger.getLogger(RenovarTrabajoFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
            for (RenglonTrabajo rt : renglones) {
                RenglonTrabajo rt2 = new RenglonTrabajo();
                rt2.setActivo(true);
                rt2.setCampo(rt.getCampo());
                int cc = rt.getCodigoCampo();
                rt2.setCodigoCampo(cc);
                rt2.setFecha(fechaCargar);
                rt2.setOrden(rt.getOrden());
                rt2.setTrabajo(trabajo2);
                rt2.setVisible(rt.getVisible());
                rt2.setContenido(rt.getContenido());
                if (cc == 7) {
                    rt2.setContenido("");
                }
                if (cc == 15) {
                    if (bacterio) {
                        rt2.setContenido("1");
                    } else {
                        rt2.setContenido("2");
                    }
                }
                if (cc == 16) {
                    if (fisicoQi) {
                        rt2.setContenido("1");
                    } else {
                        rt2.setContenido("2");
                    }
                }
                if (cc == 17 || cc == 10 || cc == 11) {
                    rt2.setContenido("2");
                }
                if (cc == 6) {
                    rt2.setContenido("");
                }
                if (cc == 4) {
                    rt2.setContenido(sdf.format(fechaCargar));
                }
                renglones2.add(rt2);
                int co = rt2.getCodigoCampo();
                String camp = "";
                for(EstructuraServicio e1: estr){
                    if(co==e1.getCampoEstructura()){
                        camp=e1.getContenido();
                        break;
                    }
                }
                Object o[] = new Object[2];
                o[0] = camp;
                if (rt2.getContenido().isEmpty()) {
                    o[1] = "";
                } else {
                    CampoEstructura campoEstr = CampoEstructura.fromCodigo(cc);
//                    System.out.println(campoEstr.getCampo());
//                    System.out.println(campoEstr.getCodigo());
//                    System.out.println(rt2.getContenido());
//                    System.out.println(rt.getContenido());
                    String x1 = campoEstr.mostrarCampos(rt2.getContenido());
                    o[1] = x1;
                }
                //o[1] = rt2.getContenido();
                tbl.addRow(o);
            }
            tabla.setModel(tbl);
        }
    }
}
