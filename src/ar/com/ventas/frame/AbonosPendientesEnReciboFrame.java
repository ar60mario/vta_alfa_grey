/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.ventas.frame;

import ar.com.ventas.entities.Abono;
import ar.com.ventas.entities.Comprobante;
import ar.com.ventas.entities.ComprobanteRenglones;
import ar.com.ventas.entities.Consorcio;
import ar.com.ventas.entities.Domicilio;
import ar.com.ventas.entities.FondoRecibo;
import ar.com.ventas.entities.RenglonAbono;
import ar.com.ventas.entities.Rubro;
import ar.com.ventas.entities.TitularCuit;
import ar.com.ventas.estructuras.Constantes;
import ar.com.ventas.main.MainFrame;
import ar.com.ventas.services.AbonoService;
import ar.com.ventas.services.ComprobanteRenglonesService;
import ar.com.ventas.services.ComprobanteService;
import ar.com.ventas.services.FondoReciboService;
import ar.com.ventas.services.RenglonAbonoService;
import ar.com.ventas.services.RubroService;
import ar.com.ventas.services.TitularCuitService;
import ar.com.ventas.util.UtilFactura;
import ar.com.ventas.util.UtilFrame;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author argia
 */
public class AbonosPendientesEnReciboFrame extends javax.swing.JFrame {

    private SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    private DecimalFormat df = new DecimalFormat("#0.00");
    private List<TitularCuit> titulares;
    private List<Rubro> rubros;
    private List<Abono> abonos;

    /**
     * Creates new form AbonosPendientesEnReciboFrame
     */
    public AbonosPendientesEnReciboFrame() {
        initComponents();
        getContentPane().setBackground(new java.awt.Color(Constantes.getR(), Constantes.getG(), Constantes.getB()));
        this.setLocationRelativeTo(null);
//        setExtendedState(6); // this.MAXIMIZED_BOTH
        llenarCombo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        combo = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        generarBtn = new javax.swing.JButton();
        volverBtn = new javax.swing.JButton();
        label = new javax.swing.JLabel();
        comboT = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("ABONOS PENDIENTES EN RECIBOS");

        combo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        combo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboActionPerformed(evt);
            }
        });
        combo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                comboKeyPressed(evt);
            }
        });

        jLabel1.setText("RUBRO:");

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CONSORCIO", "IMPORTE", "CUOTAS", "FREQ", "ULT.CTA.FC"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabla);

        generarBtn.setText("GENERAR");
        generarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generarBtnActionPerformed(evt);
            }
        });

        volverBtn.setText("VOLVER");
        volverBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverBtnActionPerformed(evt);
            }
        });

        label.setText("DISEÃ‘O FONDO:");

        comboT.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboTActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 909, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(combo, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(generarBtn)
                        .addGap(18, 18, 18)
                        .addComponent(label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(comboT, javax.swing.GroupLayout.PREFERRED_SIZE, 424, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(volverBtn)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(combo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 436, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(generarBtn)
                    .addComponent(volverBtn)
                    .addComponent(label)
                    .addComponent(comboT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void generarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generarBtnActionPerformed
        int row = tabla.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(this, "DEBE SELECCIONAR UN ABONO PARA FACTURAR RECIBO");
            return;
        }
        Abono abono = abonos.get(row);
        generar(abono);
    }//GEN-LAST:event_generarBtnActionPerformed

    private void volverBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverBtnActionPerformed
        volver();
    }//GEN-LAST:event_volverBtnActionPerformed

    private void comboKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comboKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboKeyPressed

    private void comboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboActionPerformed
        int row = combo.getSelectedIndex();
        if (row > 0) {
            buscarAbonosPendientes();
        }
    }//GEN-LAST:event_comboActionPerformed

    private void comboTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboTActionPerformed
        int rowT = comboT.getSelectedIndex();
        if (rowT > 0) {
            terminarComprobante();
        }
    }//GEN-LAST:event_comboTActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AbonosPendientesEnReciboFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AbonosPendientesEnReciboFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AbonosPendientesEnReciboFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AbonosPendientesEnReciboFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AbonosPendientesEnReciboFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> combo;
    private javax.swing.JComboBox<String> comboT;
    private javax.swing.JButton generarBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel label;
    private javax.swing.JTable tabla;
    private javax.swing.JButton volverBtn;
    // End of variables declaration//GEN-END:variables

    private void llenarCombo() {
        rubros = null;
        combo.removeAllItems();
        combo.addItem("");
        comboT.removeAllItems();
        comboT.addItem("");
        try {
            rubros = new RubroService().getAllRubrosAbonosActivos();
        } catch (Exception ex) {
            Logger.getLogger(AbonosPendientesEnReciboFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (rubros != null && !rubros.isEmpty()) {
            for (Rubro r : rubros) {
                combo.addItem(r.getDetalle());
            }
        }
        try {
            titulares = new TitularCuitService().getAllTitularDeCuitActivos();
        } catch (Exception ex) {
            Logger.getLogger(FacturaReparacion2Frame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (titulares != null && !titulares.isEmpty()) {
            for (TitularCuit tc : titulares) {
                comboT.addItem(tc.getPersona().getApellidoNombre());
            }
        }
        label.setVisible(false);
        comboT.setVisible(false);
    }

    private void buscarAbonosPendientes() {
        int row = combo.getSelectedIndex();
        UtilFrame.limpiarTabla(tabla);
        if (row > 0) {
            Rubro r = rubros.get(row - 1);
            abonos = null;
            try {
                abonos = new AbonoService().getAbonosActivosPendientesByRubroTipoFc3(r);
            } catch (Exception ex) {
                Logger.getLogger(AbonosPendientesEnReciboFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            llenarTabla();
        }

    }

    private void volver() {
        MainFrame mf = new MainFrame();
        mf.setVisible(true);
        this.dispose();
    }

    private void llenarTabla() {
        if (abonos != null && !abonos.isEmpty()) {
            DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
            for (Abono ab : abonos) {
                Domicilio dm = ab.getConsorcio().getDomicilio();
                String calle = dm.getCalle() + " " + dm.getNumero();
                Object o[] = new Object[5];
                o[0] = calle;
                o[1] = df.format(ab.getImporte() / ab.getCuotas());
                o[2] = ab.getCuotas().toString();
                o[3] = ab.getFrecuencia().toString();
                o[4] = ab.getCuotaFacturada();
                tbl.addRow(o);
            }
            tabla.setModel(tbl);
        }
    }

    private void generar(Abono abono) {
        int rowX = tabla.getSelectedRow();
        if (rowX < 0) {
            JOptionPane.showMessageDialog(this, "SELECCIONE UN ABONO PARA GENERAR");
        }
        Date fecha = new Date();
        Consorcio consorcio = abono.getConsorcio();
        Rubro rubro = abono.getRubro();
        Date fechaAnual = UtilFrame.getFechaAnioAtras(fecha);
        
//        String fpd = UtilFrame.getFechaPrimero(sdf.format(fecha));
//        String fph = UtilFrame.getFechaFinMes(sdf.format(fecha));
//        String fve = fph;
//        Date fecha_periodo_dde;
//        Date fecha_periodo_hta;
//        Date fecha_vencim;
        List<Comprobante> comprobantes = null;
        try {
            comprobantes = new ComprobanteService().getComprobantesActivosReparacion(consorcio, rubro, fechaAnual);
        } catch (Exception ex) {
            Logger.getLogger(AbonosPendientesEnReciboFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "NO SE RECUPERAN COMPROBANTES");
            return;
        }
//        System.out.println(comprobantes);
//        System.exit(0);
        if (comprobantes != null && !comprobantes.isEmpty()) {
            Comprobante co1 = comprobantes.get(0);
//            try {
//                fecha_periodo_dde = sdf.parse(fpd);
//                fecha_periodo_hta = sdf.parse(fph);
//                fecha_vencim = sdf.parse(fve);
//            } catch (ParseException ex) {
//                Logger.getLogger(AbonosPendientesEnReciboFrame.class.getName()).log(Level.SEVERE, null, ex);
//                JOptionPane.showMessageDialog(this, "ERROR EN FECHAS");
//                return;
//            }
            List<ComprobanteRenglones> renglones = null;
            try {
                renglones = new ComprobanteRenglonesService().getRenglonesPorComprobante(co1);
            } catch (Exception ex) {
                Logger.getLogger(AbonosPendientesEnReciboFrame.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "VERIFIQUE LOS RENGLONES DEL ULTIMO COMPROBANTE");
                return;
            }
            FondoRecibo fr = co1.getFondo();
            int ps = 3;
            Integer cuota = abono.getCuotaFacturada();
            Integer cuotas = abono.getCuotas();
            Double importe = abono.getImporte() / cuotas;
            abono.setCuotaFacturada(cuota + 1);
            abono.setFechaPeriodo(new Date());
            abono.setPendiente(false);
            Double saldo = consorcio.getSaldo();
            saldo = saldo + importe;
            consorcio.setSaldo(saldo);
            String resu = UtilFactura.saveReciboAbono(abono, consorcio, fr, renglones, importe, rubro, fecha, fecha, ps, cuota, cuotas);
            if (resu.equals("A")) {
                JOptionPane.showMessageDialog(this, "GRABADO CORRECTAMENTE");
                return;
            }
            JOptionPane.showMessageDialog(this, "ERROR");
        } else {
            // PRIMER FACTURA

            label.setVisible(true);
            comboT.setVisible(true);
            comboT.requestFocus();
            JOptionPane.showMessageDialog(this, "SELECCIONE FONDO");
        }
//        } else {

    }

    private void terminarComprobante() {
        int rowTb = tabla.getSelectedRow();
        if (rowTb < 0) {
            JOptionPane.showMessageDialog(this, "DEBE SELECCIONAR UN ABONO PARA FACTURAR RECIBO");
            return;
        }
        Abono abono = abonos.get(rowTb);
        List<RenglonAbono> renglonesA = null;
        try {
            renglonesA = new RenglonAbonoService().getRenglonAbonosByAbono(abono);
        } catch (Exception ex) {
            Logger.getLogger(AbonosPendientesEnReciboFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "ERROR EN RENGLONES DE ESTE ABONO");
            return;
        }
        List<ComprobanteRenglones> renglones = new ArrayList<>();
        Double importe = 0.0;
        if (!renglonesA.isEmpty()) {
            for (RenglonAbono ra : renglonesA) {
                ComprobanteRenglones cr = new ComprobanteRenglones();
                cr.setDetalle(ra.getTexto());
                cr.setImporte(ra.getImporte());
                importe += ra.getImporte();
            }
        }
        Consorcio consorcio = abono.getConsorcio();
        int rowTi = comboT.getSelectedIndex();
        TitularCuit ti = titulares.get(rowTi - 1);
        FondoRecibo fr = null;
        Rubro rubro = abono.getRubro();
        Date fecha = new Date();
        Integer ps = 3;
        Integer cuota = abono.getCuotaFacturada();
        cuota += 1;
        Integer cuotas = abono.getCuotas();
        try {
            fr = new FondoReciboService().getFondoReciboByTitular2(ti);
        } catch (Exception ex) {
            Logger.getLogger(AbonosPendientesEnReciboFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println(fr);
        if (fr != null) {

            System.out.println(fr.getEmpresa());

            String resu = UtilFactura.saveReciboAbono(abono, consorcio, fr, renglones, importe, rubro, fecha, fecha, ps, cuota, cuotas);
            if (resu.equals("A")) {
                JOptionPane.showMessageDialog(this, "GRABADO CORRECTAMENTE");
                volver();
            }
        }
        System.exit(0);
        JOptionPane.showMessageDialog(this, "ERROR");
    }
}
