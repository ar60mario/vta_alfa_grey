/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.ventas.frame;

import ar.com.ventas.entities.Abono;
import ar.com.ventas.entities.Comprobante;
import ar.com.ventas.entities.Consorcio;
import ar.com.ventas.entities.ConsorcioMaster;
import ar.com.ventas.entities.Domicilio;
import ar.com.ventas.entities.Rubro;
import ar.com.ventas.entities.TitularCuit;
import ar.com.ventas.estructuras.Constantes;
import ar.com.ventas.main.MainFrame;
import ar.com.ventas.services.AbonoService;
import ar.com.ventas.services.ComprobanteService;
import ar.com.ventas.services.ConsorcioMasterService;
import ar.com.ventas.services.RubroService;
import ar.com.ventas.services.TitularCuitService;
import ar.com.ventas.util.UtilFrame;
import ar.com.ventas.util.UtilTablaRenovarAbonos;
import java.text.DecimalFormat;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Mario
 */
public class RenovarAbonosVencidosFrame extends javax.swing.JFrame {

    private List<Rubro> rubros;
    private List<Abono> abonos;
    private DecimalFormat df = new DecimalFormat("#0.00");
    private Rubro ru;

    /**
     * Creates new form RenovarAbonosVencidosFrame
     */
    public RenovarAbonosVencidosFrame() {
        initComponents();
        getContentPane().setBackground(new java.awt.Color(Constantes.getR(), Constantes.getG(), Constantes.getB()));
        this.setLocationRelativeTo(null);
//        setExtendedState(6); // this.MAXIMIZED_BOTH
        llenarCombo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        combo = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        volverBtn = new javax.swing.JButton();
        renovarBtn = new javax.swing.JButton();
        reasignarBtn = new javax.swing.JButton();
        bajaBtn = new javax.swing.JButton();
        sacarBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("RENOVAR ABONOS VENCIDOS");

        jLabel1.setText("Rubro:");

        combo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        combo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboActionPerformed(evt);
            }
        });

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CODIGO", "CONSORCIO", "CUIT", "ADMIN", "CUOTA", "CUOTAS", "IMPORTE", "CUIT TITU", "TITULAR", "MASTER"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabla);
        if (tabla.getColumnModel().getColumnCount() > 0) {
            tabla.getColumnModel().getColumn(0).setPreferredWidth(10);
            tabla.getColumnModel().getColumn(1).setPreferredWidth(200);
            tabla.getColumnModel().getColumn(4).setPreferredWidth(10);
            tabla.getColumnModel().getColumn(5).setPreferredWidth(10);
            tabla.getColumnModel().getColumn(6).setPreferredWidth(50);
            tabla.getColumnModel().getColumn(8).setPreferredWidth(200);
            tabla.getColumnModel().getColumn(9).setPreferredWidth(10);
        }

        volverBtn.setText("Volver");
        volverBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverBtnActionPerformed(evt);
            }
        });

        renovarBtn.setText("Renovar");
        renovarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                renovarBtnActionPerformed(evt);
            }
        });

        reasignarBtn.setText("Reasignar");
        reasignarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reasignarBtnActionPerformed(evt);
            }
        });

        bajaBtn.setText("Baja");
        bajaBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bajaBtnActionPerformed(evt);
            }
        });

        sacarBtn.setText("Sacar");
        sacarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sacarBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 934, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(combo, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(renovarBtn)
                        .addGap(18, 18, 18)
                        .addComponent(reasignarBtn)
                        .addGap(18, 18, 18)
                        .addComponent(bajaBtn)
                        .addGap(18, 18, 18)
                        .addComponent(sacarBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(volverBtn)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(combo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 435, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(volverBtn)
                    .addComponent(renovarBtn)
                    .addComponent(reasignarBtn)
                    .addComponent(bajaBtn)
                    .addComponent(sacarBtn))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void comboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboActionPerformed
        int row = combo.getSelectedIndex();
        if (row > 0) {
            ru = rubros.get(row - 1);
            llenarTabla(ru);
        }
    }//GEN-LAST:event_comboActionPerformed

    private void volverBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverBtnActionPerformed
        volver();
    }//GEN-LAST:event_volverBtnActionPerformed

    private void renovarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_renovarBtnActionPerformed
        int row = tabla.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(this, "DEBE SELECCIONAR UN ABONO PARA RENOVAR");
            return;
        }
        Abono abono = abonos.get(row);
        Consorcio con = abono.getConsorcio();
        int rowR = combo.getSelectedIndex();
        Rubro r;
        if (rowR > 0) {
            r = rubros.get(rowR - 1);
        } else {
            return;
        }
        String master; // = obtenerMaster(con, r);
//        if (master.equals("A")) {
//            JOptionPane.showMessageDialog(this, "DEBE SELECCIONAR UN ABONO MASTER PARA RENOVAR\n"
//                    + "O DEBE ASIGNAR NUEVO CONSORCIO");
//            return;
//        }
        Comprobante com = null;
        try {
            com = new ComprobanteService().getUltimoComprobanteByConsorcio(con);
        } catch (Exception ex) {
            Logger.getLogger(RenovarAbonosVencidosFrame.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        if (com.getOriginal() != null) {
            if (com.getOriginal()) {
                master = "M";
            } else {
                master = "A";
            }
        } else {
            master = "";
        }
        if (master.equals("A")) {
            JOptionPane.showMessageDialog(this, "DEBE SELECCIONAR UN ABONO MASTER PARA RENOVAR\n"
                    + "O DEBE ASIGNAR NUEVO CONSORCIO");
            return;
        }
        String cuitTit = com.getCuitTitular();
        TitularCuit tc = null;
        try {
            tc = new TitularCuitService().getTitularActivoByCuit(cuitTit);
        } catch (Exception ex) {
            Logger.getLogger(RenovarAbonosVencidosFrame.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        if (master.equals("M")) {
            RenovarAbonoVencidoFrame ravf = new RenovarAbonoVencidoFrame(abono, tc);
            ravf.setVisible(true);
            this.dispose();
        } else {

        }
    }//GEN-LAST:event_renovarBtnActionPerformed

    private void reasignarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reasignarBtnActionPerformed
        reasignar();
    }//GEN-LAST:event_reasignarBtnActionPerformed

    private void bajaBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bajaBtnActionPerformed
        baja();
    }//GEN-LAST:event_bajaBtnActionPerformed

    private void sacarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sacarBtnActionPerformed
        int cantidadSeleccionada = tabla.getSelectedRowCount();
        if (cantidadSeleccionada > 0) {
            sacar();
        }
    }//GEN-LAST:event_sacarBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RenovarAbonosVencidosFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RenovarAbonosVencidosFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RenovarAbonosVencidosFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RenovarAbonosVencidosFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RenovarAbonosVencidosFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bajaBtn;
    private javax.swing.JComboBox<String> combo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton reasignarBtn;
    private javax.swing.JButton renovarBtn;
    private javax.swing.JButton sacarBtn;
    private javax.swing.JTable tabla;
    private javax.swing.JButton volverBtn;
    // End of variables declaration//GEN-END:variables

    private void llenarCombo() {
        rubros = null;
        combo.removeAllItems();
        combo.addItem("");
        try {
            rubros = new RubroService().getAllRubrosActivos();
        } catch (Exception ex) {
            Logger.getLogger(RenovarAbonosVencidosFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (rubros != null && !rubros.isEmpty()) {
            for (Rubro r : rubros) {
                combo.addItem(r.getDetalle());
            }
        }
    }

    private void llenarTabla(Rubro rubro) {
        abonos = null;
        try {
            abonos = new AbonoService().getAbonosActivosOrdenadosVencidosByRubro(rubro);
        } catch (Exception ex) {
            Logger.getLogger(RenovarAbonosVencidosFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        UtilFrame.limpiarTabla(tabla);
        if (abonos != null && !abonos.isEmpty()) {
//            UtilTablaRenovarAbonos ut = new UtilTablaRenovarAbonos();
//            tabla.setDefaultRenderer(Object.class, ut);
            cargarTabla(abonos);
        }
    }

    private void sacar() {
        DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
        int cantidadSeleccionada = tabla.getSelectedRowCount();
//        int cantidadTabla = tabla.getRowCount();
        int a[] = tabla.getSelectedRows();
        if (cantidadSeleccionada < 1) {
            JOptionPane.showMessageDialog(this, "DEBE SELECCIONAR UN CONSORCIO PARA SACER");
            return;
        }
        for (int n = cantidadSeleccionada - 1; n > -1; n--) {
            tbl.removeRow(a[n]);
            abonos.remove(a[n]);
        }
        cargarTabla(abonos);
    }

    private void volver() {
        MainFrame mf = new MainFrame();
        mf.setVisible(true);
        this.dispose();
    }

//    private String obtenerMaster(Consorcio c, Rubro r) {
//        String master;
//        ConsorcioMaster cm = null;
//        try {
//            cm = new ConsorcioMasterService().getConsorcioMasterByRubroAndConsorcio(r, c);
//        } catch (Exception ex) {
//            Logger.getLogger(RenovarAbonosVencidosFrame.class.getName()).log(Level.SEVERE, null, ex);
//        }
//        if (cm != null) {
//            if (cm.getMaster() == 0) {
//                master = "M";
//            } else {
//                master = "A";
//            }
//        } else {
//            master = "M";
//        }
//        return master;
//    }
    private void baja() {
        int rowA = tabla.getSelectedRow();
        int rowR = combo.getSelectedIndex();
        if (rowA < 0) {
            JOptionPane.showMessageDialog(this, "SELECCIONE UN ABONO PARA ELIMINAR");
            return;
        }
        if (rowR < 1) {
            JOptionPane.showMessageDialog(this, "DEBE SELECCIONAR RUBRO");
            return;
        }
        Abono abo = abonos.get(rowA);
        Rubro rub = abonos.get(rowA).getRubro();
        abo.setActivo(false);
        Consorcio con = abo.getConsorcio();
        Domicilio dm = con.getDomicilio();
        String calle = dm.getCalle() + " " + dm.getNumero();
        int a = JOptionPane.showConfirmDialog(this, "CONFIRA ELIMINAR ABONO\n" + calle, "Atención", JOptionPane.YES_NO_OPTION);
        if (a == 0) {
            try {
                new AbonoService().updateAbono(abo);
            } catch (Exception ex) {
                Logger.getLogger(RenovarAbonosVencidosFrame.class.getName()).log(Level.SEVERE, null, ex);
                return;
            }
            ConsorcioMaster cm = null;
            try {
                cm = new ConsorcioMasterService().getConsorcioMasterParaElim(con, rub);
                if (cm != null) {
                    new ConsorcioMasterService().deleteConsorcioActivoMaster(cm);
                }
            } catch (Exception ex) {
                Logger.getLogger(RenovarAbonosVencidosFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            JOptionPane.showMessageDialog(this, "ELIMINADO CORRECTAMENTE");
            llenarTabla(rub);
        }
    }

    private void reasignar() {
        int rowC = tabla.getSelectedRow();
        if (rowC < 0) {
            JOptionPane.showMessageDialog(this, "SELECCIONE UN CONSORCIO PARA ASIGNAR");
            return;
        }
        Abono ab = abonos.get(rowC);
        AsignarFactura2Frame aff = new AsignarFactura2Frame(ab);
        aff.setVisible(true);
        this.dispose();
    }

    private void cargarTabla(List<Abono> abonos) {
        UtilFrame.limpiarTabla(tabla);
        DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
        for (Abono a : abonos) {
            Object o[] = new Object[10];
            Consorcio c = a.getConsorcio();
            Comprobante com = null;
            TitularCuit t = null;
            String nombre = "";
            String cui = "";
//            String master = obtenerMaster(c, ru);
            try {
                com = new ComprobanteService().getUltimoComprobanteByConsorcio(c);
            } catch (Exception ex) {
                Logger.getLogger(RenovarAbonosVencidosFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (com != null) {
                String ct = com.getCuitTitular();
                try {
                    t = new TitularCuitService().getTitularActivoByCuit(ct);
                } catch (Exception ex) {
                    Logger.getLogger(RenovarAbonosVencidosFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (t != null) {
                    nombre = t.getPersona().getApellidoNombre();
                    cui = t.getCuit();
                }
                if (com.getOriginal() != null) {
                    if (com.getOriginal()) {
                        o[9] = "M";
                    } else {
                        o[9] = "A";
                    }
                } else {
                    o[9] = "";
                }
            }
            Domicilio dm = c.getDomicilio();
            String calle = dm.getCalle() + " " + dm.getNumero();
            String admi = a.getConsorcio().getAdministrador().getNombreAdministrador();
            o[0] = c.getCodigo();
            o[1] = calle;
            o[2] = c.getCuit();
            o[3] = admi;
            o[4] = a.getCuotaFacturada();
            o[5] = a.getCuotas();
            o[6] = df.format(a.getImporte() / a.getCuotas());
            o[7] = cui; // + " " + com.getCuitTitular();
            o[8] = nombre; // + " " + com.getRazonSocialTitular();

            tbl.addRow(o);
        }
        tabla.setModel(tbl);
    }
}
