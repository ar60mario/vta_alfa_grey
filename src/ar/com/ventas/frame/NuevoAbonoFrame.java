/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.ventas.frame;

import ar.com.ventas.entities.Abono;
import ar.com.ventas.entities.Consorcio;
import ar.com.ventas.entities.Domicilio;
import ar.com.ventas.entities.RenglonAbono;
import ar.com.ventas.entities.Rubro;
import ar.com.ventas.entities.TextoPredefinido;
import ar.com.ventas.entities.TextoPredefinidoLinea;
import ar.com.ventas.entities.TipoFactura;
import ar.com.ventas.estructuras.Constantes;
import ar.com.ventas.estructuras.TextosCuotasPeriodosEnFacturas;
import ar.com.ventas.services.AbonoService;
import ar.com.ventas.services.ConsorcioService;
import ar.com.ventas.services.RubroService;
import ar.com.ventas.services.TextoPredefinidoLineaService;
import ar.com.ventas.services.TextoPredefinidoService;
import ar.com.ventas.util.UtilFrame;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Mario
 */
public class NuevoAbonoFrame extends javax.swing.JFrame {

    private DecimalFormat df = new DecimalFormat("#0.00");
    private SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    private List<Consorcio> clientes;
    private List<Rubro> rubros;
    private List<TextoPredefinido> textos;
    private List<RenglonAbono> renglones = new ArrayList<>();
    private Integer codigo;

    /**
     * Creates new form NuevoAbonoFrame
     */
    public NuevoAbonoFrame() {
        initComponents();
        getContentPane().setBackground(new java.awt.Color(Constantes.getR(), Constantes.getG(), Constantes.getB()));
        this.setLocationRelativeTo(null);
//        setExtendedState(6); // this.MAXIMIZED_BOTH
        limpiarCampos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        volverBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        codigoTxt = new javax.swing.JTextField();
        grabarBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        comboC = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        comboR = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        importeTxt = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        calcularBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        comboT = new javax.swing.JComboBox<>();
        agregarLineaBtn = new javax.swing.JButton();
        eliminarLineaBtn = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        comboCu = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        nombreTxt = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        comboTf = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        importeCuotaTxt = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        frecuenciaTxt = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        fechaInicioTxt = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        comboPe = new javax.swing.JComboBox<>();
        jLabel14 = new javax.swing.JLabel();
        fechaPeriodoTxt = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("NUEVO ABONO DE CONSORCIO");

        volverBtn.setText("Volver");
        volverBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverBtnActionPerformed(evt);
            }
        });

        jLabel1.setText("Código:");

        codigoTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        codigoTxt.setText("CODIGO");

        grabarBtn.setText("Grabar");
        grabarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                grabarBtnActionPerformed(evt);
            }
        });

        jLabel3.setText("Cliente:");

        comboC.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel5.setText("RUBRO:");

        comboR.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboRActionPerformed(evt);
            }
        });

        jLabel6.setText("IMPORTE:");

        importeTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        importeTxt.setText("IMPORTE");

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "TEXTO", "VALOR CUOTA"
            }
        ));
        jScrollPane1.setViewportView(tabla);
        if (tabla.getColumnModel().getColumnCount() > 0) {
            tabla.getColumnModel().getColumn(0).setPreferredWidth(300);
            tabla.getColumnModel().getColumn(1).setPreferredWidth(40);
        }

        calcularBtn.setText("Calcular");
        calcularBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calcularBtnActionPerformed(evt);
            }
        });

        jLabel2.setText("Texto Predeterminado:");

        comboT.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboTActionPerformed(evt);
            }
        });

        agregarLineaBtn.setText("Agregar Línea");
        agregarLineaBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarLineaBtnActionPerformed(evt);
            }
        });

        eliminarLineaBtn.setText("Eliminar Línea");
        eliminarLineaBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarLineaBtnActionPerformed(evt);
            }
        });

        jLabel4.setText("CUOTAS:");

        comboCu.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel7.setText("Nombre a Buscar:");

        nombreTxt.setText("NOMBRE");
        nombreTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                nombreTxtKeyPressed(evt);
            }
        });

        jLabel8.setText("Tipo Facturación:");

        comboTf.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel9.setText("VALOR CUOTA:");

        importeCuotaTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        importeCuotaTxt.setText("IMP.CUOTA");

        jLabel10.setText("FRECUENCIA:");

        frecuenciaTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        frecuenciaTxt.setText("FRQ");

        jLabel11.setText("<<< CADA CUANTO SE EMITE FC");

        jLabel12.setText("FECHA INICIO:");

        fechaInicioTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        fechaInicioTxt.setText("FECH.INCIO");
        fechaInicioTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fechaInicioTxtKeyPressed(evt);
            }
        });

        jLabel13.setText("PERIODO:");

        comboPe.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel14.setText("FECHA PERIODO:");

        fechaPeriodoTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        fechaPeriodoTxt.setText("FECH.PER.");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(agregarLineaBtn)
                                .addGap(18, 18, 18)
                                .addComponent(eliminarLineaBtn)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(comboCu, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(calcularBtn))
                            .addComponent(grabarBtn, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(36, 36, 36)
                                .addComponent(importeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(importeCuotaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 242, Short.MAX_VALUE))
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(volverBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(comboC, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(comboR, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(frecuenciaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel11))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addGap(18, 18, 18)
                                .addComponent(nombreTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel8)
                                .addGap(18, 18, 18)
                                .addComponent(comboTf, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(codigoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(comboT, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fechaInicioTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(39, 39, 39)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(comboPe, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel14)
                                    .addComponent(jLabel13))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(fechaPeriodoTxt))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(codigoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(comboT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(fechaInicioTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(nombreTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(comboTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboPe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(comboC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(comboR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(frecuenciaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(fechaPeriodoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 290, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(calcularBtn)
                    .addComponent(agregarLineaBtn)
                    .addComponent(eliminarLineaBtn)
                    .addComponent(jLabel4)
                    .addComponent(comboCu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(importeCuotaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(grabarBtn)
                    .addComponent(volverBtn)
                    .addComponent(importeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void volverBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverBtnActionPerformed
        volver();
    }//GEN-LAST:event_volverBtnActionPerformed

    private void grabarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grabarBtnActionPerformed
        grabar();
    }//GEN-LAST:event_grabarBtnActionPerformed

    private void agregarLineaBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarLineaBtnActionPerformed
        tabla = UtilFrame.agregarLinea(2, tabla);
    }//GEN-LAST:event_agregarLineaBtnActionPerformed

    private void eliminarLineaBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarLineaBtnActionPerformed
        int row = tabla.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(this, "ELEGIR");
            return;
        }
        tabla = UtilFrame.borrarLinea(tabla, row);
    }//GEN-LAST:event_eliminarLineaBtnActionPerformed

    private void calcularBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calcularBtnActionPerformed
        calcular();
    }//GEN-LAST:event_calcularBtnActionPerformed

    private void comboTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboTActionPerformed
        agregarTextoPredefinido();
    }//GEN-LAST:event_comboTActionPerformed

    private void nombreTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nombreTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            if (!nombreTxt.getText().isEmpty()) {
                String filtro = nombreTxt.getText();
                llenarComboC(filtro);
            }
        }
    }//GEN-LAST:event_nombreTxtKeyPressed

    private void fechaInicioTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fechaInicioTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            String fe = fechaInicioTxt.getText();
            int largo = fe.length();
            if (largo == 10) {
                nombreTxt.requestFocus();
            } else {
                if (largo > 10) {
                    JOptionPane.showMessageDialog(this, "ERROR EN LARGO DE FECHA");
                    return;
                }
            }
            fe = UtilFrame.fecha(fe);
            fechaInicioTxt.setText(fe);
        }
    }//GEN-LAST:event_fechaInicioTxtKeyPressed

    private void comboRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboRActionPerformed
        int rowR = comboR.getSelectedIndex();
        if (rowR < 1) {
            return;
        }
        Rubro rub = rubros.get(rowR - 1);
        Integer codi = rub.getCodigo();
        if (codi == 6) {
            jLabel14.setVisible(false);
            fechaPeriodoTxt.setVisible(false);
            fechaPeriodoTxt.setText("01/01/2000");
            jLabel13.setVisible(false);
            comboPe.setVisible(false);
        } else {
            if (codi == 2) {
                jLabel14.setVisible(false);
                fechaPeriodoTxt.setVisible(false);
                fechaPeriodoTxt.setText("01/01/2000");
                jLabel13.setVisible(false);
                comboPe.setVisible(false);
            } else {
                jLabel14.setVisible(true);
                fechaPeriodoTxt.setVisible(true);
                jLabel13.setVisible(true);
                comboPe.setVisible(true);
            }
        }
    }//GEN-LAST:event_comboRActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NuevoAbonoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NuevoAbonoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NuevoAbonoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NuevoAbonoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NuevoAbonoFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton agregarLineaBtn;
    private javax.swing.JButton calcularBtn;
    private javax.swing.JTextField codigoTxt;
    private javax.swing.JComboBox<String> comboC;
    private javax.swing.JComboBox<String> comboCu;
    private javax.swing.JComboBox<String> comboPe;
    private javax.swing.JComboBox<String> comboR;
    private javax.swing.JComboBox<String> comboT;
    private javax.swing.JComboBox<String> comboTf;
    private javax.swing.JButton eliminarLineaBtn;
    private javax.swing.JTextField fechaInicioTxt;
    private javax.swing.JTextField fechaPeriodoTxt;
    private javax.swing.JTextField frecuenciaTxt;
    private javax.swing.JButton grabarBtn;
    private javax.swing.JTextField importeCuotaTxt;
    private javax.swing.JTextField importeTxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField nombreTxt;
    private javax.swing.JTable tabla;
    private javax.swing.JButton volverBtn;
    // End of variables declaration//GEN-END:variables

    private void volver() {
        AbmAbonosFrame mf = new AbmAbonosFrame();
        mf.setVisible(true);
        this.dispose();
    }

    private void limpiarCampos() {
        codigoTxt.setText("");
        nombreTxt.setText("");
        importeTxt.setText("");
        importeCuotaTxt.setText("");
        frecuenciaTxt.setText("");
        fechaInicioTxt.setText("");
        tabla = UtilFrame.limpiarTabla(tabla);
        clientes = null;
        rubros = null;
        textos = null;
        comboC.removeAllItems();
        comboC.addItem("");
        comboR.removeAllItems();
        comboR.addItem("");
        comboT.removeAllItems();
        comboT.addItem("");
        comboTf.removeAllItems();
        comboPe.removeAllItems();
        comboPe.addItem("");
        fechaPeriodoTxt.setText("");
        for (TextosCuotasPeriodosEnFacturas tcp : TextosCuotasPeriodosEnFacturas.values()) {
            comboPe.addItem(tcp.getDetalle());
        }
        List<TipoFactura> tipos = UtilFrame.getComboTipoFactura();
        for (TipoFactura tf : tipos) {
            comboTf.addItem(tf.getDetalle());
        }
        try {
            rubros = new RubroService().getAllRubrosActivos();
        } catch (Exception ex) {
            Logger.getLogger(NuevoAbonoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (rubros != null && !rubros.isEmpty()) {
            for (Rubro r : rubros) {
                comboR.addItem(r.getDetalle());
            }
        }
        try {
            textos = new TextoPredefinidoService().getAllTextoPredefinidoActivos();
        } catch (Exception ex) {
            Logger.getLogger(NuevoAbonoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (textos != null && !textos.isEmpty()) {
            for (TextoPredefinido tp : textos) {
                comboT.addItem(tp.getTextoCorto());
            }
        }
        comboCu.removeAllItems();
        comboCu.addItem("");
        for (int i = 1; i < 13; i++) {
            String e = String.valueOf(i);
            comboCu.addItem(e);
        }
        codigo = 0;
        int o = 0;
        try {
            codigo = new AbonoService().getCodigoSiguiente();
            if (codigo != null) {
                o = 1;
            } else {
                o = 0;
            }
        } catch (Exception ex) {
//            Logger.getLogger(NuevoRubroFrame.class.getName()).log(Level.SEVERE, null, ex);
            o = 0;
        }
        if (o == 0) {
            codigo = 0;
        }
        codigo += 1;
        codigoTxt.setText(codigo.toString());
        fechaInicioTxt.requestFocus();
    }

    private void grabar() {
        if (verificar()) {
            Abono abono = new Abono();
            int rowC = comboC.getSelectedIndex() - 1;
            int rowR = comboR.getSelectedIndex() - 1;
            int rowCu = comboCu.getSelectedIndex();
            int rowTf = comboTf.getSelectedIndex();
            int rowPe = comboPe.getSelectedIndex();
            Date fi, fip;
            try {
                fi = sdf.parse(fechaInicioTxt.getText());
                fip = sdf.parse(fechaPeriodoTxt.getText());
                System.out.println(fi);
                System.out.println(fip);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "ERROR EN LA FECHA");
                fechaInicioTxt.requestFocus();
                System.out.println(ex);
                return;
            }
            int frq;
            if (frecuenciaTxt.getText().isEmpty()) {
                frq = 0;
            } else {
                try {
                    frq = Integer.valueOf(frecuenciaTxt.getText());
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, "DEBE SER UN NUMERO ENTERO");
                    return;
                }
            }
            if (rowTf < 0) {
                JOptionPane.showMessageDialog(this, "SELECCIONE UN TIPO DE FACTURACION");
                return;
            }
            if (rowC < 0) {
                JOptionPane.showMessageDialog(this, "SELECCIONE UN CONSORCIO");
                return;
            }
            if (rowR < 0) {
                JOptionPane.showMessageDialog(this, "SELECCIONE UN RUBRO");
                return;
            }
            if (rowCu < 1) {
                JOptionPane.showMessageDialog(this, "SELECCIONE CUOTAS");
                return;
            }
            Consorcio cliente = clientes.get(rowC);
            Rubro rubro = rubros.get(rowR);
            Double totalAbono = Double.valueOf(importeTxt.getText().replace(",", "."));
            abono.setTipoFacturacion(rowTf);
            abono.setCodigo(Integer.valueOf(codigoTxt.getText()));
            abono.setActivo(true);
            abono.setRenovado(false);
            abono.setConsorcio(cliente);
            abono.setRubro(rubro);
            abono.setFechaPeriodo(fip);
            abono.setFrecuencia(frq);
            abono.setFechaInicio(fi);
            abono.setTextoPeriodo(rowPe - 1);
            abono.setImporte(totalAbono);
            abono.setCuotaFacturada(0);
            abono.setCuotas(rowCu);
            abono.setPendiente(true);
            renglones = new ArrayList<>();
            int rowT = tabla.getRowCount();
            for (int i = 0; i < rowT; i++) {
                RenglonAbono ra = new RenglonAbono();
                ra.setAbono(abono);
                Double importe;
                String str1 = tabla.getValueAt(i, 0).toString();
                String str = tabla.getValueAt(i, 1).toString();
                if (str.isEmpty()) {
                    importe = 0.0;
                } else {
                    importe = Double.valueOf(str.replace(",", "."));
                }
                ra.setImporte(importe);
                ra.setOrden(i);
                ra.setTexto(str1);
                renglones.add(ra);
            }
//            System.out.println(abono);
//            System.out.println(renglones);
//            System.out.println(renglones.get(0).getAbono());
            try {
                new AbonoService().saveAbonoCompleto(abono, renglones);
            } catch (Exception ex) {
                Logger.getLogger(NuevoAbonoFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            volver();
        }
    }

    private boolean verificar() {
        int rowC = comboC.getSelectedIndex();
        int rowR = comboR.getSelectedIndex();
        int rowT = tabla.getRowCount();
        int rowCu = comboCu.getSelectedIndex();
        int rowTf = comboTf.getSelectedIndex();
        int rowPe = comboPe.getSelectedIndex();
        Date fi, fip;
        try {
            fi = sdf.parse(fechaInicioTxt.getText());
            fip = sdf.parse(fechaPeriodoTxt.getText());
            System.out.println(fi);
            System.out.println(fip);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "ERROR EN LA FECHA");
            fechaInicioTxt.requestFocus();
            System.out.println(ex);
            return false;
        }
        if (frecuenciaTxt.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "INGRESE LA FRECUENCIA DE\nFACTURACION, NUMERO ENTERO");
            frecuenciaTxt.requestFocus();
            return false;
        }
        try {
            int tst = Integer.valueOf(frecuenciaTxt.getText());
            System.out.println(tst);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "DEBE SER UN NUMERO ENTERO");
            System.out.println(ex);
            frecuenciaTxt.requestFocus();
            return false;
        }
        if (rowTf < 0) {
            JOptionPane.showMessageDialog(this, "SELECCIONE UN TIPO DE FACTURACION");
            comboTf.requestFocus();
            return false;
        }
        if (rowC < 1) {
            JOptionPane.showMessageDialog(this, "DEBE SELECCIONAR UN CLIENTE");
            comboC.requestFocus();
            return false;
        }
        if (rowR < 1) {
            JOptionPane.showMessageDialog(this, "DEBE SELECCIONAR UN RUBRO");
            comboR.requestFocus();
            return false;
        }
        Rubro rubro = rubros.get(rowR - 1);
        int cod = rubro.getCodigo();
        if (cod == 3) {
            if (rowPe < 1) {
                JOptionPane.showMessageDialog(this, "DEBE SELECCIONAR UN\nPERIODO PARA ESTE RUBRO");
                comboPe.requestFocus();
                return false;
            }
        }
        if (importeTxt.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "DEBE HABER CALCULADO UN IMPORTE");
            return false;
        }
        if (rowT < 1) {
            JOptionPane.showMessageDialog(this, "DEBE INGRESAR UN TEXTO PARA EL ABONO");
            return false;
        }
        if (rowCu < 1) {
            JOptionPane.showMessageDialog(this, "DEBE SELECCIONAR CANTIDAD CUOTAS");
            return false;
        }
        return true;
    }

    private void calcular() {
        int rows = tabla.getRowCount();
        Double total = 0.0;
        Integer cuo = comboCu.getSelectedIndex();
        if (cuo < 1) {
            JOptionPane.showMessageDialog(this, "SELECCIONE CANTIDAD DE CUOTAS");
            comboCu.requestFocus();
            return;
        }
        for (int i = 0; i < rows; i++) {
            String imp1 = tabla.getValueAt(i, 1).toString();
            if (!imp1.isEmpty()) {
                Double parcial = Double.valueOf(imp1.replace(",", "."));
                total += parcial;
            }
        }
        importeTxt.setText(df.format(total * cuo));
        Double importeCuota = total;
        importeCuotaTxt.setText(df.format(importeCuota));
    }

    private void agregarTextoPredefinido() {
        int rowT = comboT.getSelectedIndex();
        if (rowT > 0) {
            TextoPredefinido tp = textos.get(rowT - 1);
            List<TextoPredefinidoLinea> lineas = null;
            try {
                lineas = new TextoPredefinidoLineaService().getAllTextoPredefinidoActivosByTextoPredefinido(tp);
            } catch (Exception ex) {
                Logger.getLogger(NuevoAbonoFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            int cantidadLineas = lineas.size();
            DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
            for (int i = 0; i < cantidadLineas; i++) {
                Object o[] = new Object[2];
                String texto = lineas.get(i).getLinea();
                o[0] = texto;
                o[1] = "";
                RenglonAbono ra = new RenglonAbono();
                ra.setOrden(i);
                ra.setTexto(texto);
                ra.setImporte(0.0);
                renglones.add(ra);
                tbl.addRow(o);
            }
            tabla.setModel(tbl);
        }
    }

    private void llenarComboC(String filtro) {
        try {
            clientes = new ConsorcioService().getAllConsorciosActivosByFiltro(filtro);
        } catch (Exception ex) {
            Logger.getLogger(NuevoAbonoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (clientes != null && !clientes.isEmpty()) {
            for (Consorcio c : clientes) {
                Domicilio dm = c.getDomicilio();
                comboC.addItem(dm.getCalle() + " " + dm.getNumero());
            }
            comboC.addFocusListener(null);
            comboC.showPopup();
            comboC.requestFocus();
        } else {
            JOptionPane.showMessageDialog(this, "NO HAY CLIENTES");
            volver();
        }
    }
}
