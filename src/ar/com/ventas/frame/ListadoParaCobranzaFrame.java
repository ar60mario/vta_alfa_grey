/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.ventas.frame;

import ar.com.ventas.entities.Administrador;
import ar.com.ventas.entities.Comprobante;
import ar.com.ventas.entities.Consorcio;
import ar.com.ventas.entities.Domicilio;
import ar.com.ventas.entities.ListadoCobranza;
import ar.com.ventas.entities.Rubro;
import ar.com.ventas.estructuras.Constantes;
import ar.com.ventas.main.MainFrame;
import ar.com.ventas.services.ComprobanteService;
import ar.com.ventas.services.ConsorcioService;
import ar.com.ventas.util.UtilFrame;
import java.io.File;
import java.io.IOException;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import jxl.Workbook;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;

/**
 *
 * @author Mario
 */
public class ListadoParaCobranzaFrame extends javax.swing.JFrame {

    private List<Comprobante> comprobantes;
    private List<ListadoCobranza> listado;
    private DecimalFormat df = new DecimalFormat("#0.00");
    private SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");

    /**
     * Creates new form ListadoParaCobranzaFrame
     */
    public ListadoParaCobranzaFrame() {
        initComponents();
        getContentPane().setBackground(new java.awt.Color(Constantes.getR(), Constantes.getG(), Constantes.getB()));
//        this.setLocationRelativeTo(null);
        setExtendedState(6); // this.MAXIMIZED_BOTH
        llenarTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        volverBtn = new javax.swing.JButton();
        excelBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("LISTADO EXCEL PARA COBRANZA");

        volverBtn.setText("Volver");
        volverBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverBtnActionPerformed(evt);
            }
        });

        excelBtn.setText("EXCEL");
        excelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                excelBtnActionPerformed(evt);
            }
        });

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ADMIN", "CONSORCIO", "NUM.FC", "RUBRO", "CUOTA", "IMPORTE", "FECHA"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabla);
        if (tabla.getColumnModel().getColumnCount() > 0) {
            tabla.getColumnModel().getColumn(0).setPreferredWidth(30);
            tabla.getColumnModel().getColumn(1).setPreferredWidth(250);
            tabla.getColumnModel().getColumn(2).setPreferredWidth(30);
            tabla.getColumnModel().getColumn(3).setPreferredWidth(30);
            tabla.getColumnModel().getColumn(4).setPreferredWidth(10);
            tabla.getColumnModel().getColumn(5).setPreferredWidth(30);
            tabla.getColumnModel().getColumn(6).setPreferredWidth(30);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 903, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(excelBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(volverBtn)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 456, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(volverBtn)
                    .addComponent(excelBtn))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void excelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excelBtnActionPerformed
        excel();
    }//GEN-LAST:event_excelBtnActionPerformed

    private void volverBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverBtnActionPerformed
        volver();
    }//GEN-LAST:event_volverBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ListadoParaCobranzaFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ListadoParaCobranzaFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ListadoParaCobranzaFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ListadoParaCobranzaFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ListadoParaCobranzaFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton excelBtn;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabla;
    private javax.swing.JButton volverBtn;
    // End of variables declaration//GEN-END:variables

    private void llenarTabla() {
        comprobantes = null;
        try {
            comprobantes = new ComprobanteService().getComprobantesImpagos();
        } catch (Exception ex) {
            Logger.getLogger(ListadoParaCobranzaFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        UtilFrame.limpiarTabla(tabla);
        if (comprobantes != null && !comprobantes.isEmpty()) {
            listado = new ArrayList<>();
            for (Comprobante co : comprobantes) {
                Rubro rubro = co.getRubro();
                Integer codigoConsorcio = co.getCodigoCliente();
                Consorcio consorcio = null;
                try {
                    consorcio = new ConsorcioService().getConsorcioByCodigo(codigoConsorcio);
                } catch (Exception ex) {
                    Logger.getLogger(ListadoParaCobranzaFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (consorcio != null) {
                    Administrador admin = consorcio.getAdministrador();
                    String ord = admin.getNombreAdministrador()
                            + co.getCalleNroPisoDtoCliente()
                            + rubro.getDetalle()
                            + co.getNumero().toString();
                    ListadoCobranza lc = new ListadoCobranza();
                    lc.setAdministrador(admin);
                    lc.setComprobante(co);
                    lc.setConsorcio(consorcio);
                    lc.setOrden(ord);
                    lc.setRubro(rubro);
                    listado.add(lc);
                }
            }
            Collections.sort(listado);
            DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
            for (ListadoCobranza lc : listado) {
                Domicilio dm = lc.getConsorcio().getDomicilio();
                Object o[] = new Object[7];
                o[0] = lc.getAdministrador().getNombreAdministrador();
                o[1] = dm.getCalle() + " " + dm.getNumero();
                o[2] = lc.getComprobante().getNumero();
                o[3] = lc.getRubro().getDetalle();
                o[4] = lc.getComprobante().getCuotasPagadas();
                o[5] = df.format(lc.getComprobante().getTotal());
                o[6] = sdf.format(lc.getComprobante().getFecha());
                tbl.addRow(o);
            }
            tabla.setModel(tbl);
        }
    }

    private void excel() {
        String rutaArchivo = "c:/alfa_sistema/data/informes/COBRANZA.xls";
        File archivo = new File(rutaArchivo);
        if (archivo.exists()) {
            archivo.delete();
        }
        try {
            archivo.createNewFile();
        } catch (IOException ex) {
            Logger.getLogger(ListadoParaCobranzaFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        WritableWorkbook libro = null;
        try {
            libro = Workbook.createWorkbook(archivo);
        } catch (IOException ex) {
            Logger.getLogger(ListadoParaCobranzaFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        WritableSheet hoja1 = libro.createSheet("COBRANZA - ", 0);

        try {
            hoja1.addCell(new jxl.write.Label(0, 0, "ALFA - TANQUES DE AGUA"));
            hoja1.addCell(new jxl.write.Label(0, 1, "ADMINISTRACION"));
            hoja1.addCell(new jxl.write.Label(1, 1, "CONSORCIO"));
            hoja1.addCell(new jxl.write.Label(2, 1, "NÚM.FC"));
            hoja1.addCell(new jxl.write.Label(3, 1, "RUBRO"));
            hoja1.addCell(new jxl.write.Label(4, 1, "CUOTA"));
            hoja1.addCell(new jxl.write.Label(5, 1, "IMPORTE"));
            hoja1.addCell(new jxl.write.Label(6, 1, "FECHA"));
            int y = 2;
            int rows = listado.size();
            for (ListadoCobranza lc : listado) {
                Domicilio dm = lc.getConsorcio().getDomicilio();
                String calle = dm.getCalle() + " " + dm.getNumero();
                hoja1.addCell(new jxl.write.Label(0, y, lc.getAdministrador().getNombreAdministrador()));
                hoja1.addCell(new jxl.write.Label(1, y, calle));
                hoja1.addCell(new jxl.write.Label(2, y, lc.getComprobante().getNumero().toString()));
                hoja1.addCell(new jxl.write.Label(3, y, lc.getRubro().getDetalle()));
                hoja1.addCell(new jxl.write.Label(4, y, lc.getComprobante().getCuotasPagadas().toString()));
                hoja1.addCell(new jxl.write.Number(5, y, Double.valueOf(df.format(lc.getComprobante().getTotal()).replace(",", "."))));
                hoja1.addCell(new jxl.write.Label(6, y, sdf.format(lc.getComprobante().getFecha())));

                y += 1;
            }
        } catch (WriteException ex) {
            Logger.getLogger(ListadoParaCobranzaFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error configurando Excel");
        }
        try {
            libro.write();
            libro.close();
        } catch (IOException ex) {
            Logger.getLogger(ListadoParaCobranzaFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error: 528");
        } catch (WriteException ex) {
            Logger.getLogger(ListadoParaCobranzaFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error: 529");
        }
        JOptionPane.showMessageDialog(this, "Excel creado correctamente");
        MainFrame mf = new MainFrame();
        mf.setVisible(true);
        this.dispose();
    }

    private void volver() {
        MainFrame mf = new MainFrame();
        mf.setVisible(true);
        this.dispose();
    }
}
