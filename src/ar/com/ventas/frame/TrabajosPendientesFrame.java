package ar.com.ventas.frame;

import ar.com.ventas.entities.Configuracion;
import ar.com.ventas.entities.Consorcio;
import ar.com.ventas.entities.Domicilio;
import ar.com.ventas.entities.Estructura;
import ar.com.ventas.entities.EstructuraServicio;
import ar.com.ventas.entities.RenglonTrabajo;
import ar.com.ventas.entities.Rubro;
import ar.com.ventas.entities.Servicio;
import ar.com.ventas.entities.TemporalPendientesTanques;
import ar.com.ventas.entities.Trabajo;
import ar.com.ventas.estructuras.Constantes;
import ar.com.ventas.main.MainFrame;
import ar.com.ventas.services.ConfiguracionService;
import ar.com.ventas.services.EstructuraServicioService;
import ar.com.ventas.services.PersonaService;
import ar.com.ventas.services.RenglonTrabajoService;
import ar.com.ventas.services.RubroService;
import ar.com.ventas.services.TrabajoService;
import ar.com.ventas.util.DesktopApi;
import ar.com.ventas.util.PDFBuilder;
import ar.com.ventas.util.UtilFrame;
import com.itextpdf.text.DocumentException;
import java.io.File;
import java.io.IOException;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import jxl.Workbook;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Mario
 */
public class TrabajosPendientesFrame extends javax.swing.JFrame {

    private List<Rubro> rubros = null;
    private List<Trabajo> trabajos = null;
    private List<RenglonTrabajo> rt = null;
    private List<TemporalPendientesTanques> listaTpt = new ArrayList<>();
    private SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    private DecimalFormat df_cert = new DecimalFormat("000000");

    /**
     * Creates new form TrabajosPendientesFrame
     */
    public TrabajosPendientesFrame() {
        initComponents();
        getContentPane().setBackground(new java.awt.Color(Constantes.getR(), Constantes.getG(), Constantes.getB()));
        this.setLocationRelativeTo(null);
//        setExtendedState(this.MAXIMIZED_BOTH);
        llenarCombo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        volverBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        comboR = new javax.swing.JComboBox<>();
        modificarBtn = new javax.swing.JButton();
        excelBtn = new javax.swing.JButton();
        terminadoBtn = new javax.swing.JButton();
        laboratorioBtn = new javax.swing.JButton();
        eliminarBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("TRABAJOS PENDIENTES POR TIPO DE SERVICIO");

        volverBtn.setText("Volver");
        volverBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverBtnActionPerformed(evt);
            }
        });

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabla);

        jLabel1.setText("Rubro:");

        comboR.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboRActionPerformed(evt);
            }
        });

        modificarBtn.setText("Modificar");
        modificarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modificarBtnActionPerformed(evt);
            }
        });

        excelBtn.setText("Excel");
        excelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                excelBtnActionPerformed(evt);
            }
        });

        terminadoBtn.setText("An√°lisis Recibido");
        terminadoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                terminadoBtnActionPerformed(evt);
            }
        });

        laboratorioBtn.setText("Listado Laboratorio");
        laboratorioBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                laboratorioBtnActionPerformed(evt);
            }
        });

        eliminarBtn.setText("Eliminar");
        eliminarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(modificarBtn)
                        .addGap(18, 18, 18)
                        .addComponent(excelBtn)
                        .addGap(18, 18, 18)
                        .addComponent(laboratorioBtn)
                        .addGap(18, 18, 18)
                        .addComponent(terminadoBtn)
                        .addGap(18, 18, 18)
                        .addComponent(eliminarBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(volverBtn))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 914, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(comboR, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(comboR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 450, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(volverBtn)
                    .addComponent(modificarBtn)
                    .addComponent(excelBtn)
                    .addComponent(terminadoBtn)
                    .addComponent(laboratorioBtn)
                    .addComponent(eliminarBtn))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void volverBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverBtnActionPerformed
        volver();
    }//GEN-LAST:event_volverBtnActionPerformed

    private void comboRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboRActionPerformed
        int row = comboR.getSelectedIndex();
        if (row > 0) {
            Rubro rubro = rubros.get(row - 1);
            buscar(rubro);
        }
    }//GEN-LAST:event_comboRActionPerformed

    private void modificarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modificarBtnActionPerformed
        modificar();
    }//GEN-LAST:event_modificarBtnActionPerformed

    private void excelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excelBtnActionPerformed
        excel();
    }//GEN-LAST:event_excelBtnActionPerformed

    private void terminadoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_terminadoBtnActionPerformed
        recibido();
    }//GEN-LAST:event_terminadoBtnActionPerformed

    private void laboratorioBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_laboratorioBtnActionPerformed
        laboratorio();
    }//GEN-LAST:event_laboratorioBtnActionPerformed

    private void eliminarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarBtnActionPerformed
        eliminar();
        int row2 = comboR.getSelectedIndex();
        if (row2 > 0) {
            Rubro rubro = rubros.get(row2 - 1);
            buscar(rubro);
        }
    }//GEN-LAST:event_eliminarBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TrabajosPendientesFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TrabajosPendientesFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TrabajosPendientesFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TrabajosPendientesFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TrabajosPendientesFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> comboR;
    private javax.swing.JButton eliminarBtn;
    private javax.swing.JButton excelBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton laboratorioBtn;
    private javax.swing.JButton modificarBtn;
    private javax.swing.JTable tabla;
    private javax.swing.JButton terminadoBtn;
    private javax.swing.JButton volverBtn;
    // End of variables declaration//GEN-END:variables

    private void volver() {
        MainFrame mf = new MainFrame();
        mf.setVisible(true);
        this.dispose();
    }

    private void llenarCombo() {
        comboR.removeAllItems();
        comboR.addItem("");
        rubros = null;
        try {
            rubros = new RubroService().getAllRubrosActivos();
        } catch (Exception ex) {
            Logger.getLogger(TrabajosPendientesFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (rubros != null && !rubros.isEmpty()) {
            for (Rubro rubro : rubros) {
                comboR.addItem(rubro.getDetalle());
            }
        }
    }

    private void buscar(Rubro rubro) {
        UtilFrame.limpiarTabla(tabla);
        Estructura estructura = null;
        estructura = rubro.getEstructura();
        List<EstructuraServicio> estructurasServicio = null;
        try {
            estructurasServicio = new EstructuraServicioService().getAllEstructuraServicioByEstructuraActivos(estructura);
        } catch (Exception ex) {
            Logger.getLogger(TrabajosPendientesFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        int col = 0;
        if (estructurasServicio != null && !estructurasServicio.isEmpty()) {
            DefaultTableModel tbl = new DefaultTableModel();
            tbl.addColumn("CONSORCIO");
            col = estructurasServicio.size();
            for (EstructuraServicio es : estructurasServicio) {
                if (es.getVisible()) {
                    tbl.addColumn(es.getContenido());
                }
            }
            tabla.setModel(tbl);
        }
        trabajos = null;
        try {
            trabajos = new TrabajoService().getTrabajosByRubroActivos(rubro);
        } catch (Exception ex) {
            Logger.getLogger(TrabajosPendientesFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
//        System.out.println(trabajos);
//        System.exit(0);
        if (trabajos != null && !trabajos.isEmpty()) {
            DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
            for (Trabajo trabajo : trabajos) {
                Boolean labo1 = false;
                Servicio servicio = trabajo.getServicio();
                Consorcio consorcio = servicio.getConsorcio();
                Domicilio domicilio = consorcio.getDomicilio();
                String refConsorcio = domicilio.getCalle() + " " + domicilio.getNumero();
                rt = null;
                try {
                    rt = new RenglonTrabajoService().getRenglonesByTrabajoActivo(trabajo);
                } catch (Exception ex) {
                    Logger.getLogger(TrabajosPendientesFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                TemporalPendientesTanques tpt = new TemporalPendientesTanques();
                tpt.setConsorcio(refConsorcio);
                tpt.setEncargado(consorcio.getEncargado());
                tpt.setFechaLimpieza(trabajo.getFecha());
                tpt.setTelefono(consorcio.getTelefonoEncargado());
                Object o[] = new Object[col + 1];
                o[0] = refConsorcio;
                int i = 1;
                for (RenglonTrabajo renglon : rt) {
                    if (renglon.getVisible() != null) {
                        if (renglon.getVisible()) {
                            o[i] = renglon.getContenido();
                            if (renglon.getCodigoCampo().equals(6)) {
                                if (!renglon.getContenido().isEmpty()) {
                                    Long ide = Long.valueOf(renglon.getContenido());
                                    String nombre = "";
                                    try {
                                        nombre = new PersonaService().getPersonaActivaById(ide);
                                    } catch (Exception ex) {
                                        Logger.getLogger(TrabajosPendientesFrame.class.getName()).log(Level.SEVERE, null, ex);
                                    }
                                    o[i] = nombre;
                                }
                            }
                            if (renglon.getCodigoCampo().equals(10)) {
                                if (renglon.getContenido().equals("2")) {
                                    labo1 = true;
                                    o[i] = "NO";

                                } else {
                                    o[i] = "SI";
                                }
                            }
                            if (renglon.getCodigoCampo().equals(11)) {
                                if (renglon.getContenido().equals("2")) {
                                    labo1 = true;
                                    o[i] = "NO";

                                } else {
                                    o[i] = "SI";
                                }
                            }
                            if (renglon.getCodigoCampo().equals(15)) {
                                tpt.setBacteriologico(renglon.getContenido());
                                if (renglon.getContenido().equals("1")) {
                                    o[i] = "SI";
                                } else {
                                    o[i] = "NO";
                                }
                            }
                            if (renglon.getCodigoCampo().equals(16)) {
                                tpt.setFisico(renglon.getContenido());
                                if (renglon.getContenido().equals("1")) {
                                    o[i] = "SI";
                                } else {
                                    o[i] = "NO";
                                }
                            }
                            if (renglon.getCodigoCampo().equals(17)) {
                                if (renglon.getContenido().equals("2")) {
                                    labo1 = true;
                                    o[i] = "NO";
                                } else {
                                    o[i] = "SI";
                                }
                            }
                            i += 1;
                        }
                    } else {
                        o[i] = renglon.getContenido();
                        if (renglon.getCodigoCampo().equals(10)) {
                            if (renglon.getContenido().equals("2")) {
                                labo1 = true;
                                o[i] = "NO";
                            } else {
                                o[i] = "SI";
                            }
                        }
                        if (renglon.getCodigoCampo().equals(15)) {
                            tpt.setBacteriologico(renglon.getContenido());
                            if (renglon.getContenido().equals("1")) {
                                o[i] = "SI";
                            } else {
                                o[i] = "NO";
                            }
                        }
                        if (renglon.getCodigoCampo().equals(16)) {
                            tpt.setFisico(renglon.getContenido());
                            if (renglon.getContenido().equals("1")) {
                                o[i] = "SI";
                            } else {
                                o[i] = "NO";
                            }
                        }
                        i += 1;
                    }
                }
                if (labo1) {
                    listaTpt.add(tpt);
                }
                tbl.addRow(o);
            }
            tabla.setModel(tbl);
        }
    }

    private void modificar() {
        int row = tabla.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(this, "DEBE SELECCIONAR UN TRABAJO PARA MODIFICAR");
            return;
        }
        Trabajo trabajo = trabajos.get(row);
        List<RenglonTrabajo> rengs = null;
        try {
            rengs = new RenglonTrabajoService().getRenglonesByTrabajoActivo(trabajo);
        } catch (Exception ex) {
            Logger.getLogger(TrabajosPendientesFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        ActualizarTrabajoFrame atf = new ActualizarTrabajoFrame(trabajo, rengs);
        atf.setVisible(true);
        this.dispose();
    }

    private void excel() {
        String rutaArchivo = "c://emitank//excel//trabajos_pendientes.xls";
        File archivo = new File(rutaArchivo);
        if (archivo.exists()) {
            archivo.delete();
        }
        int rows = tabla.getRowCount();
        int cols = tabla.getColumnCount();

        try {
            archivo.createNewFile();
        } catch (IOException ex) {
            Logger.getLogger(AbmConsorcioFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        WritableWorkbook libro = null;
        try {
            libro = Workbook.createWorkbook(archivo);
        } catch (IOException ex) {
            Logger.getLogger(AbmConsorcioFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        WritableSheet hoja1 = libro.createSheet("Trabajos pendientes", 0);
        try {
            hoja1.addCell(new jxl.write.Label(0, 0, "EMITANK"));
            for (int x = 0; x < cols; x++) {
                hoja1.addCell(new jxl.write.Label(x, 1, tabla.getColumnName(x)));
            }
            for (int i = 0; i < rows; i++) {
                for (int r = 0; r < cols; r++) {
                    hoja1.addCell(new jxl.write.Label(r, i + 2, tabla.getValueAt(i, r).toString()));
                }
            }
        } catch (WriteException ex) {
            Logger.getLogger(AbmConsorcioFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error configurando Excel");
        }
        try {
            libro.write();
            libro.close();
        } catch (IOException ex) {
            Logger.getLogger(AbmConsorcioFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error: 313");
        } catch (WriteException ex) {
            Logger.getLogger(AbmConsorcioFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error: 314");
        }
        JOptionPane.showMessageDialog(this, "Excel creado correctamente");
        volver();
    }

    private void laboratorio() {
        int cuantos = listaTpt.size();
        if (cuantos > 0) {
            Configuracion config = null;
            try {
                config = new ConfiguracionService().getConfiguracion(1L);
            } catch (Exception ex) {
                Logger.getLogger(TrabajosPendientesFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (config != null) {
                Integer nroLab = config.getNroLaboratorio();
                nroLab += 1;
                config.setNroLaboratorio(nroLab);
                try {
                    new ConfiguracionService().updateConfiguracion(config);
                } catch (Exception ex) {
                    Logger.getLogger(TrabajosPendientesFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                String nro = df_cert.format(nroLab);
                String rutaArchivo = "c://SYSTEM//LABORATORIO//pedidos_lab_nro_" + nro + ".xls";
                File archivo = new File(rutaArchivo);
                if (archivo.exists()) {
                    archivo.delete();
                }
//                int rows = tabla.getRowCount();
//                int cols = tabla.getColumnCount();

                try {
                    archivo.createNewFile();
                } catch (IOException ex) {
                    Logger.getLogger(AbmConsorcioFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                WritableWorkbook libro = null;
                try {
                    libro = Workbook.createWorkbook(archivo);
                } catch (IOException ex) {
                    Logger.getLogger(AbmConsorcioFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                WritableSheet hoja1 = libro.createSheet("laboratorio", 0);
                int row = 2;
                try {
                    hoja1.addCell(new jxl.write.Label(0, 0, "EMITANK"));
                    hoja1.addCell(new jxl.write.Label(0, 1, "CONSORCIO"));
                    hoja1.addCell(new jxl.write.Label(1, 1, "FECHA LIMPIEZA"));
                    hoja1.addCell(new jxl.write.Label(2, 1, "A.BACTERIO"));
                    hoja1.addCell(new jxl.write.Label(3, 1, "A.FISICO"));
                    hoja1.addCell(new jxl.write.Label(4, 1, "ENCARGADO"));
                    hoja1.addCell(new jxl.write.Label(5, 1, "TELEFONO"));
                    for (TemporalPendientesTanques t : listaTpt) {
                        hoja1.addCell(new jxl.write.Label(0, row, t.getConsorcio()));
                        hoja1.addCell(new jxl.write.Label(1, row, sdf.format(t.getFechaLimpieza())));
                        String bacterio = "NO";
                        String quimico = "NO";
                        if (t.getBacteriologico().equals("1")) {
                            bacterio = "SI";
                        }
                        if (t.getFisico().equals("1")) {
                            quimico = "SI";
                        }
                        hoja1.addCell(new jxl.write.Label(2, row, bacterio));
                        hoja1.addCell(new jxl.write.Label(3, row, quimico));
                        hoja1.addCell(new jxl.write.Label(4, row, t.getEncargado()));
                        hoja1.addCell(new jxl.write.Label(5, row, t.getTelefono()));
                        row += 1;
                    }
                } catch (WriteException ex) {
                    Logger.getLogger(AbmConsorcioFrame.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, "Error configurando Excel");
                }
                try {
                    libro.write();
                    libro.close();
                } catch (IOException ex) {
                    Logger.getLogger(AbmConsorcioFrame.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, "Error: 313");
                } catch (WriteException ex) {
                    Logger.getLogger(AbmConsorcioFrame.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, "Error: 314");
                }
                JOptionPane.showMessageDialog(this, "Excel creado correctamente");
                for (Trabajo t : trabajos) {
                    RenglonTrabajo renglon = null;
                    try {
                        renglon = new RenglonTrabajoService().getRenglonLaboratorioByTrabajoActivo(t);
                    } catch (Exception ex) {
                        Logger.getLogger(TrabajosPendientesFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    renglon.setContenido("1");
                    try {
                        new RenglonTrabajoService().updateRenglonTrabajo(renglon);
                    } catch (Exception ex) {
                        Logger.getLogger(TrabajosPendientesFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                volver();
            }
        }
    }

    private void recibido() {
        int row = tabla.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(this, "DEBE SELECCIONAR UN TRABAJO PARA FINALIZARLO");
            return;
        }
        Trabajo trabajo = trabajos.get(row);

        List<RenglonTrabajo> rengs = null;
        try {
            rengs = new RenglonTrabajoService().getRenglonesByTrabajoActivo(trabajo);
        } catch (Exception ex) {
            Logger.getLogger(TrabajosPendientesFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        for (RenglonTrabajo renglon : rengs) {
            if (renglon.getCodigoCampo().equals(10)) {
                if (renglon.getContenido().equals("2")) {
                    JOptionPane.showMessageDialog(this, "ESTE ANALISIS NO SE ENVIO A LABORATORIO");
                    return;
                }
            }
        }
        trabajo.setPdfGenerado(true);
        try {
            new TrabajoService().updateTrabajo(trabajo);
        } catch (Exception ex) {
            Logger.getLogger(TrabajosPendientesFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        for (RenglonTrabajo renglon : rengs) {
            if (renglon.getCodigoCampo().equals(11)) {
                if (renglon.getContenido().equals("2")) {
                    renglon.setContenido("1");
                    try {
                        new RenglonTrabajoService().updateRenglonTrabajo(renglon);
                    } catch (Exception ex) {
                        Logger.getLogger(TrabajosPendientesFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "ESTE ANALISIS YA SE RECIBIO DE LABORATORIO");
                    return;
                }
            }
            if (renglon.getCodigoCampo().equals(17)) {
                renglon.setContenido("1");
                try {
                    new RenglonTrabajoService().updateRenglonTrabajo(renglon);
                } catch (Exception ex) {
                    Logger.getLogger(TrabajosPendientesFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        certificado();
        int row2 = comboR.getSelectedIndex();
        if (row2 > 0) {
            Rubro rubro = rubros.get(row2 - 1);
            buscar(rubro);
        }
    }

    private void certificado() {
        int row = tabla.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(this, "DEBE SELECCIONAR UN TRABAJO PARA GENERAR CERTIFICADO");
            return;
        }
        Trabajo trabajo = trabajos.get(row);
        int pdfGenerado = 0;
        try {
            File pdf = new PDFBuilder().armarCertificado3(trabajo);
            DesktopApi.open(pdf);
            pdfGenerado = 1;
        } catch (DocumentException ex) {
            Logger.getLogger(GenerarCertificadosFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(GenerarCertificadosFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (pdfGenerado == 1) {
            trabajo.setPdfGenerado(true);
            try {
                new TrabajoService().updateTrabajo(trabajo);
            } catch (Exception ex) {
                Logger.getLogger(GenerarCertificadosFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        JOptionPane.showMessageDialog(this, "CERTIFICADO GENERADO");
//        llenarTabla();
    }

    private void eliminar() {
        int row = tabla.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(this, "SELECCIONE CUAL QUIERE ELIMINAR");
            return;
        }
        Trabajo trabajo = trabajos.get(row);
        rt = null;
        try {
            rt = new RenglonTrabajoService().getRenglonesByTrabajoActivo(trabajo);
        } catch (Exception ex) {
            Logger.getLogger(TrabajosPendientesFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (rt != null && !rt.isEmpty()) {
            int a = JOptionPane.showConfirmDialog(this, "CONFIRME ELIMINACION DE TRABAJO SELECCIONADO", "Atenci√≥n", JOptionPane.YES_NO_OPTION);
            if (a == 0) {
                for (RenglonTrabajo reng : rt) {
                    try {
                        new RenglonTrabajoService().deleteRenglonTrabajo(reng);
                    } catch (Exception ex) {
                        Logger.getLogger(TrabajosPendientesFrame.class.getName()).log(Level.SEVERE, null, ex);
                        JOptionPane.showMessageDialog(this, "ERROR BORRANDO RENGLONES");
                        return;
                    }
                }
                try {
                    new TrabajoService().deleteTrabajo(trabajo);
                } catch (Exception ex) {
                    Logger.getLogger(TrabajosPendientesFrame.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, "ERROR BORRANDO TRABAJO");
                    return;
                }
            }
        }
    }
}
