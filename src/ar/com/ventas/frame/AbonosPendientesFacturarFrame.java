/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.ventas.frame;

import ar.com.ventas.entities.Abono;
import ar.com.ventas.entities.AbonoPendiente;
import ar.com.ventas.entities.Comprobante;
import ar.com.ventas.entities.Consorcio;
import ar.com.ventas.entities.ConsorcioMaster;
import ar.com.ventas.entities.Domicilio;
import ar.com.ventas.entities.RenglonAbono;
import ar.com.ventas.entities.Rubro;
import ar.com.ventas.entities.TitularCuit;
import ar.com.ventas.estructuras.Constantes;
import ar.com.ventas.estructuras.Mes;
import ar.com.ventas.estructuras.TextosCuotasPeriodosEnFacturas;
import ar.com.ventas.services.AbonoService;
import ar.com.ventas.services.ComprobanteService;
import ar.com.ventas.services.ConsorcioMasterService;
import ar.com.ventas.services.ConsorcioService;
import ar.com.ventas.services.RenglonAbonoService;
import ar.com.ventas.services.RubroService;
import ar.com.ventas.services.TitularCuitService;
import ar.com.ventas.util.UtilAbonos;
import ar.com.ventas.util.UtilFactura;
import ar.com.ventas.util.UtilFrame;
import java.io.File;
import java.io.IOException;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import jxl.Workbook;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;

/**
 *
 * @author Mario
 */
public class AbonosPendientesFacturarFrame extends javax.swing.JFrame {

    private List<Abono> abonos;
    private List<Rubro> rubros;
    private List<AbonoPendiente> abonosPendientes;
    private List<Mes> meses;
    private SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    private DecimalFormat df = new DecimalFormat("#0.00");
    private DecimalFormat dfs = new DecimalFormat("0000");
    private DecimalFormat dfn = new DecimalFormat("00000000");

    /**
     * Creates new form AbonosPendientesFacturarFrame
     */
    public AbonosPendientesFacturarFrame() {
        initComponents();
        getContentPane().setBackground(new java.awt.Color(Constantes.getR(), Constantes.getG(), Constantes.getB()));
//        this.setLocationRelativeTo(null);
        setExtendedState(6); // this.MAXIMIZED_BOTH
        llenarCombo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        generarBtn = new javax.swing.JButton();
        borrarBtn = new javax.swing.JButton();
        sacarBtn = new javax.swing.JButton();
        volverBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        combo = new javax.swing.JComboBox<>();
        reasignarBtn = new javax.swing.JButton();
        excelBtn = new javax.swing.JButton();
        chkBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("ABONOS PENDIENTES DE FACTURAR -a");

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CODIGO", "CONSORCIO", "CTA FCTRD", "IMPORTE", "CONS ORG", "FCH ULT AB", "ULT CTA FCTRD", "IMPORTE", "NR FC", "FECHA FC", "IMP.FC", "TITULAR", "ID_ORG", "ID_MST"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabla);
        if (tabla.getColumnModel().getColumnCount() > 0) {
            tabla.getColumnModel().getColumn(0).setPreferredWidth(20);
            tabla.getColumnModel().getColumn(1).setPreferredWidth(100);
            tabla.getColumnModel().getColumn(2).setPreferredWidth(20);
            tabla.getColumnModel().getColumn(3).setPreferredWidth(30);
            tabla.getColumnModel().getColumn(4).setPreferredWidth(100);
            tabla.getColumnModel().getColumn(5).setPreferredWidth(40);
            tabla.getColumnModel().getColumn(6).setPreferredWidth(20);
            tabla.getColumnModel().getColumn(7).setPreferredWidth(30);
            tabla.getColumnModel().getColumn(8).setPreferredWidth(40);
            tabla.getColumnModel().getColumn(9).setPreferredWidth(40);
            tabla.getColumnModel().getColumn(10).setPreferredWidth(30);
            tabla.getColumnModel().getColumn(11).setPreferredWidth(100);
            tabla.getColumnModel().getColumn(12).setPreferredWidth(20);
            tabla.getColumnModel().getColumn(13).setPreferredWidth(20);
        }

        generarBtn.setText("GENERAR");
        generarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generarBtnActionPerformed(evt);
            }
        });

        borrarBtn.setText("BORRAR");
        borrarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borrarBtnActionPerformed(evt);
            }
        });

        sacarBtn.setText("SACAR");
        sacarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sacarBtnActionPerformed(evt);
            }
        });

        volverBtn.setText("VOLVER");
        volverBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverBtnActionPerformed(evt);
            }
        });

        jLabel1.setText("RUBRO:");

        combo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        combo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboActionPerformed(evt);
            }
        });

        reasignarBtn.setText("REASIGNAR");
        reasignarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reasignarBtnActionPerformed(evt);
            }
        });

        excelBtn.setText("EXCEL");
        excelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                excelBtnActionPerformed(evt);
            }
        });

        chkBtn.setText("chk");
        chkBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 928, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(generarBtn)
                        .addGap(18, 18, 18)
                        .addComponent(sacarBtn)
                        .addGap(18, 18, 18)
                        .addComponent(borrarBtn)
                        .addGap(18, 18, 18)
                        .addComponent(reasignarBtn)
                        .addGap(18, 18, 18)
                        .addComponent(excelBtn)
                        .addGap(18, 18, 18)
                        .addComponent(chkBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(volverBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(combo, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(combo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 415, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(generarBtn)
                    .addComponent(borrarBtn)
                    .addComponent(sacarBtn)
                    .addComponent(volverBtn)
                    .addComponent(reasignarBtn)
                    .addComponent(excelBtn)
                    .addComponent(chkBtn))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void volverBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverBtnActionPerformed
        volver();
    }//GEN-LAST:event_volverBtnActionPerformed

    private void comboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboActionPerformed
        int row = combo.getSelectedIndex();
        if (row > 0) {
            Rubro ru = rubros.get(row - 1);
            generarLista(ru);
        }
    }//GEN-LAST:event_comboActionPerformed

    private void sacarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sacarBtnActionPerformed
//        DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
        int cantidadSeleccionada = tabla.getSelectedRowCount();
//        int cantidadTabla = tabla.getRowCount();
        int a[] = tabla.getSelectedRows();
        if (cantidadSeleccionada < 1) {
            JOptionPane.showMessageDialog(this, "DEBE SELECCIONAR UN ABONO PARA SACER");
            return;
        }
        for (int n = cantidadSeleccionada - 1; n > -1; n--) {
//            tbl.removeRow(a[n]);
            abonosPendientes.remove(a[n]);
        }
        llenarTabla(abonosPendientes);

        //
//        int row = tabla.getSelectedRow();
//        if (row < 0) {
//            JOptionPane.showMessageDialog(this, "DEBE SELECCIONAR UN ABONO PARA SACR DE LISTA");
//            return;
//        }
//        sacar(row);
        /*
        
        
        
        
        
        
        llenarTabla(abonos);
         */
    }//GEN-LAST:event_sacarBtnActionPerformed

    private void borrarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrarBtnActionPerformed
        int row = tabla.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(this, "DEBE SELECCIONAR UN ABONO ELIMINAR ABONO");
            return;
        }
        borrar(row);
    }//GEN-LAST:event_borrarBtnActionPerformed

    private void generarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generarBtnActionPerformed
        generar(abonosPendientes);
        volver();
    }//GEN-LAST:event_generarBtnActionPerformed

    private void reasignarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reasignarBtnActionPerformed
        int row = tabla.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(this, "DEBE SELECCIONAR UN CONSORCIO PARA REASIGNAR");
            return;
        }
        reasignar(row);
    }//GEN-LAST:event_reasignarBtnActionPerformed

    private void excelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excelBtnActionPerformed
        excel();
    }//GEN-LAST:event_excelBtnActionPerformed

    private void chkBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkBtnActionPerformed
        int row = tabla.getSelectedRow();
        Abono ab = abonos.get(row);
        System.out.println(ab.getConsorcio().getDomicilio().getCalle());
        System.out.println(ab.getFechaInicio());
        System.out.println(UtilAbonos.getEstaEnFrecuencia(ab.getFechaInicio()));
        System.exit(0);
    }//GEN-LAST:event_chkBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AbonosPendientesFacturarFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AbonosPendientesFacturarFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AbonosPendientesFacturarFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AbonosPendientesFacturarFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AbonosPendientesFacturarFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton borrarBtn;
    private javax.swing.JButton chkBtn;
    private javax.swing.JComboBox<String> combo;
    private javax.swing.JButton excelBtn;
    private javax.swing.JButton generarBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton reasignarBtn;
    private javax.swing.JButton sacarBtn;
    private javax.swing.JTable tabla;
    private javax.swing.JButton volverBtn;
    // End of variables declaration//GEN-END:variables

    private void volver() {
        FacturarAbonos2Frame fa2f = new FacturarAbonos2Frame();
        fa2f.setVisible(true);
        this.dispose();
    }

    private void generarLista(Rubro r) {
        abonos = null;
        int cod = r.getCodigo();
        try {
            switch (cod) {
                case 2: // LIMPIEZA DE TANQUES
                    abonos = new AbonoService().getAbonosActivosPendientesOrdenadoByRubro(r);
                    break;
                case 3: // 
                    
                case 4: // FUMIGACION
                    abonos = new AbonoService().getAbonosActivosPendientesOrdenadoByRubro4(r);
                    break;
                case 5: // PUESTA A TIERRA

                case 6: // RECARGA MATAFUEGOS

                case 7: // CERCO ELECTRICO
                    abonos = new AbonoService().getAbonosActivosPendientesOrdenadoByRubro7(r);
                    break;
                case 8: // CAMARAS SEGURIDAD
                    abonos = new AbonoService().getAbonosActivosPendientesOrdenadoByRubro8(r);
                    break;
                case 9: // REPARACIONES
                case 10: // RED HIDRANTE
                    abonos = new AbonoService().getAbonosActivosPendientesOrdenadoByRubro10(r);
                    break;
                default: // si hay nuevos

            }
        } catch (Exception ex) {
            Logger.getLogger(AbonosPendientesFacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (abonos != null && !abonos.isEmpty()) {
//            for (Abono ab : abonos) {
//                System.out.println(ab.getConsorcio().getDomicilio().getCalle());
//            }
//            System.out.println(r.getId());
//            System.exit(0);
            abonosPendientes = new ArrayList<>();
            for (Abono ab : abonos) {
                Consorcio co = ab.getConsorcio();
//                Abono abonoMaster = null;
                ConsorcioMaster cm = null;
                Comprobante comprobante = null;
                Comprobante comprobanteMaster = null;
                Consorcio consorcioVinculado = null;
                TitularCuit titular = null;

//                try {
//                    cm = new ConsorcioMasterService().getConsorcioMasterByRubroAndConsorcio(r, co);
//                } catch (Exception ex) {
//                    Logger.getLogger(AbonosPendientesFacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
////                    System.out.println(cm);
////                    System.exit(0);
//                }
//                if (cm != null) {
//                    Integer codigo = cm.getMaster();
//                    try {
//                        consorcioVinculado = new ConsorcioService().getConsorcioByCodigo(codigo);
//                    } catch (Exception ex) {
//                        Logger.getLogger(AbonosPendientesFacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
////                        System.out.println(consorcioVinculado);
////                        System.exit(0);
//                    }
//                }
//                try {
//                    abonoMaster = new AbonoService().getUltimoAbonoByConsorcioAndRubro(consorcioVinculado, r);
//                } catch (Exception ex) {
//                    Logger.getLogger(AbonosPendientesFacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
////                    System.out.println(abonoMaster);
////                    System.exit(0);
//                }
                try {
                    comprobante = new ComprobanteService().getComprobantesByConsorcioAndRubro(co, r);
                } catch (Exception ex) {
                    Logger.getLogger(AbonosPendientesFacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
//                    System.out.println(comprobante);
//                    System.exit(0);
                }
                if (comprobante != null) {
                    if (!comprobante.getOriginal()) {
//                        JOptionPane.showMessageDialog(this, comprobante.getId().toString());
//                        return;
                        Long mst = comprobante.getId_original();
                        comprobanteMaster = null;
                        consorcioVinculado = null;
                        Integer codi=0;
                        try {
                            comprobanteMaster = new ComprobanteService().getComprobanteById(mst);
                            
                        } catch (Exception ex) {
                            Logger.getLogger(AbonosPendientesFacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
                            System.out.println("ID MASTER"+mst);
                            JOptionPane.showMessageDialog(this, "VERIFIQUE 2 ");
                            //System.out.println(codi);
                            return;
                        }
                        try {
                        codi = comprobanteMaster.getCodigoCliente();
                        } catch (Exception ex){
                            System.out.println(mst);
//                            System.out.println(comprobanteMaster.getId());
//                            JOptionPane.showMessageDialog(this, "VERIFIQUE CODI ");
                            //System.out.println(codi);
                            continue;
                        }
                        try {
                            consorcioVinculado = new ConsorcioService().getConsorcioByCodigo(codi);
                        } catch (Exception ex) {
                            Logger.getLogger(AbonosPendientesFacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
                            System.out.println("codigo "+codi);
                            System.out.println(comprobanteMaster.getCalleNroPisoDtoCliente());
                            JOptionPane.showMessageDialog(this, "VERIFIQUE 3 ");
                            //System.out.println(codi);
                            return;
                        }
                    }
                    String cuit = comprobante.getCuitTitular();
                    try {
                        titular = new TitularCuitService().getTitularActivoByCuit(cuit);
                    } catch (Exception ex) {
                        Logger.getLogger(AbonosPendientesFacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
//                        System.out.println(titular);
//                        System.exit(0);
                    }
                }
                AbonoPendiente ap = new AbonoPendiente();
                ap.setAbono(ab);
//                ap.setAbonoMaster(abonoMaster);
                ap.setComprobante(comprobante);
                ap.setComprobanteMaster(comprobanteMaster);
                ap.setConsorcioVinculado(consorcioVinculado);
                ap.setTitular(titular);
                abonosPendientes.add(ap);
            }
            llenarTabla(abonosPendientes);
        }
    }

    private void llenarCombo() {
        combo.removeAllItems();
        combo.addItem("");
        rubros = null;
        try {
            rubros = new RubroService().getAllRubrosActivos();
        } catch (Exception ex) {
            Logger.getLogger(AbonosPendientesFacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (rubros != null && !rubros.isEmpty()) {
            for (Rubro r : rubros) {
                combo.addItem(r.getDetalle());
            }
        }
        meses = new ArrayList<>();
        for (Mes m : Mes.values()) {
            meses.add(m);
        }
    }

    private void sacar(int row) {
//        System.out.println(row);
//        System.out.println(abonosPendientes.size());
        abonosPendientes.remove(row);
//        System.out.println(abonosPendientes.size());
//        System.exit(0);

        llenarTabla(abonosPendientes);
    }

    private void borrar(int row) {
        Abono abono = abonosPendientes.get(row).getAbono();
        abonosPendientes.remove(row);
        abono.setActivo(false);
        try {
            new AbonoService().updateAbono(abono);
        } catch (Exception ex) {
            Logger.getLogger(AbonosPendientesFacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        llenarTabla(abonosPendientes);
    }

    private void generar(List<AbonoPendiente> abonosPendientes) {
        if (abonosPendientes != null) {
            Date fecha = new Date();
            String fpd = UtilFrame.getFechaPrimero(sdf.format(fecha));
            String fph = UtilFrame.getFechaFinMes(sdf.format(fecha));
            String fve = fph;
            Date fecha_periodo_dde;
            Date fecha_periodo_hta;
            Date fecha_vencim;

            try {
                fecha_periodo_dde = sdf.parse(fpd);
                fecha_periodo_hta = sdf.parse(fph);
                fecha_vencim = sdf.parse(fve);
            } catch (ParseException ex) {
                Logger.getLogger(AbonosPendientesFacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "ERROR EN FECHAS");
                return;
            }
            int ps = 3;

//            for (AbonoPendiente ap : abonosPendientes) {
//                System.out.println(ap.getAbono().getConsorcio().getDomicilio().getCalle());
//                System.out.println(ap.getAbono().getConsorcio().getDomicilio().getNumero());
//                System.out.println(ap.getComprobante().getCodigoCliente());
//                System.out.println(ap.getComprobante().getFecha());
//                if (!ap.getComprobante().getOriginal()) {
//                    System.out.println(ap.getComprobanteMaster().getCodigoCliente());
//                    System.out.println(ap.getComprobanteMaster().getFecha()); // es del mes pasado no es la nueva
//                    System.out.println(ap.getConsorcioVinculado().getCodigo());
//                }
//                System.out.println(ap.getTitular());
//                System.out.println("------");
//            }
//            System.exit(0);
//    COMPROBANTES ORIGINALES PRIMERO
            for (AbonoPendiente ap : abonosPendientes) {
                Comprobante compro = ap.getComprobante();
                if (compro.getOriginal()) {
                    Abono ab = ap.getAbono();
//99
//                    Abono ab = null;
                    Integer tipoFact = ab.getTipoFacturacion();
                    if (tipoFact.equals(2)) { // 1 Factura por Mes
                        ps = 3; // 3 es producto y servicio
                    }
                    List<RenglonAbono> ra;
                    try {
                        ra = new RenglonAbonoService().getRenglonAbonosByAbono(ab);
                    } catch (Exception ex) {
                        Consorcio cns = ab.getConsorcio();
                        Domicilio dm = cns.getDomicilio();
                        String calle = dm.getCalle() + " " + dm.getNumero();
                        Logger.getLogger(FacturarAbonosFrame.class.getName()).log(Level.SEVERE, null, ex);
                        JOptionPane.showMessageDialog(this, "ERROR RECUPERANDO RENGLONES DE FACTURA " + calle);
                        return;
                    }
                    Consorcio consorcio = ab.getConsorcio();
                    if (ap.getTitular() != null) {
                        TitularCuit titular = ap.getTitular();
                        if(titular.getActivo()){
                        ab.setPendiente(false);
                        String resultado = UtilFactura.saveFactura(consorcio, titular,
                                ab, ra, fecha, fecha_periodo_dde, fecha_periodo_hta, fecha_vencim, ps);
                        } else {
                            
                        }
                    }
                }
            }

//    COMPROBANTES ASIGNADOS SEGUNDO
            for (AbonoPendiente ap : abonosPendientes) {
                Comprobante compro = ap.getComprobante();
                if (!compro.getOriginal()) {
                    Abono ab = ap.getAbono();
                    ps = 3; // 3 es producto y servicio
                    List<RenglonAbono> ra;
                    try {
                        ra = new RenglonAbonoService().getRenglonAbonosByAbono(ab);
                    } catch (Exception ex) {
                        Logger.getLogger(FacturarAbonosFrame.class.getName()).log(Level.SEVERE, null, ex);
                        Consorcio cns = ab.getConsorcio();
                        Domicilio dm = cns.getDomicilio();
                        String calle = dm.getCalle() + " " + dm.getNumero();
                        JOptionPane.showMessageDialog(this, "ERROR RECUPERANDO RENGLONES DE FACTURA " + calle);
                        return;
                    }
                    Consorcio consorcioOriginal = ap.getConsorcioVinculado();
                    Consorcio consorcio = ab.getConsorcio();
                    ab.setPendiente(false);
                    String resultado = UtilFactura.saveFacturaVinculada(consorcioOriginal, consorcio,
                            ab, ra);
                    if (resultado.equals("4")) {
                        JOptionPane.showMessageDialog(this, "AJUSTE EL ABONO PARA QUE COINCIDA CON LA FACTURA ASIGNADA");
                        return;
                    }
                    System.out.println(resultado);
//                    System.exit(0);

                }
            }
            JOptionPane.showMessageDialog(this, "PROCESO COMPLETADO");
        }
    }

    private void llenarTabla(List<AbonoPendiente> abonosP) {
        UtilFrame.limpiarTabla(tabla);
        if (abonosP != null && !abonosP.isEmpty()) {
            DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
            for (AbonoPendiente ap : abonosP) {
                Object o[] = new Object[14];
                Comprobante compro = ap.getComprobante();
                if (compro != null) {
                    o[12] = compro.getId();
                    if (!compro.getOriginal()) {
                        o[13] = compro.getId_original();
                    }
                }
                Rubro ru = ap.getAbono().getRubro();
                Consorcio con = ap.getAbono().getConsorcio();
                Domicilio dm = con.getDomicilio();
                String calle = dm.getCalle() + " " + dm.getNumero();
                String cuota = ap.getAbono().getCuotaFacturada().toString();
                if (ru.getCodigo().equals(3)) {
//                    int lin = ap.getAbono().getTextoPeriodo();
                    int ms = ap.getAbono().getCuotaFacturada();
//                    if(lin == 0){
                    cuota = meses.get(ms).getDetalle();
//                    }
                }
                Double importe = 0.0;
                if (compro != null) {
                    importe = compro.getTotal();
                    if (!compro.getOriginal()) {
                        Long id_orig = compro.getId_original();
                        Comprobante cmp = null;
                        int a = 0;
                        try {
                            cmp = new ComprobanteService().getComprobanteById(id_orig);
                            a = 1;
                        } catch (Exception ex) {
                            Logger.getLogger(AbonosPendientesFacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
                            JOptionPane.showMessageDialog(this, "VERIFIQUE " + id_orig);
                            return;
                        }
                        if (a == 1) {
                            Integer cod = cmp.getCodigoCliente();
                            Consorcio vin = null;
                            try {
                                vin = new ConsorcioService().getConsorcioByCodigo(cod);
                                Domicilio dmV = vin.getDomicilio();
                                String calleVinculado = dmV.getCalle() + " " + dmV.getNumero();
                                o[4] = calleVinculado;
                            } catch (Exception ex) {
                                Logger.getLogger(AbonosPendientesFacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
                                o[4] = "";
                            }
                        } else {
                            o[4] = "";
                        }
                    }
                }
                /*
                
                
                
                
                
                
                Double importe = ap.getAbono().getImporte() / ap.getAbono().getCuotas();
                if (ap.getConsorcioVinculado() != null) {
                    Consorcio vin = ap.getConsorcioVinculado();
                    Domicilio dmV = vin.getDomicilio();
                    String calleVinculado = dmV.getCalle() + " " + dmV.getNumero();
                    if (ap.getAbonoMaster() != null) {

                        String fechaUltAbono = sdf.format(ap.getAbonoMaster().getFechaPeriodo());
                        String ultCuotaFctrd = ap.getAbonoMaster().getCuotaFacturada().toString();
                        String ultImporte = df.format(importe);
                        if (ap.getComprobante() != null) {
                            String numFc = ap.getComprobante().getLetra()
                                    + " " + dfs.format(ap.getComprobante().getSucursal())
                                    + "-" + dfn.format(ap.getComprobante().getNumero());
                            String fechFc = sdf.format(ap.getComprobante().getFecha());
                            String impFc = df.format(ap.getComprobante().getTotal());
                            if (ap.getTitular() != null) {
                                String titular = ap.getTitular().getPersona().getApellidoNombre();
                                
                                o[5] = fechaUltAbono;
                                if (ru.getCodigo().equals(2)) {
                                    o[6] = ultCuotaFctrd;
                                } else {
                                    if (ru.getCodigo().equals(3)) {
                                        int lin = ap.getAbono().getTextoPeriodo();
                                        String mes = meses.get(lin).getDetalle();
                                        o[6] = mes;
                                    }
                                }
                                o[7] = ultImporte;
                                o[8] = numFc;
                                o[9] = fechFc;
                                o[10] = impFc;
                                o[11] = titular;
                            } else {
                                o[11] = "FC.A.MANO";
                            }
                        }
                    }
                }
                
                 */
                o[0] = con.getCodigo().toString();
                o[1] = calle;
                o[2] = cuota;
                o[3] = df.format(importe);
                tbl.addRow(o);
            }
            tabla.setModel(tbl);
        } else {
            System.out.println("ESTA VACIA");
        }
    }

    private void reasignar(int row) {
        int rowR = combo.getSelectedIndex();
        if (rowR > 0) {
            Rubro rubro = rubros.get(rowR - 1);
            AbonoPendiente ap = abonosPendientes.get(row);
            Abono abono = ap.getAbono();
            Consorcio consorcio = abono.getConsorcio();
            Domicilio dm = consorcio.getDomicilio();
            ConsorcioMaster cm = null;
            int c1 = abono.getCuotas();
            int c2 = abono.getCuotaFacturada();
            if (c1 == c2) {
                System.out.println("ABONO FINALIZADO");
                RenovarAndReasignarAbonoFrame raraf = new RenovarAndReasignarAbonoFrame(ap);
                raraf.setVisible(true);
                this.dispose();
                return;
            }
            try {
                cm = new ConsorcioMasterService().getConsorcioMasterParaElim(consorcio, rubro);
            } catch (Exception ex) {
                Logger.getLogger(AbonosPendientesFacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
                return;
            }
            if (cm != null) {
                Consorcio consorcio2 = cm.getConsorcio();
                Domicilio dm2 = consorcio2.getDomicilio();
                String calle2 = dm2.getCalle() + " " + dm2.getNumero();
                JOptionPane.showMessageDialog(this, "ESTE CONSORCIO ES MASTER DE:\n" + calle2);
                return;
            }
            try {
                cm = new ConsorcioMasterService().getConsorcioMasterByRubroAndConsorcio(rubro, consorcio);
            } catch (Exception ex) {
                Logger.getLogger(AbonosPendientesFacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
                return;
            }
            if (cm != null) {
                Integer codigo = cm.getMaster();
                Consorcio consorcio2 = null;
                try {
                    consorcio2 = new ConsorcioService().getConsorcioByCodigo(codigo);
                } catch (Exception ex) {
                    Logger.getLogger(AbonosPendientesFacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
                    return;
                }
                Domicilio dm2 = consorcio2.getDomicilio();
                String calle2 = dm2.getCalle() + " " + dm2.getNumero();
                JOptionPane.showMessageDialog(this, "EL MASTER DE ESTE CONSORCIO ES:\n" + calle2);
                int a = JOptionPane.showConfirmDialog(this, "ELIJE OTRO MASTER?", "Atención", JOptionPane.YES_NO_OPTION);
                if (a != 0) {
                    return;
                }
            }
            System.out.println(dm.getCalle() + " " + dm.getNumero());
//            ap = abonosPendientes.get(row);
//            try {
////                        new ConsorcioMasterService().deleteConsorcioActivoMaster(cm);
//            } catch (Exception ex) {
//                Logger.getLogger(AbonosPendientesFacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
//                return;
//            }
            ReasignarAbonoFrame raf = new ReasignarAbonoFrame(ap, cm);
            raf.setVisible(true);
            this.dispose();
        }
    }

    private void excel() {
        int rows = tabla.getRowCount();
        if (rows > 0) {
            String rutaArchivo = "c:/alfa_sistema/data/excel/para_facturar.xls";
            File archivo = new File(rutaArchivo);
            if (archivo.exists()) {
                archivo.delete();
            }
            try {
                archivo.createNewFile();
            } catch (IOException ex) {
                Logger.getLogger(AbonosPendientesFacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            WritableWorkbook libro = null;
            try {
                libro = Workbook.createWorkbook(archivo);
            } catch (IOException ex) {
                Logger.getLogger(AbonosPendientesFacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            WritableSheet hoja1 = libro.createSheet("ABONOS", 0);
            int y = 2;
            try {
                hoja1.addCell(new jxl.write.Label(0, 0, "ALFA - SISTEMAS"));
                hoja1.addCell(new jxl.write.Label(0, 1, "CODIGO"));
                hoja1.addCell(new jxl.write.Label(1, 1, "CONSORCIO"));
                hoja1.addCell(new jxl.write.Label(2, 1, "CUO.FACT."));
                hoja1.addCell(new jxl.write.Label(3, 1, "IMPORTE"));
                hoja1.addCell(new jxl.write.Label(4, 1, "CONS.VINC."));
                hoja1.addCell(new jxl.write.Label(5, 1, "FECH.ULT.AB."));
                hoja1.addCell(new jxl.write.Label(6, 1, "ULT.CUOT"));
                hoja1.addCell(new jxl.write.Label(7, 1, "IMPORTE"));
                hoja1.addCell(new jxl.write.Label(8, 1, "NRO.FC."));
                hoja1.addCell(new jxl.write.Label(9, 1, "FECH.FC."));
                hoja1.addCell(new jxl.write.Label(10, 1, "IMP.FC."));
                hoja1.addCell(new jxl.write.Label(11, 1, "TITULAR"));
            } catch (WriteException ex) {
                Logger.getLogger(AbonosPendientesFacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Error configurando Excel");
            }
            for (int i = 0; i < rows; i++) {
                String cod = tabla.getValueAt(i, 0).toString(); //renglon, columna
                String cons = tabla.getValueAt(i, 1).toString();
                String cta1 = tabla.getValueAt(i, 2).toString();
                Double imp2 = Double.valueOf(tabla.getValueAt(i, 3).toString().replace(",", "."));
                try {
                    hoja1.addCell(new jxl.write.Label(0, y, cod));
                    hoja1.addCell(new jxl.write.Label(1, y, cons));
                    hoja1.addCell(new jxl.write.Label(2, y, cta1));
                    hoja1.addCell(new jxl.write.Number(3, y, imp2));
                    if (tabla.getValueAt(i, 4) != null) {
                        String cons_vinc = tabla.getValueAt(i, 4).toString();
                        String fech_ult = tabla.getValueAt(i, 5).toString();
                        String cta = tabla.getValueAt(i, 6).toString();
                        Double imp3 = Double.valueOf(tabla.getValueAt(i, 7).toString().replace(",", "."));
                        String nro_fc = tabla.getValueAt(i, 8).toString();
                        String fech_fc = tabla.getValueAt(i, 9).toString();
                        Double imp4 = Double.valueOf(tabla.getValueAt(i, 10).toString().replace(",", "."));
                        String tit = tabla.getValueAt(i, 11).toString();
                        hoja1.addCell(new jxl.write.Label(4, y, cons_vinc));
                        hoja1.addCell(new jxl.write.Label(5, y, fech_ult));
                        hoja1.addCell(new jxl.write.Label(6, y, cta));
                        hoja1.addCell(new jxl.write.Number(7, y, imp3));
                        hoja1.addCell(new jxl.write.Label(8, y, nro_fc));
                        hoja1.addCell(new jxl.write.Label(9, y, fech_fc));
                        hoja1.addCell(new jxl.write.Number(10, y, imp4));
                        hoja1.addCell(new jxl.write.Label(11, y, tit));
                    }

                    y += 1;
                } catch (WriteException ex) {
                    Logger.getLogger(AbonosPendientesFacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, "Error configurando Excel");
                }
            }
            try {
                libro.write();
                libro.close();
            } catch (IOException ex) {
                Logger.getLogger(AbonosPendientesFacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Error: 662");
            } catch (WriteException ex) {
                Logger.getLogger(AbonosPendientesFacturarFrame.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Error: 663");
            }
            JOptionPane.showMessageDialog(this, "Excel creado correctamente");

        }
    }
}
